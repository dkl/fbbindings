'' FreeBASIC binding for mingw-w64-v3.3.0

#pragma once

#define _INC_WINDOWSX
#define GetInstanceModule(hInstance) cast(HMODULE, (hInstance))
#define GlobalPtrHandle(lp) cast(HGLOBAL, GlobalHandle(lp))
#define GlobalLockPtr(lp) cast(WINBOOL, GlobalLock(GlobalPtrHandle(lp)))
#define GlobalUnlockPtr(lp) GlobalUnlock(GlobalPtrHandle(lp))
#define GlobalAllocPtr(flags, cb) GlobalLock(GlobalAlloc((flags), (cb)))
#define GlobalReAllocPtr(lp, cbNew, flags) '' TODO: (GlobalUnlockPtr(lp),GlobalLock(GlobalReAlloc(GlobalPtrHandle(lp) ,(cbNew),(flags))))
#define GlobalFreePtr(lp) '' TODO: (GlobalUnlockPtr(lp),(WINBOOL)(ULONG_PTR)GlobalFree(GlobalPtrHandle(lp)))
#define DeletePen(hpen) DeleteObject(cast(HGDIOBJ, cast(HPEN, (hpen))))
#define SelectPen(hdc, hpen) cast(HPEN, SelectObject((hdc), cast(HGDIOBJ, cast(HPEN, (hpen)))))
#define GetStockPen(i) cast(HPEN, GetStockObject(i))
#define DeleteBrush(hbr) DeleteObject(cast(HGDIOBJ, cast(HBRUSH, (hbr))))
#define SelectBrush(hdc, hbr) cast(HBRUSH, SelectObject((hdc), cast(HGDIOBJ, cast(HBRUSH, (hbr)))))
#define GetStockBrush(i) cast(HBRUSH, GetStockObject(i))
#define DeleteRgn(hrgn) DeleteObject(cast(HGDIOBJ, cast(HRGN, (hrgn))))
#define CopyRgn(hrgnDst, hrgnSrc) CombineRgn(hrgnDst, hrgnSrc, 0, RGN_COPY)
#define IntersectRgn(hrgnResult, hrgnA, hrgnB) CombineRgn(hrgnResult, hrgnA, hrgnB, RGN_AND)
#define SubtractRgn(hrgnResult, hrgnA, hrgnB) CombineRgn(hrgnResult, hrgnA, hrgnB, RGN_DIFF)
#define UnionRgn(hrgnResult, hrgnA, hrgnB) CombineRgn(hrgnResult, hrgnA, hrgnB, RGN_OR)
#define XorRgn(hrgnResult, hrgnA, hrgnB) CombineRgn(hrgnResult, hrgnA, hrgnB, RGN_XOR)
#define DeletePalette(hpal) DeleteObject(cast(HGDIOBJ, cast(HPALETTE, (hpal))))
#define DeleteFont(hfont) DeleteObject(cast(HGDIOBJ, cast(HFONT, (hfont))))
#define SelectFont(hdc, hfont) cast(HFONT, SelectObject((hdc), cast(HGDIOBJ, cast(HFONT, (hfont)))))
#define GetStockFont(i) cast(HFONT, GetStockObject(i))
#define DeleteBitmap(hbm) DeleteObject(cast(HGDIOBJ, cast(HBITMAP, (hbm))))
#define SelectBitmap(hdc, hbm) cast(HBITMAP, SelectObject((hdc), cast(HGDIOBJ, cast(HBITMAP, (hbm)))))
#define InsetRect(lprc, dx, dy) InflateRect((lprc), -(dx), -(dy))
#define GetWindowInstance(hwnd) cast(HMODULE, GetWindowLongPtr(hwnd, GWLP_HINSTANCE))
#define GetWindowStyle(hwnd) cast(DWORD, GetWindowLong(hwnd, GWL_STYLE))
#define GetWindowExStyle(hwnd) cast(DWORD, GetWindowLong(hwnd, GWL_EXSTYLE))
#define GetWindowOwner(hwnd) GetWindow(hwnd, GW_OWNER)
#define GetFirstChild(hwnd) GetTopWindow(hwnd)
#define GetFirstSibling(hwnd) GetWindow(hwnd, GW_HWNDFIRST)
#define GetLastSibling(hwnd) GetWindow(hwnd, GW_HWNDLAST)
#define GetNextSibling(hwnd) GetWindow(hwnd, GW_HWNDNEXT)
#define GetPrevSibling(hwnd) GetWindow(hwnd, GW_HWNDPREV)
#define GetWindowID(hwnd) GetDlgCtrlID(hwnd)
#define SetWindowRedraw(hwnd, fRedraw) SNDMSG(hwnd, WM_SETREDRAW, cast(WPARAM, cast(WINBOOL, (fRedraw))), cast(LPARAM, 0))
#define SubclassWindow(hwnd, lpfn) cast(WNDPROC, SetWindowLongPtr((hwnd), GWLP_WNDPROC, cast(LPARAM, cast(WNDPROC, (lpfn)))))
#define IsMinimized(hwnd) IsIconic(hwnd)
#define IsMaximized(hwnd) IsZoomed(hwnd)
#define IsRestored(hwnd) ((GetWindowStyle(hwnd) and (WS_MINIMIZE or WS_MAXIMIZE)) = 0)
#define SetWindowFont(hwnd, hfont, fRedraw) FORWARD_WM_SETFONT((hwnd), (hfont), (fRedraw), SNDMSG)
#define GetWindowFont(hwnd) FORWARD_WM_GETFONT((hwnd), SNDMSG)
#define MapWindowRect(hwndFrom, hwndTo, lprc) MapWindowPoints((hwndFrom), (hwndTo), cptr(POINT ptr, (lprc)), 2)
#define IsLButtonDown() (GetKeyState(VK_LBUTTON) < 0)
#define IsRButtonDown() (GetKeyState(VK_RBUTTON) < 0)
#define IsMButtonDown() (GetKeyState(VK_MBUTTON) < 0)
#define SubclassDialog(hwndDlg, lpfn) SetWindowLongPtr(hwndDlg, DWLP_DLGPROC, cast(LPARAM, (lpfn)))
#define SetDlgMsgResult(hwnd, msg, result) '' TODO: (((msg)==WM_CTLCOLORMSGBOX || (msg)==WM_CTLCOLOREDIT || (msg)==WM_CTLCOLORLISTBOX || (msg)==WM_CTLCOLORBTN || (msg)==WM_CTLCOLORDLG || (msg)==WM_CTLCOLORSCROLLBAR || (msg)==WM_CTLCOLORSTATIC || (msg)==WM_COMPAREITEM || (msg)==WM_VKEYTOITEM || (msg)==WM_CHARTOITEM || (msg)==WM_QUERYDRAGICON || (msg)==WM_INITDIALOG) ? (WINBOOL)(result) : (SetWindowLongPtr((hwnd),DWLP_MSGRESULT,(LPARAM)(LRESULT)(result)),TRUE))
#define DefDlgProcEx(hwnd, msg, wParam, lParam, pfRecursion) '' TODO: (*(pfRecursion) = TRUE,DefDlgProc(hwnd,msg,wParam,lParam))
#define CheckDefDlgRecursion(pfRecursion) '' TODO: if (*(pfRecursion)) { *(pfRecursion) = FALSE; return FALSE; }
#define HANDLE_MSG(hwnd, message, fn) '' TODO: case (message): return HANDLE_##message((hwnd),(wParam),(lParam),(fn))
#define HANDLE_WM_COMPACTING(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_COMPACTING(hwnd, compactRatio, fn) '' TODO: (void)(fn)((hwnd),WM_COMPACTING,(WPARAM)(UINT)(compactRatio),(LPARAM)0)
#define HANDLE_WM_WININICHANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(LPCTSTR)(lParam)),(LRESULT)0)
#define FORWARD_WM_WININICHANGE(hwnd, lpszSectionName, fn) '' TODO: (void)(fn)((hwnd),WM_WININICHANGE,(WPARAM)0,(LPARAM)(LPCTSTR)(lpszSectionName))
#define HANDLE_WM_SYSCOLORCHANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_SYSCOLORCHANGE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_SYSCOLORCHANGE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_QUERYNEWPALETTE(hwnd, wParam, lParam, fn) '' TODO: MAKELRESULT((WINBOOL)(fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_QUERYNEWPALETTE(hwnd, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_QUERYNEWPALETTE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_PALETTEISCHANGING(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_PALETTEISCHANGING(hwnd, hwndPaletteChange, fn) '' TODO: (void)(fn)((hwnd),WM_PALETTEISCHANGING,(WPARAM)(HWND)(hwndPaletteChange),(LPARAM)0)
#define HANDLE_WM_PALETTECHANGED(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_PALETTECHANGED(hwnd, hwndPaletteChange, fn) '' TODO: (void)(fn)((hwnd),WM_PALETTECHANGED,(WPARAM)(HWND)(hwndPaletteChange),(LPARAM)0)
#define HANDLE_WM_FONTCHANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_FONTCHANGE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_FONTCHANGE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_SPOOLERSTATUS(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),(int)(short)LOWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SPOOLERSTATUS(hwnd, status, cJobInQueue, fn) '' TODO: (void)(fn)((hwnd),WM_SPOOLERSTATUS,(WPARAM)(status),MAKELPARAM((cJobInQueue),0))
#define HANDLE_WM_DEVMODECHANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(LPCTSTR)(lParam)),(LRESULT)0)
#define FORWARD_WM_DEVMODECHANGE(hwnd, lpszDeviceName, fn) '' TODO: (void)(fn)((hwnd),WM_DEVMODECHANGE,(WPARAM)0,(LPARAM)(LPCTSTR)(lpszDeviceName))
#define HANDLE_WM_TIMECHANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_TIMECHANGE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_TIMECHANGE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_POWER(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(wParam)),(LRESULT)0)
#define FORWARD_WM_POWER(hwnd, code, fn) '' TODO: (void)(fn)((hwnd),WM_POWER,(WPARAM)(int)(code),(LPARAM)0)
#define HANDLE_WM_QUERYENDSESSION(hwnd, wParam, lParam, fn) '' TODO: MAKELRESULT((WINBOOL)(fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_QUERYENDSESSION(hwnd, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_QUERYENDSESSION,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_ENDSESSION(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(WINBOOL)(wParam)),(LRESULT)0)
#define FORWARD_WM_ENDSESSION(hwnd, fEnding, fn) '' TODO: (void)(fn)((hwnd),WM_ENDSESSION,(WPARAM)(WINBOOL)(fEnding),(LPARAM)0)
#define HANDLE_WM_QUIT(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(wParam)),(LRESULT)0)
#define FORWARD_WM_QUIT(hwnd, exitCode, fn) '' TODO: (void)(fn)((hwnd),WM_QUIT,(WPARAM)(exitCode),(LPARAM)0)
#define HANDLE_WM_SYSTEMERROR(hwnd, wParam, lParam, fn) cast(LRESULT, 0)
#define FORWARD_WM_SYSTEMERROR(hwnd, errCode, fn) cast(LRESULT, 0)
#define HANDLE_WM_CREATE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)((fn)((hwnd),(LPCREATESTRUCT)(lParam)) ? 0 : -1)
#define FORWARD_WM_CREATE(hwnd, lpCreateStruct, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_CREATE,(WPARAM)0,(LPARAM)(LPCREATESTRUCT)(lpCreateStruct))
#define HANDLE_WM_NCCREATE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(LPCREATESTRUCT)(lParam))
#define FORWARD_WM_NCCREATE(hwnd, lpCreateStruct, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_NCCREATE,(WPARAM)0,(LPARAM)(LPCREATESTRUCT)(lpCreateStruct))
#define HANDLE_WM_DESTROY(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_DESTROY(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_DESTROY,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_NCDESTROY(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_NCDESTROY(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_NCDESTROY,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_SHOWWINDOW(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(WINBOOL)(wParam),(UINT)(lParam)),(LRESULT)0)
#define FORWARD_WM_SHOWWINDOW(hwnd, fShow, status, fn) '' TODO: (void)(fn)((hwnd),WM_SHOWWINDOW,(WPARAM)(WINBOOL)(fShow),(LPARAM)(UINT)(status))
#define HANDLE_WM_SETREDRAW(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(WINBOOL)(wParam)),(LRESULT)0)
#define FORWARD_WM_SETREDRAW(hwnd, fRedraw, fn) '' TODO: (void)(fn)((hwnd),WM_SETREDRAW,(WPARAM)(WINBOOL)(fRedraw),(LPARAM)0)
#define HANDLE_WM_ENABLE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(WINBOOL)(wParam)),(LRESULT)0)
#define FORWARD_WM_ENABLE(hwnd, fEnable, fn) '' TODO: (void)(fn)((hwnd),WM_ENABLE,(WPARAM)(WINBOOL)(fEnable),(LPARAM)0)
#define HANDLE_WM_SETTEXT(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(LPCTSTR)(lParam)),(LRESULT)0)
#define FORWARD_WM_SETTEXT(hwnd, lpszText, fn) '' TODO: (void)(fn)((hwnd),WM_SETTEXT,(WPARAM)0,(LPARAM)(LPCTSTR)(lpszText))
#define HANDLE_WM_GETTEXT(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(int)(fn)((hwnd),(int)(wParam),(LPTSTR)(lParam))
#define FORWARD_WM_GETTEXT(hwnd, cchTextMax, lpszText, fn) '' TODO: (int)(DWORD)(fn)((hwnd),WM_GETTEXT,(WPARAM)(int)(cchTextMax),(LPARAM)(LPTSTR)(lpszText))
#define HANDLE_WM_GETTEXTLENGTH(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(int)(fn)(hwnd)
#define FORWARD_WM_GETTEXTLENGTH(hwnd, fn) '' TODO: (int)(DWORD)(fn)((hwnd),WM_GETTEXTLENGTH,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_WINDOWPOSCHANGING(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(LPWINDOWPOS)(lParam))
#define FORWARD_WM_WINDOWPOSCHANGING(hwnd, lpwpos, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_WINDOWPOSCHANGING,(WPARAM)0,(LPARAM)(LPWINDOWPOS)(lpwpos))
#define HANDLE_WM_WINDOWPOSCHANGED(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(const LPWINDOWPOS)(lParam)),(LRESULT)0)
#define FORWARD_WM_WINDOWPOSCHANGED(hwnd, lpwpos, fn) '' TODO: (void)(fn)((hwnd),WM_WINDOWPOSCHANGED,(WPARAM)0,(LPARAM)(const LPWINDOWPOS)(lpwpos))
#define HANDLE_WM_MOVE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_MOVE(hwnd, x, y, fn) '' TODO: (void)(fn)((hwnd),WM_MOVE,(WPARAM)0,MAKELPARAM((x),(y)))
#define HANDLE_WM_SIZE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SIZE(hwnd, state, cx, cy, fn) '' TODO: (void)(fn)((hwnd),WM_SIZE,(WPARAM)(UINT)(state),MAKELPARAM((cx),(cy)))
#define HANDLE_WM_CLOSE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_CLOSE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_CLOSE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_QUERYOPEN(hwnd, wParam, lParam, fn) '' TODO: MAKELRESULT((WINBOOL)(fn)(hwnd),0)
#define FORWARD_WM_QUERYOPEN(hwnd, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_QUERYOPEN,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_GETMINMAXINFO(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(LPMINMAXINFO)(lParam)),(LRESULT)0)
#define FORWARD_WM_GETMINMAXINFO(hwnd, lpMinMaxInfo, fn) '' TODO: (void)(fn)((hwnd),WM_GETMINMAXINFO,(WPARAM)0,(LPARAM)(LPMINMAXINFO)(lpMinMaxInfo))
#define HANDLE_WM_PAINT(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_PAINT(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_PAINT,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_ERASEBKGND(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(HDC)(wParam))
#define FORWARD_WM_ERASEBKGND(hwnd, hdc, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_ERASEBKGND,(WPARAM)(HDC)(hdc),(LPARAM)0)
#define HANDLE_WM_ICONERASEBKGND(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(HDC)(wParam))
#define FORWARD_WM_ICONERASEBKGND(hwnd, hdc, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_ICONERASEBKGND,(WPARAM)(HDC)(hdc),(LPARAM)0)
#define HANDLE_WM_NCPAINT(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HRGN)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCPAINT(hwnd, hrgn, fn) '' TODO: (void)(fn)((hwnd),WM_NCPAINT,(WPARAM)(HRGN)(hrgn),(LPARAM)0)
#define HANDLE_WM_NCCALCSIZE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(UINT)(fn)((hwnd),(WINBOOL)(wParam),(NCCALCSIZE_PARAMS *)(lParam))
#define FORWARD_WM_NCCALCSIZE(hwnd, fCalcValidRects, lpcsp, fn) '' TODO: (UINT)(DWORD)(fn)((hwnd),WM_NCCALCSIZE,(WPARAM)(fCalcValidRects),(LPARAM)(NCCALCSIZE_PARAMS *)(lpcsp))
#define HANDLE_WM_NCHITTEST(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(UINT)(fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam))
#define FORWARD_WM_NCHITTEST(hwnd, x, y, fn) '' TODO: (UINT)(DWORD)(fn)((hwnd),WM_NCHITTEST,(WPARAM)0,MAKELPARAM((x),(y)))
#define HANDLE_WM_QUERYDRAGICON(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(UINT)(fn)(hwnd)
#define FORWARD_WM_QUERYDRAGICON(hwnd, fn) '' TODO: (HICON)(UINT)(DWORD)(fn)((hwnd),WM_QUERYDRAGICON,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_DROPFILES(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HDROP)(wParam)),(LRESULT)0)
#define FORWARD_WM_DROPFILES(hwnd, hdrop, fn) '' TODO: (void)(fn)((hwnd),WM_DROPFILES,(WPARAM)(HDROP)(hdrop),(LPARAM)0)
#define HANDLE_WM_ACTIVATE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)LOWORD(wParam),(HWND)(lParam),(WINBOOL)HIWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_ACTIVATE(hwnd, state, hwndActDeact, fMinimized, fn) '' TODO: (void)(fn)((hwnd),WM_ACTIVATE,MAKEWPARAM((state),(fMinimized)),(LPARAM)(HWND)(hwndActDeact))
#define HANDLE_WM_ACTIVATEAPP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(WINBOOL)(wParam),(DWORD)(lParam)),(LRESULT)0)
#define FORWARD_WM_ACTIVATEAPP(hwnd, fActivate, dwThreadId, fn) '' TODO: (void)(fn)((hwnd),WM_ACTIVATEAPP,(WPARAM)(WINBOOL)(fActivate),(LPARAM)(dwThreadId))
#define HANDLE_WM_NCACTIVATE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(WINBOOL)(wParam),(WPARAM)0,(LPARAM)0)
#define FORWARD_WM_NCACTIVATE(hwnd, fActive, hwndActDeact, fMinimized, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_NCACTIVATE,(WPARAM)(WINBOOL)(fActive),(LPARAM)0)
#define HANDLE_WM_SETFOCUS(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_SETFOCUS(hwnd, hwndOldFocus, fn) '' TODO: (void)(fn)((hwnd),WM_SETFOCUS,(WPARAM)(HWND)(hwndOldFocus),(LPARAM)0)
#define HANDLE_WM_KILLFOCUS(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_KILLFOCUS(hwnd, hwndNewFocus, fn) '' TODO: (void)(fn)((hwnd),WM_KILLFOCUS,(WPARAM)(HWND)(hwndNewFocus),(LPARAM)0)
#define HANDLE_WM_KEYDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),TRUE,(int)(short)LOWORD(lParam),(UINT)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_KEYDOWN(hwnd, vk, cRepeat, flags, fn) '' TODO: (void)(fn)((hwnd),WM_KEYDOWN,(WPARAM)(UINT)(vk),MAKELPARAM((cRepeat),(flags)))
#define HANDLE_WM_KEYUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),FALSE,(int)(short)LOWORD(lParam),(UINT)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_KEYUP(hwnd, vk, cRepeat, flags, fn) '' TODO: (void)(fn)((hwnd),WM_KEYUP,(WPARAM)(UINT)(vk),MAKELPARAM((cRepeat),(flags)))
#define HANDLE_WM_CHAR(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(TCHAR)(wParam),(int)(short)LOWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_CHAR(hwnd, ch, cRepeat, fn) '' TODO: (void)(fn)((hwnd),WM_CHAR,(WPARAM)(TCHAR)(ch),MAKELPARAM((cRepeat),0))
#define HANDLE_WM_DEADCHAR(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(TCHAR)(wParam),(int)(short)LOWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_DEADCHAR(hwnd, ch, cRepeat, fn) '' TODO: (void)(fn)((hwnd),WM_DEADCHAR,(WPARAM)(TCHAR)(ch),MAKELPARAM((cRepeat),0))
#define HANDLE_WM_SYSKEYDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),TRUE,(int)(short)LOWORD(lParam),(UINT)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SYSKEYDOWN(hwnd, vk, cRepeat, flags, fn) '' TODO: (void)(fn)((hwnd),WM_SYSKEYDOWN,(WPARAM)(UINT)(vk),MAKELPARAM((cRepeat),(flags)))
#define HANDLE_WM_SYSKEYUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),FALSE,(int)(short)LOWORD(lParam),(UINT)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SYSKEYUP(hwnd, vk, cRepeat, flags, fn) '' TODO: (void)(fn)((hwnd),WM_SYSKEYUP,(WPARAM)(UINT)(vk),MAKELPARAM((cRepeat),(flags)))
#define HANDLE_WM_SYSCHAR(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(TCHAR)(wParam),(int)(short)LOWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SYSCHAR(hwnd, ch, cRepeat, fn) '' TODO: (void)(fn)((hwnd),WM_SYSCHAR,(WPARAM)(TCHAR)(ch),MAKELPARAM((cRepeat),0))
#define HANDLE_WM_SYSDEADCHAR(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(TCHAR)(wParam),(int)(short)LOWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SYSDEADCHAR(hwnd, ch, cRepeat, fn) '' TODO: (void)(fn)((hwnd),WM_SYSDEADCHAR,(WPARAM)(TCHAR)(ch),MAKELPARAM((cRepeat),0))
#define HANDLE_WM_MOUSEMOVE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_MOUSEMOVE(hwnd, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),WM_MOUSEMOVE,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_LBUTTONDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),FALSE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_LBUTTONDOWN(hwnd, fDoubleClick, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),(fDoubleClick) ? WM_LBUTTONDBLCLK : WM_LBUTTONDOWN,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_LBUTTONDBLCLK(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),TRUE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define HANDLE_WM_LBUTTONUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_LBUTTONUP(hwnd, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),WM_LBUTTONUP,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_RBUTTONDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),FALSE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_RBUTTONDOWN(hwnd, fDoubleClick, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),(fDoubleClick) ? WM_RBUTTONDBLCLK : WM_RBUTTONDOWN,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_RBUTTONDBLCLK(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),TRUE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define HANDLE_WM_RBUTTONUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_RBUTTONUP(hwnd, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),WM_RBUTTONUP,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_MBUTTONDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),FALSE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_MBUTTONDOWN(hwnd, fDoubleClick, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),(fDoubleClick) ? WM_MBUTTONDBLCLK : WM_MBUTTONDOWN,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_MBUTTONDBLCLK(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),TRUE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define HANDLE_WM_MBUTTONUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_MBUTTONUP(hwnd, x, y, keyFlags, fn) '' TODO: (void)(fn)((hwnd),WM_MBUTTONUP,(WPARAM)(UINT)(keyFlags),MAKELPARAM((x),(y)))
#define HANDLE_WM_MOUSEWHEEL(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(int)(short)HIWORD(wParam),(UINT)(short)LOWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_MOUSEWHEEL(hwnd, xPos, yPos, zDelta, fwKeys, fn) '' TODO: (void)(fn)((hwnd),WM_MOUSEWHEEL,MAKEWPARAM((fwKeys),(zDelta)),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCMOUSEMOVE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCMOUSEMOVE(hwnd, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),WM_NCMOUSEMOVE,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCLBUTTONDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),FALSE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCLBUTTONDOWN(hwnd, fDoubleClick, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),(fDoubleClick) ? WM_NCLBUTTONDBLCLK : WM_NCLBUTTONDOWN,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCLBUTTONDBLCLK(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),TRUE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define HANDLE_WM_NCLBUTTONUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCLBUTTONUP(hwnd, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),WM_NCLBUTTONUP,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCRBUTTONDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),FALSE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCRBUTTONDOWN(hwnd, fDoubleClick, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),(fDoubleClick) ? WM_NCRBUTTONDBLCLK : WM_NCRBUTTONDOWN,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCRBUTTONDBLCLK(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),TRUE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define HANDLE_WM_NCRBUTTONUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCRBUTTONUP(hwnd, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),WM_NCRBUTTONUP,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCMBUTTONDOWN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),FALSE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCMBUTTONDOWN(hwnd, fDoubleClick, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),(fDoubleClick) ? WM_NCMBUTTONDBLCLK : WM_NCMBUTTONDOWN,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_NCMBUTTONDBLCLK(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),TRUE,(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define HANDLE_WM_NCMBUTTONUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_NCMBUTTONUP(hwnd, x, y, codeHitTest, fn) '' TODO: (void)(fn)((hwnd),WM_NCMBUTTONUP,(WPARAM)(UINT)(codeHitTest),MAKELPARAM((x),(y)))
#define HANDLE_WM_MOUSEACTIVATE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(int)(fn)((hwnd),(HWND)(wParam),(UINT)LOWORD(lParam),(UINT)HIWORD(lParam))
#define FORWARD_WM_MOUSEACTIVATE(hwnd, hwndTopLevel, codeHitTest, msg, fn) '' TODO: (int)(DWORD)(fn)((hwnd),WM_MOUSEACTIVATE,(WPARAM)(HWND)(hwndTopLevel),MAKELPARAM((codeHitTest),(msg)))
#define HANDLE_WM_CANCELMODE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_CANCELMODE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_CANCELMODE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_TIMER(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam)),(LRESULT)0)
#define FORWARD_WM_TIMER(hwnd, id, fn) '' TODO: (void)(fn)((hwnd),WM_TIMER,(WPARAM)(UINT)(id),(LPARAM)0)
#define HANDLE_WM_INITMENU(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HMENU)(wParam)),(LRESULT)0)
#define FORWARD_WM_INITMENU(hwnd, hMenu, fn) '' TODO: (void)(fn)((hwnd),WM_INITMENU,(WPARAM)(HMENU)(hMenu),(LPARAM)0)
#define HANDLE_WM_INITMENUPOPUP(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HMENU)(wParam),(UINT)LOWORD(lParam),(WINBOOL)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_INITMENUPOPUP(hwnd, hMenu, item, fSystemMenu, fn) '' TODO: (void)(fn)((hwnd),WM_INITMENUPOPUP,(WPARAM)(HMENU)(hMenu),MAKELPARAM((item),(fSystemMenu)))
#define HANDLE_WM_MENUSELECT(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HMENU)(lParam),(HIWORD(wParam) & MF_POPUP) ? 0 : (int)(LOWORD(wParam)),(HIWORD(wParam) & MF_POPUP) ? GetSubMenu((HMENU)lParam,LOWORD(wParam)) : (HMENU)0,(UINT)(((short)HIWORD(wParam)==-1) ? 0xFFFFFFFF : HIWORD(wParam))),(LRESULT)0)
#define FORWARD_WM_MENUSELECT(hwnd, hmenu, item, hmenuPopup, flags, fn) '' TODO: (void)(fn)((hwnd),WM_MENUSELECT,MAKEWPARAM((item),(flags)),(LPARAM)(HMENU)((hmenu) ? (hmenu) : (hmenuPopup)))
#define HANDLE_WM_MENUCHAR(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(fn)((hwnd),(UINT)(LOWORD(wParam)),(UINT)HIWORD(wParam),(HMENU)(lParam))
#define FORWARD_WM_MENUCHAR(hwnd, ch, flags, hmenu, fn) '' TODO: (DWORD)(fn)((hwnd),WM_MENUCHAR,MAKEWPARAM(flags,(WORD)(ch)),(LPARAM)(HMENU)(hmenu))
#define HANDLE_WM_COMMAND(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(LOWORD(wParam)),(HWND)(lParam),(UINT)HIWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_COMMAND(hwnd, id, hwndCtl, codeNotify, fn) '' TODO: (void)(fn)((hwnd),WM_COMMAND,MAKEWPARAM((UINT)(id),(UINT)(codeNotify)),(LPARAM)(HWND)(hwndCtl))
#define HANDLE_WM_HSCROLL(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(lParam),(UINT)(LOWORD(wParam)),(int)(short)HIWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_HSCROLL(hwnd, hwndCtl, code, pos, fn) '' TODO: (void)(fn)((hwnd),WM_HSCROLL,MAKEWPARAM((UINT)(int)(code),(UINT)(int)(pos)),(LPARAM)(HWND)(hwndCtl))
#define HANDLE_WM_VSCROLL(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(lParam),(UINT)(LOWORD(wParam)),(int)(short)HIWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_VSCROLL(hwnd, hwndCtl, code, pos, fn) '' TODO: (void)(fn)((hwnd),WM_VSCROLL,MAKEWPARAM((UINT)(int)(code),(UINT)(int)(pos)),(LPARAM)(HWND)(hwndCtl))
#define HANDLE_WM_CUT(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_CUT(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_CUT,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_COPY(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_COPY(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_COPY,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_PASTE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_PASTE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_PASTE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_CLEAR(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_CLEAR(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_CLEAR,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_UNDO(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_UNDO(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_UNDO,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_RENDERFORMAT(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HANDLE)(fn)((hwnd),(UINT)(wParam))
#define FORWARD_WM_RENDERFORMAT(hwnd, fmt, fn) '' TODO: (HANDLE)(UINT_PTR)(fn)((hwnd),WM_RENDERFORMAT,(WPARAM)(UINT)(fmt),(LPARAM)0)
#define HANDLE_WM_RENDERALLFORMATS(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_RENDERALLFORMATS(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_RENDERALLFORMATS,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_DESTROYCLIPBOARD(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_DESTROYCLIPBOARD(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_DESTROYCLIPBOARD,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_DRAWCLIPBOARD(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_DRAWCLIPBOARD(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_DRAWCLIPBOARD,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_PAINTCLIPBOARD(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(const LPPAINTSTRUCT)GlobalLock((HGLOBAL)(lParam))),GlobalUnlock((HGLOBAL)(lParam)),(LRESULT)0)
#define FORWARD_WM_PAINTCLIPBOARD(hwnd, hwndCBViewer, lpPaintStruct, fn) '' TODO: (void)(fn)((hwnd),WM_PAINTCLIPBOARD,(WPARAM)(HWND)(hwndCBViewer),(LPARAM)(LPPAINTSTRUCT)(lpPaintStruct))
#define HANDLE_WM_SIZECLIPBOARD(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(const LPRECT)GlobalLock((HGLOBAL)(lParam))),GlobalUnlock((HGLOBAL)(lParam)),(LRESULT)0)
#define FORWARD_WM_SIZECLIPBOARD(hwnd, hwndCBViewer, lprc, fn) '' TODO: (void)(fn)((hwnd),WM_SIZECLIPBOARD,(WPARAM)(HWND)(hwndCBViewer),(LPARAM)(LPRECT)(lprc))
#define HANDLE_WM_VSCROLLCLIPBOARD(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(UINT)LOWORD(lParam),(int)(short)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_VSCROLLCLIPBOARD(hwnd, hwndCBViewer, code, pos, fn) '' TODO: (void)(fn)((hwnd),WM_VSCROLLCLIPBOARD,(WPARAM)(HWND)(hwndCBViewer),MAKELPARAM((code),(pos)))
#define HANDLE_WM_HSCROLLCLIPBOARD(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(UINT)LOWORD(lParam),(int)(short)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_HSCROLLCLIPBOARD(hwnd, hwndCBViewer, code, pos, fn) '' TODO: (void)(fn)((hwnd),WM_HSCROLLCLIPBOARD,(WPARAM)(HWND)(hwndCBViewer),MAKELPARAM((code),(pos)))
#define HANDLE_WM_ASKCBFORMATNAME(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(wParam),(LPTSTR)(lParam)),(LRESULT)0)
#define FORWARD_WM_ASKCBFORMATNAME(hwnd, cchMax, rgchName, fn) '' TODO: (void)(fn)((hwnd),WM_ASKCBFORMATNAME,(WPARAM)(int)(cchMax),(LPARAM)(rgchName))
#define HANDLE_WM_CHANGECBCHAIN(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(HWND)(lParam)),(LRESULT)0)
#define FORWARD_WM_CHANGECBCHAIN(hwnd, hwndRemove, hwndNext, fn) '' TODO: (void)(fn)((hwnd),WM_CHANGECBCHAIN,(WPARAM)(HWND)(hwndRemove),(LPARAM)(HWND)(hwndNext))
#define HANDLE_WM_SETCURSOR(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(HWND)(wParam),(UINT)LOWORD(lParam),(UINT)HIWORD(lParam))
#define FORWARD_WM_SETCURSOR(hwnd, hwndCursor, codeHitTest, msg, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_SETCURSOR,(WPARAM)(HWND)(hwndCursor),MAKELPARAM((codeHitTest),(msg)))
#define HANDLE_WM_SYSCOMMAND(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),(int)(short)LOWORD(lParam),(int)(short)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_SYSCOMMAND(hwnd, cmd, x, y, fn) '' TODO: (void)(fn)((hwnd),WM_SYSCOMMAND,(WPARAM)(UINT)(cmd),MAKELPARAM((x),(y)))
#define HANDLE_WM_MDICREATE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(UINT)(fn)((hwnd),(LPMDICREATESTRUCT)(lParam))
#define FORWARD_WM_MDICREATE(hwnd, lpmcs, fn) '' TODO: (HWND)(UINT)(DWORD)(fn)((hwnd),WM_MDICREATE,(WPARAM)0,(LPARAM)(LPMDICREATESTRUCT)(lpmcs))
#define HANDLE_WM_MDIDESTROY(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_MDIDESTROY(hwnd, hwndDestroy, fn) '' TODO: (void)(fn)((hwnd),WM_MDIDESTROY,(WPARAM)(hwndDestroy),(LPARAM)0)
#define HANDLE_WM_MDIACTIVATE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(WINBOOL)(lParam==(LPARAM)hwnd),(HWND)(lParam),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_MDIACTIVATE(hwnd, fActive, hwndActivate, hwndDeactivate, fn) '' TODO: (void)(fn)(hwnd,WM_MDIACTIVATE,(WPARAM)(hwndDeactivate),(LPARAM)(hwndActivate))
#define HANDLE_WM_MDIRESTORE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_MDIRESTORE(hwnd, hwndRestore, fn) '' TODO: (void)(fn)((hwnd),WM_MDIRESTORE,(WPARAM)(hwndRestore),(LPARAM)0)
#define HANDLE_WM_MDINEXT(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(HWND)(fn)((hwnd),(HWND)(wParam),(WINBOOL)lParam)
#define FORWARD_WM_MDINEXT(hwnd, hwndCur, fPrev, fn) '' TODO: (HWND)(UINT_PTR)(fn)((hwnd),WM_MDINEXT,(WPARAM)(hwndCur),(LPARAM)(fPrev))
#define HANDLE_WM_MDIMAXIMIZE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam)),(LRESULT)0)
#define FORWARD_WM_MDIMAXIMIZE(hwnd, hwndMaximize, fn) '' TODO: (void)(fn)((hwnd),WM_MDIMAXIMIZE,(WPARAM)(hwndMaximize),(LPARAM)0)
#define HANDLE_WM_MDITILE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(fn)((hwnd),(UINT)(wParam))
#define FORWARD_WM_MDITILE(hwnd, cmd, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_MDITILE,(WPARAM)(cmd),(LPARAM)0)
#define HANDLE_WM_MDICASCADE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(fn)((hwnd),(UINT)(wParam))
#define FORWARD_WM_MDICASCADE(hwnd, cmd, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_MDICASCADE,(WPARAM)(cmd),(LPARAM)0)
#define HANDLE_WM_MDIICONARRANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_MDIICONARRANGE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_MDIICONARRANGE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_MDIGETACTIVE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(fn)(hwnd)
#define FORWARD_WM_MDIGETACTIVE(hwnd, fn) '' TODO: (HWND)(UINT_PTR)(fn)((hwnd),WM_MDIGETACTIVE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_MDISETMENU(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(fn)((hwnd),(WINBOOL)(wParam),(HMENU)(wParam),(HMENU)(lParam))
#define FORWARD_WM_MDISETMENU(hwnd, fRefresh, hmenuFrame, hmenuWindow, fn) '' TODO: (HMENU)(UINT_PTR)(fn)((hwnd),WM_MDISETMENU,(WPARAM)((fRefresh) ? (hmenuFrame) : 0),(LPARAM)(hmenuWindow))
#define HANDLE_WM_CHILDACTIVATE(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_CHILDACTIVATE(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_CHILDACTIVATE,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_INITDIALOG(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(UINT)(WINBOOL)(fn)((hwnd),(HWND)(wParam),lParam)
#define FORWARD_WM_INITDIALOG(hwnd, hwndFocus, lParam, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_INITDIALOG,(WPARAM)(HWND)(hwndFocus),(lParam))
#define HANDLE_WM_NEXTDLGCTL(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HWND)(fn)((hwnd),(HWND)(wParam),(WINBOOL)(lParam))
#define FORWARD_WM_NEXTDLGCTL(hwnd, hwndSetFocus, fNext, fn) '' TODO: (HWND)(UINT_PTR)(fn)((hwnd),WM_NEXTDLGCTL,(WPARAM)(HWND)(hwndSetFocus),(LPARAM)(fNext))
#define HANDLE_WM_PARENTNOTIFY(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)LOWORD(wParam),(HWND)(lParam),(UINT)HIWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_PARENTNOTIFY(hwnd, msg, hwndChild, idChild, fn) '' TODO: (void)(fn)((hwnd),WM_PARENTNOTIFY,MAKEWPARAM(msg,idChild),(LPARAM)(hwndChild))
#define HANDLE_WM_ENTERIDLE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),(HWND)(lParam)),(LRESULT)0)
#define FORWARD_WM_ENTERIDLE(hwnd, source, hwndSource, fn) '' TODO: (void)(fn)((hwnd),WM_ENTERIDLE,(WPARAM)(UINT)(source),(LPARAM)(HWND)(hwndSource))
#define HANDLE_WM_GETDLGCODE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(UINT)(fn)(hwnd,(LPMSG)(lParam))
#define FORWARD_WM_GETDLGCODE(hwnd, lpmsg, fn) '' TODO: (UINT)(DWORD)(fn)((hwnd),WM_GETDLGCODE,(lpmsg ? lpmsg->wParam : 0),(LPARAM)(LPMSG)(lpmsg))
#define HANDLE_WM_CTLCOLORMSGBOX(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_MSGBOX)
#define FORWARD_WM_CTLCOLORMSGBOX(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLORMSGBOX,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_CTLCOLOREDIT(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_EDIT)
#define FORWARD_WM_CTLCOLOREDIT(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLOREDIT,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_CTLCOLORLISTBOX(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_LISTBOX)
#define FORWARD_WM_CTLCOLORLISTBOX(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLORLISTBOX,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_CTLCOLORBTN(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_BTN)
#define FORWARD_WM_CTLCOLORBTN(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLORBTN,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_CTLCOLORDLG(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_DLG)
#define FORWARD_WM_CTLCOLORDLG(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLORDLG,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_CTLCOLORSCROLLBAR(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_SCROLLBAR)
#define FORWARD_WM_CTLCOLORSCROLLBAR(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLORSCROLLBAR,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_CTLCOLORSTATIC(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HBRUSH)(fn)((hwnd),(HDC)(wParam),(HWND)(lParam),CTLCOLOR_STATIC)
#define FORWARD_WM_CTLCOLORSTATIC(hwnd, hdc, hwndChild, fn) '' TODO: (HBRUSH)(UINT_PTR)(fn)((hwnd),WM_CTLCOLORSTATIC,(WPARAM)(HDC)(hdc),(LPARAM)(HWND)(hwndChild))
#define HANDLE_WM_SETFONT(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HFONT)(wParam),(WINBOOL)(lParam)),(LRESULT)0)
#define FORWARD_WM_SETFONT(hwnd, hfont, fRedraw, fn) '' TODO: (void)(fn)((hwnd),WM_SETFONT,(WPARAM)(HFONT)(hfont),(LPARAM)(WINBOOL)(fRedraw))
#define HANDLE_WM_GETFONT(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(UINT_PTR)(HFONT)(fn)(hwnd)
#define FORWARD_WM_GETFONT(hwnd, fn) '' TODO: (HFONT)(UINT_PTR)(fn)((hwnd),WM_GETFONT,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_DRAWITEM(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(const DRAWITEMSTRUCT *)(lParam)),(LRESULT)0)
#define FORWARD_WM_DRAWITEM(hwnd, lpDrawItem, fn) '' TODO: (void)(fn)((hwnd),WM_DRAWITEM,(WPARAM)(((const DRAWITEMSTRUCT *)lpDrawItem)->CtlID),(LPARAM)(const DRAWITEMSTRUCT *)(lpDrawItem))
#define HANDLE_WM_MEASUREITEM(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(MEASUREITEMSTRUCT *)(lParam)),(LRESULT)0)
#define FORWARD_WM_MEASUREITEM(hwnd, lpMeasureItem, fn) '' TODO: (void)(fn)((hwnd),WM_MEASUREITEM,(WPARAM)(((MEASUREITEMSTRUCT *)lpMeasureItem)->CtlID),(LPARAM)(MEASUREITEMSTRUCT *)(lpMeasureItem))
#define HANDLE_WM_DELETEITEM(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(const DELETEITEMSTRUCT *)(lParam)),(LRESULT)0)
#define FORWARD_WM_DELETEITEM(hwnd, lpDeleteItem, fn) '' TODO: (void)(fn)((hwnd),WM_DELETEITEM,(WPARAM)(((const DELETEITEMSTRUCT *)(lpDeleteItem))->CtlID),(LPARAM)(const DELETEITEMSTRUCT *)(lpDeleteItem))
#define HANDLE_WM_COMPAREITEM(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(int)(fn)((hwnd),(const COMPAREITEMSTRUCT *)(lParam))
#define FORWARD_WM_COMPAREITEM(hwnd, lpCompareItem, fn) '' TODO: (int)(DWORD)(fn)((hwnd),WM_COMPAREITEM,(WPARAM)(((const COMPAREITEMSTRUCT *)(lpCompareItem))->CtlID),(LPARAM)(const COMPAREITEMSTRUCT *)(lpCompareItem))
#define HANDLE_WM_VKEYTOITEM(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(int)(fn)((hwnd),(UINT)LOWORD(wParam),(HWND)(lParam),(int)(short)HIWORD(wParam))
#define FORWARD_WM_VKEYTOITEM(hwnd, vk, hwndListBox, iCaret, fn) '' TODO: (int)(DWORD)(fn)((hwnd),WM_VKEYTOITEM,MAKEWPARAM((vk),(iCaret)),(LPARAM)(hwndListBox))
#define HANDLE_WM_CHARTOITEM(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(int)(fn)((hwnd),(UINT)LOWORD(wParam),(HWND)(lParam),(int)(short)HIWORD(wParam))
#define FORWARD_WM_CHARTOITEM(hwnd, ch, hwndListBox, iCaret, fn) '' TODO: (int)(DWORD)(fn)((hwnd),WM_CHARTOITEM,MAKEWPARAM((UINT)(ch),(UINT)(iCaret)),(LPARAM)(hwndListBox))
#define HANDLE_WM_QUEUESYNC(hwnd, wParam, lParam, fn) '' TODO: ((fn)(hwnd),(LRESULT)0)
#define FORWARD_WM_QUEUESYNC(hwnd, fn) '' TODO: (void)(fn)((hwnd),WM_QUEUESYNC,(WPARAM)0,(LPARAM)0)
#define HANDLE_WM_COMMNOTIFY(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(wParam),(UINT)LOWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_COMMNOTIFY(hwnd, cid, flags, fn) '' TODO: (void)(fn)((hwnd),WM_COMMNOTIFY,(WPARAM)(cid),MAKELPARAM((flags),0))
#define HANDLE_WM_DISPLAYCHANGE(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(UINT)(wParam),(UINT)LOWORD(lParam),(UINT)HIWORD(wParam)),(LRESULT)0)
#define FORWARD_WM_DISPLAYCHANGE(hwnd, bitsPerPixel, cxScreen, cyScreen, fn) '' TODO: (void)(fn)((hwnd),WM_DISPLAYCHANGE,(WPARAM)(UINT)(bitsPerPixel),(LPARAM)MAKELPARAM((UINT)(cxScreen),(UINT)(cyScreen)))
#define HANDLE_WM_DEVICECHANGE(hwnd, wParam, lParam, fn) '' TODO: (LRESULT)(DWORD)(WINBOOL)(fn)((hwnd),(UINT)(wParam),(DWORD)(wParam))
#define FORWARD_WM_DEVICECHANGE(hwnd, uEvent, dwEventData, fn) '' TODO: (WINBOOL)(DWORD)(fn)((hwnd),WM_DEVICECHANGE,(WPARAM)(UINT)(uEvent),(LPARAM)(DWORD)(dwEventData))
#define HANDLE_WM_CONTEXTMENU(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(UINT)LOWORD(lParam),(UINT)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_CONTEXTMENU(hwnd, hwndContext, xPos, yPos, fn) '' TODO: (void)(fn)((hwnd),WM_CONTEXTMENU,(WPARAM)(HWND)(hwndContext),MAKELPARAM((UINT)(xPos),(UINT)(yPos)))
#define HANDLE_WM_COPYDATA(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(HWND)(wParam),(PCOPYDATASTRUCT)lParam),(LRESULT)0)
#define FORWARD_WM_COPYDATA(hwnd, hwndFrom, pcds, fn) '' TODO: (WINBOOL)(UINT)(DWORD)(fn)((hwnd),WM_COPYDATA,(WPARAM)(hwndFrom),(LPARAM)(pcds))
#define HANDLE_WM_HOTKEY(hwnd, wParam, lParam, fn) '' TODO: ((fn)((hwnd),(int)(wParam),(UINT)LOWORD(lParam),(UINT)HIWORD(lParam)),(LRESULT)0)
#define FORWARD_WM_HOTKEY(hwnd, idHotKey, fuModifiers, vk, fn) '' TODO: (void)(fn)((hwnd),WM_HOTKEY,(WPARAM)(idHotKey),MAKELPARAM((fuModifiers),(vk)))
#define Static_Enable(hwndCtl, fEnable) EnableWindow((hwndCtl), (fEnable))
#define Static_GetText(hwndCtl, lpch, cchMax) GetWindowText((hwndCtl), (lpch), (cchMax))
#define Static_GetTextLength(hwndCtl) GetWindowTextLength(hwndCtl)
#define Static_SetText(hwndCtl, lpsz) SetWindowText((hwndCtl), (lpsz))
#define Static_SetIcon(hwndCtl, hIcon) cast(HICON, cast(UINT_PTR, SNDMSG((hwndCtl), STM_SETICON, cast(WPARAM, cast(HICON, (hIcon))), cast(LPARAM, 0))))
#define Static_GetIcon(hwndCtl, hIcon) cast(HICON, cast(UINT_PTR, SNDMSG((hwndCtl), STM_GETICON, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Button_Enable(hwndCtl, fEnable) EnableWindow((hwndCtl), (fEnable))
#define Button_GetText(hwndCtl, lpch, cchMax) GetWindowText((hwndCtl), (lpch), (cchMax))
#define Button_GetTextLength(hwndCtl) GetWindowTextLength(hwndCtl)
#define Button_SetText(hwndCtl, lpsz) SetWindowText((hwndCtl), (lpsz))
#define Button_GetCheck(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), BM_GETCHECK, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Button_SetCheck(hwndCtl, check) SNDMSG((hwndCtl), BM_SETCHECK, cast(WPARAM, clng((check))), cast(LPARAM, 0))
#define Button_GetState(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), BM_GETSTATE, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Button_SetState(hwndCtl, state) cast(UINT, cast(DWORD, SNDMSG((hwndCtl), BM_SETSTATE, cast(WPARAM, clng((state))), cast(LPARAM, 0))))
#define Button_SetStyle(hwndCtl, style, fRedraw) SNDMSG((hwndCtl), BM_SETSTYLE, cast(WPARAM, LOWORD(style)), MAKELPARAM(iif((fRedraw), TRUE, FALSE), 0))
#define Edit_Enable(hwndCtl, fEnable) EnableWindow((hwndCtl), (fEnable))
#define Edit_GetText(hwndCtl, lpch, cchMax) GetWindowText((hwndCtl), (lpch), (cchMax))
#define Edit_GetTextLength(hwndCtl) GetWindowTextLength(hwndCtl)
#define Edit_SetText(hwndCtl, lpsz) SetWindowText((hwndCtl), (lpsz))
#define Edit_LimitText(hwndCtl, cchMax) SNDMSG((hwndCtl), EM_LIMITTEXT, cast(WPARAM, (cchMax)), cast(LPARAM, 0))
#define Edit_GetLineCount(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), EM_GETLINECOUNT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_GetLine(hwndCtl, line, lpch, cchMax) '' TODO: ((*((int *)(lpch)) = (cchMax)),((int)(DWORD)SNDMSG((hwndCtl),EM_GETLINE,(WPARAM)(int)(line),(LPARAM)(LPTSTR)(lpch))))
#define Edit_GetRect(hwndCtl, lprc) SNDMSG((hwndCtl), EM_GETRECT, cast(LPARAM, 0), cast(LPARAM, cptr(RECT ptr, (lprc))))
#define Edit_SetRect(hwndCtl, lprc) SNDMSG((hwndCtl), EM_SETRECT, cast(LPARAM, 0), cast(LPARAM, cptr(const RECT ptr, (lprc))))
#define Edit_SetRectNoPaint(hwndCtl, lprc) SNDMSG((hwndCtl), EM_SETRECTNP, cast(LPARAM, 0), cast(LPARAM, cptr(const RECT ptr, (lprc))))
#define Edit_GetSel(hwndCtl) cast(DWORD, SNDMSG((hwndCtl), EM_GETSEL, cast(WPARAM, 0), cast(LPARAM, 0)))
#define Edit_SetSel(hwndCtl, ichStart, ichEnd) SNDMSG((hwndCtl), EM_SETSEL, (ichStart), (ichEnd))
#define Edit_ReplaceSel(hwndCtl, lpszReplace) SNDMSG((hwndCtl), EM_REPLACESEL, cast(LPARAM, 0), cast(LPARAM, cast(LPCTSTR, (lpszReplace))))
#define Edit_GetModify(hwndCtl) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), EM_GETMODIFY, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_SetModify(hwndCtl, fModified) SNDMSG((hwndCtl), EM_SETMODIFY, cast(WPARAM, cast(UINT, (fModified))), cast(LPARAM, 0))
#define Edit_ScrollCaret(hwndCtl) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), EM_SCROLLCARET, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_LineFromChar(hwndCtl, ich) clng(cast(DWORD, SNDMSG((hwndCtl), EM_LINEFROMCHAR, cast(WPARAM, clng((ich))), cast(LPARAM, 0))))
#define Edit_LineIndex(hwndCtl, line) clng(cast(DWORD, SNDMSG((hwndCtl), EM_LINEINDEX, cast(WPARAM, clng((line))), cast(LPARAM, 0))))
#define Edit_LineLength(hwndCtl, line) clng(cast(DWORD, SNDMSG((hwndCtl), EM_LINELENGTH, cast(WPARAM, clng((line))), cast(LPARAM, 0))))
#define Edit_Scroll(hwndCtl, dv, dh) SNDMSG((hwndCtl), EM_LINESCROLL, cast(WPARAM, (dh)), cast(LPARAM, (dv)))
#define Edit_CanUndo(hwndCtl) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), EM_CANUNDO, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_Undo(hwndCtl) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), EM_UNDO, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_EmptyUndoBuffer(hwndCtl) SNDMSG((hwndCtl), EM_EMPTYUNDOBUFFER, cast(WPARAM, 0), cast(LPARAM, 0))
#define Edit_SetPasswordChar(hwndCtl, ch) SNDMSG((hwndCtl), EM_SETPASSWORDCHAR, cast(WPARAM, cast(UINT, (ch))), cast(LPARAM, 0))
#define Edit_SetTabStops(hwndCtl, cTabs, lpTabs) SNDMSG((hwndCtl), EM_SETTABSTOPS, cast(WPARAM, clng((cTabs))), cast(LPARAM, cptr(const long ptr, (lpTabs))))
#define Edit_FmtLines(hwndCtl, fAddEOL) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), EM_FMTLINES, cast(WPARAM, cast(WINBOOL, (fAddEOL))), cast(LPARAM, 0))))
#define Edit_GetHandle(hwndCtl) cast(HLOCAL, cast(UINT_PTR, SNDMSG((hwndCtl), EM_GETHANDLE, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_SetHandle(hwndCtl, h) SNDMSG((hwndCtl), EM_SETHANDLE, cast(WPARAM, cast(UINT_PTR, cast(HLOCAL, (h)))), cast(LPARAM, 0))
#define Edit_GetFirstVisibleLine(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), EM_GETFIRSTVISIBLELINE, cast(WPARAM, 0), cast(LPARAM, 0))))
#define Edit_SetReadOnly(hwndCtl, fReadOnly) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), EM_SETREADONLY, cast(WPARAM, cast(WINBOOL, (fReadOnly))), cast(LPARAM, 0))))

#ifdef UNICODE
	#define Edit_GetPasswordChar(hwndCtl) cast(wchar_t, cast(DWORD, SNDMSG((hwndCtl), EM_GETPASSWORDCHAR, cast(WPARAM, 0), cast(LPARAM, 0))))
#else
	#define Edit_GetPasswordChar(hwndCtl) cbyte(cast(DWORD, SNDMSG((hwndCtl), EM_GETPASSWORDCHAR, cast(WPARAM, 0), cast(LPARAM, 0))))
#endif

#define Edit_SetWordBreakProc(hwndCtl, lpfnWordBreak) SNDMSG((hwndCtl), EM_SETWORDBREAKPROC, cast(LPARAM, 0), cast(LPARAM, cast(EDITWORDBREAKPROC, (lpfnWordBreak))))
#define Edit_GetWordBreakProc(hwndCtl) cast(EDITWORDBREAKPROC, SNDMSG((hwndCtl), EM_GETWORDBREAKPROC, cast(WPARAM, 0), cast(LPARAM, 0)))
#define ScrollBar_Enable(hwndCtl, flags) EnableScrollBar((hwndCtl), SB_CTL, (flags))
#define ScrollBar_Show(hwndCtl, fShow) ShowWindow((hwndCtl), iif((fShow), SW_SHOWNORMAL, SW_HIDE))
#define ScrollBar_SetPos(hwndCtl, pos, fRedraw) SetScrollPos((hwndCtl), SB_CTL, (pos), (fRedraw))
#define ScrollBar_GetPos(hwndCtl) GetScrollPos((hwndCtl), SB_CTL)
#define ScrollBar_SetRange(hwndCtl, posMin, posMax, fRedraw) SetScrollRange((hwndCtl), SB_CTL, (posMin), (posMax), (fRedraw))
#define ScrollBar_GetRange(hwndCtl, lpposMin, lpposMax) GetScrollRange((hwndCtl), SB_CTL, (lpposMin), (lpposMax))
#define ListBox_Enable(hwndCtl, fEnable) EnableWindow((hwndCtl), (fEnable))
#define ListBox_GetCount(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETCOUNT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_ResetContent(hwndCtl) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), LB_RESETCONTENT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_AddString(hwndCtl, lpsz) clng(cast(DWORD, SNDMSG((hwndCtl), LB_ADDSTRING, cast(LPARAM, 0), cast(LPARAM, cast(LPCTSTR, (lpsz))))))
#define ListBox_InsertString(hwndCtl, index, lpsz) clng(cast(DWORD, SNDMSG((hwndCtl), LB_INSERTSTRING, cast(WPARAM, clng((index))), cast(LPARAM, cast(LPCTSTR, (lpsz))))))
#define ListBox_AddItemData(hwndCtl, data) clng(cast(DWORD, SNDMSG((hwndCtl), LB_ADDSTRING, cast(LPARAM, 0), cast(LPARAM, (data)))))
#define ListBox_InsertItemData(hwndCtl, index, data) clng(cast(DWORD, SNDMSG((hwndCtl), LB_INSERTSTRING, cast(WPARAM, clng((index))), cast(LPARAM, (data)))))
#define ListBox_DeleteString(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_DELETESTRING, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_GetTextLen(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETTEXTLEN, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_GetText(hwndCtl, index, lpszBuffer) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETTEXT, cast(WPARAM, clng((index))), cast(LPARAM, cast(LPCTSTR, (lpszBuffer))))))
#define ListBox_GetItemData(hwndCtl, index) cast(LRESULT, cast(ULONG_PTR, SNDMSG((hwndCtl), LB_GETITEMDATA, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_SetItemData(hwndCtl, index, data) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SETITEMDATA, cast(WPARAM, clng((index))), cast(LPARAM, (data)))))
#define ListBox_FindString(hwndCtl, indexStart, lpszFind) clng(cast(DWORD, SNDMSG((hwndCtl), LB_FINDSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, cast(LPCTSTR, (lpszFind))))))
#define ListBox_FindItemData(hwndCtl, indexStart, data) clng(cast(DWORD, SNDMSG((hwndCtl), LB_FINDSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, (data)))))
#define ListBox_SetSel(hwndCtl, fSelect, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SETSEL, cast(WPARAM, cast(WINBOOL, (fSelect))), cast(LPARAM, (index)))))
#define ListBox_SelItemRange(hwndCtl, fSelect, first, last) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SELITEMRANGE, cast(WPARAM, cast(WINBOOL, (fSelect))), MAKELPARAM((first), (last)))))
#define ListBox_GetCurSel(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETCURSEL, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_SetCurSel(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SETCURSEL, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_SelectString(hwndCtl, indexStart, lpszFind) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SELECTSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, cast(LPCTSTR, (lpszFind))))))
#define ListBox_SelectItemData(hwndCtl, indexStart, data) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SELECTSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, (data)))))
#define ListBox_GetSel(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETSEL, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_GetSelCount(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETSELCOUNT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_GetTopIndex(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETTOPINDEX, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_GetSelItems(hwndCtl, cItems, lpItems) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETSELITEMS, cast(WPARAM, clng((cItems))), cast(LPARAM, cptr(long ptr, (lpItems))))))
#define ListBox_SetTopIndex(hwndCtl, indexTop) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SETTOPINDEX, cast(WPARAM, clng((indexTop))), cast(LPARAM, 0))))
#define ListBox_SetColumnWidth(hwndCtl, cxColumn) SNDMSG((hwndCtl), LB_SETCOLUMNWIDTH, cast(WPARAM, clng((cxColumn))), cast(LPARAM, 0))
#define ListBox_GetHorizontalExtent(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETHORIZONTALEXTENT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_SetHorizontalExtent(hwndCtl, cxExtent) SNDMSG((hwndCtl), LB_SETHORIZONTALEXTENT, cast(WPARAM, clng((cxExtent))), cast(LPARAM, 0))
#define ListBox_SetTabStops(hwndCtl, cTabs, lpTabs) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), LB_SETTABSTOPS, cast(WPARAM, clng((cTabs))), cast(LPARAM, cptr(long ptr, (lpTabs))))))
#define ListBox_GetItemRect(hwndCtl, index, lprc) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETITEMRECT, cast(WPARAM, clng((index))), cast(LPARAM, cptr(RECT ptr, (lprc))))))
#define ListBox_SetCaretIndex(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SETCARETINDEX, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_GetCaretIndex(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETCARETINDEX, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ListBox_FindStringExact(hwndCtl, indexStart, lpszFind) clng(cast(DWORD, SNDMSG((hwndCtl), LB_FINDSTRINGEXACT, cast(WPARAM, clng((indexStart))), cast(LPARAM, cast(LPCTSTR, (lpszFind))))))
#define ListBox_SetItemHeight(hwndCtl, index, cy) clng(cast(DWORD, SNDMSG((hwndCtl), LB_SETITEMHEIGHT, cast(WPARAM, clng((index))), MAKELPARAM((cy), 0))))
#define ListBox_GetItemHeight(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), LB_GETITEMHEIGHT, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ListBox_Dir(hwndCtl, attrs, lpszFileSpec) clng(cast(DWORD, SNDMSG((hwndCtl), LB_DIR, cast(WPARAM, cast(UINT, (attrs))), cast(LPARAM, cast(LPCTSTR, (lpszFileSpec))))))
#define ComboBox_Enable(hwndCtl, fEnable) EnableWindow((hwndCtl), (fEnable))
#define ComboBox_GetText(hwndCtl, lpch, cchMax) GetWindowText((hwndCtl), (lpch), (cchMax))
#define ComboBox_GetTextLength(hwndCtl) GetWindowTextLength(hwndCtl)
#define ComboBox_SetText(hwndCtl, lpsz) SetWindowText((hwndCtl), (lpsz))
#define ComboBox_LimitText(hwndCtl, cchLimit) clng(cast(DWORD, SNDMSG((hwndCtl), CB_LIMITTEXT, cast(WPARAM, clng((cchLimit))), cast(LPARAM, 0))))
#define ComboBox_GetEditSel(hwndCtl) cast(DWORD, SNDMSG((hwndCtl), CB_GETEDITSEL, cast(WPARAM, 0), cast(LPARAM, 0)))
#define ComboBox_SetEditSel(hwndCtl, ichStart, ichEnd) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SETEDITSEL, cast(LPARAM, 0), MAKELPARAM((ichStart), (ichEnd)))))
#define ComboBox_GetCount(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), CB_GETCOUNT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ComboBox_ResetContent(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), CB_RESETCONTENT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ComboBox_AddString(hwndCtl, lpsz) clng(cast(DWORD, SNDMSG((hwndCtl), CB_ADDSTRING, cast(LPARAM, 0), cast(LPARAM, cast(LPCTSTR, (lpsz))))))
#define ComboBox_InsertString(hwndCtl, index, lpsz) clng(cast(DWORD, SNDMSG((hwndCtl), CB_INSERTSTRING, cast(WPARAM, clng((index))), cast(LPARAM, cast(LPCTSTR, (lpsz))))))
#define ComboBox_AddItemData(hwndCtl, data) clng(cast(DWORD, SNDMSG((hwndCtl), CB_ADDSTRING, cast(LPARAM, 0), cast(LPARAM, (data)))))
#define ComboBox_InsertItemData(hwndCtl, index, data) clng(cast(DWORD, SNDMSG((hwndCtl), CB_INSERTSTRING, cast(WPARAM, clng((index))), cast(LPARAM, (data)))))
#define ComboBox_DeleteString(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), CB_DELETESTRING, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ComboBox_GetLBTextLen(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), CB_GETLBTEXTLEN, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ComboBox_GetLBText(hwndCtl, index, lpszBuffer) clng(cast(DWORD, SNDMSG((hwndCtl), CB_GETLBTEXT, cast(WPARAM, clng((index))), cast(LPARAM, cast(LPCTSTR, (lpszBuffer))))))
#define ComboBox_GetItemData(hwndCtl, index) cast(LRESULT, cast(ULONG_PTR, SNDMSG((hwndCtl), CB_GETITEMDATA, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ComboBox_SetItemData(hwndCtl, index, data) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SETITEMDATA, cast(WPARAM, clng((index))), cast(LPARAM, (data)))))
#define ComboBox_FindString(hwndCtl, indexStart, lpszFind) clng(cast(DWORD, SNDMSG((hwndCtl), CB_FINDSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, cast(LPCTSTR, (lpszFind))))))
#define ComboBox_FindItemData(hwndCtl, indexStart, data) clng(cast(DWORD, SNDMSG((hwndCtl), CB_FINDSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, (data)))))
#define ComboBox_GetCurSel(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), CB_GETCURSEL, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ComboBox_SetCurSel(hwndCtl, index) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SETCURSEL, cast(WPARAM, clng((index))), cast(LPARAM, 0))))
#define ComboBox_SelectString(hwndCtl, indexStart, lpszSelect) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SELECTSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, cast(LPCTSTR, (lpszSelect))))))
#define ComboBox_SelectItemData(hwndCtl, indexStart, data) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SELECTSTRING, cast(WPARAM, clng((indexStart))), cast(LPARAM, (data)))))
#define ComboBox_Dir(hwndCtl, attrs, lpszFileSpec) clng(cast(DWORD, SNDMSG((hwndCtl), CB_DIR, cast(WPARAM, cast(UINT, (attrs))), cast(LPARAM, cast(LPCTSTR, (lpszFileSpec))))))
#define ComboBox_ShowDropdown(hwndCtl, fShow) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), CB_SHOWDROPDOWN, cast(WPARAM, cast(WINBOOL, (fShow))), cast(LPARAM, 0))))
#define ComboBox_FindStringExact(hwndCtl, indexStart, lpszFind) clng(cast(DWORD, SNDMSG((hwndCtl), CB_FINDSTRINGEXACT, cast(WPARAM, clng((indexStart))), cast(LPARAM, cast(LPCTSTR, (lpszFind))))))
#define ComboBox_GetDroppedState(hwndCtl) cast(WINBOOL, cast(DWORD, SNDMSG((hwndCtl), CB_GETDROPPEDSTATE, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ComboBox_GetDroppedControlRect(hwndCtl, lprc) SNDMSG((hwndCtl), CB_GETDROPPEDCONTROLRECT, cast(LPARAM, 0), cast(LPARAM, cptr(RECT ptr, (lprc))))
#define ComboBox_GetItemHeight(hwndCtl) clng(cast(DWORD, SNDMSG((hwndCtl), CB_GETITEMHEIGHT, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ComboBox_SetItemHeight(hwndCtl, index, cyItem) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SETITEMHEIGHT, cast(WPARAM, clng((index))), cast(LPARAM, clng(cyItem)))))
#define ComboBox_GetExtendedUI(hwndCtl) cast(UINT, cast(DWORD, SNDMSG((hwndCtl), CB_GETEXTENDEDUI, cast(WPARAM, 0), cast(LPARAM, 0))))
#define ComboBox_SetExtendedUI(hwndCtl, flags) clng(cast(DWORD, SNDMSG((hwndCtl), CB_SETEXTENDEDUI, cast(WPARAM, cast(UINT, (flags))), cast(LPARAM, 0))))
#define GET_WPARAM(wp, lp) (wp)
#define GET_LPARAM(wp, lp) (lp)
#define GET_X_LPARAM(lp) clng(cshort(LOWORD(lp)))
#define GET_Y_LPARAM(lp) clng(cshort(HIWORD(lp)))
#define GET_WM_ACTIVATE_STATE(wp, lp) LOWORD(wp)
#define GET_WM_ACTIVATE_FMINIMIZED(wp, lp) cast(WINBOOL, HIWORD(wp))
#define GET_WM_ACTIVATE_HWND(wp, lp) cast(HWND, (lp))
#define GET_WM_ACTIVATE_MPS(s, fmin, hwnd) '' TODO: (WPARAM)MAKELONG((s),(fmin)),(LPARAM)(hwnd)

#ifdef UNICODE
	#define GET_WM_CHARTOITEM_CHAR(wp, lp) cast(wchar_t, LOWORD(wp))
#else
	#define GET_WM_CHARTOITEM_CHAR(wp, lp) cbyte(LOWORD(wp))
#endif

#define GET_WM_CHARTOITEM_POS(wp, lp) HIWORD(wp)
#define GET_WM_CHARTOITEM_HWND(wp, lp) cast(HWND, (lp))
#define GET_WM_CHARTOITEM_MPS(ch, pos, hwnd) '' TODO: (WPARAM)MAKELONG((pos),(ch)),(LPARAM)(hwnd)
#define GET_WM_COMMAND_ID(wp, lp) LOWORD(wp)
#define GET_WM_COMMAND_HWND(wp, lp) cast(HWND, (lp))
#define GET_WM_COMMAND_CMD(wp, lp) HIWORD(wp)
#define GET_WM_COMMAND_MPS(id, hwnd, cmd) '' TODO: (WPARAM)MAKELONG(id,cmd),(LPARAM)(hwnd)
const WM_CTLCOLOR = &h0019
#define GET_WM_CTLCOLOR_HDC(wp, lp, msg) cast(HDC, (wp))
#define GET_WM_CTLCOLOR_HWND(wp, lp, msg) cast(HWND, (lp))
#define GET_WM_CTLCOLOR_TYPE(wp, lp, msg) cast(WORD, msg - WM_CTLCOLORMSGBOX)
#define GET_WM_CTLCOLOR_MSG(type) cast(WORD, WM_CTLCOLORMSGBOX + (type))
#define GET_WM_CTLCOLOR_MPS(hdc, hwnd, type) '' TODO: (WPARAM)(hdc),(LPARAM)(hwnd)
#define GET_WM_MENUSELECT_CMD(wp, lp) LOWORD(wp)
#define GET_WM_MENUSELECT_FLAGS(wp, lp) cast(UINT, clng(cshort(HIWORD(wp))))
#define GET_WM_MENUSELECT_HMENU(wp, lp) cast(HMENU, (lp))
#define GET_WM_MENUSELECT_MPS(cmd, f, hmenu) '' TODO: (WPARAM)MAKELONG(cmd,f),(LPARAM)(hmenu)
#define GET_WM_MDIACTIVATE_FACTIVATE(hwnd, wp, lp) (lp = cast(LPARAM, hwnd))
#define GET_WM_MDIACTIVATE_HWNDDEACT(wp, lp) cast(HWND, (wp))
#define GET_WM_MDIACTIVATE_HWNDACTIVATE(wp, lp) cast(HWND, (lp))
#define GET_WM_MDIACTIVATE_MPS(f, hwndD, hwndA) '' TODO: (WPARAM)(hwndA),0
#define GET_WM_MDISETMENU_MPS(hmenuF, hmenuW) '' TODO: (WPARAM)hmenuF,(LPARAM)hmenuW

#ifdef UNICODE
	#define GET_WM_MENUCHAR_CHAR(wp, lp) cast(wchar_t, LOWORD(wp))
#else
	#define GET_WM_MENUCHAR_CHAR(wp, lp) cbyte(LOWORD(wp))
#endif

#define GET_WM_MENUCHAR_HMENU(wp, lp) cast(HMENU, (lp))
#define GET_WM_MENUCHAR_FMENU(wp, lp) cast(WINBOOL, HIWORD(wp))
#define GET_WM_MENUCHAR_MPS(ch, hmenu, f) '' TODO: (WPARAM)MAKELONG(ch,f),(LPARAM)(hmenu)
#define GET_WM_PARENTNOTIFY_MSG(wp, lp) LOWORD(wp)
#define GET_WM_PARENTNOTIFY_ID(wp, lp) HIWORD(wp)
#define GET_WM_PARENTNOTIFY_HWNDCHILD(wp, lp) cast(HWND, (lp))
#define GET_WM_PARENTNOTIFY_X(wp, lp) clng(cshort(LOWORD(lp)))
#define GET_WM_PARENTNOTIFY_Y(wp, lp) clng(cshort(HIWORD(lp)))
#define GET_WM_PARENTNOTIFY_MPS(msg, id, hwnd) '' TODO: (WPARAM)MAKELONG(id,msg),(LPARAM)(hwnd)
#define GET_WM_PARENTNOTIFY2_MPS(msg, x, y) '' TODO: (WPARAM)MAKELONG(0,msg),MAKELONG(x,y)
#define GET_WM_VKEYTOITEM_CODE(wp, lp) clng(cshort(LOWORD(wp)))
#define GET_WM_VKEYTOITEM_ITEM(wp, lp) HIWORD(wp)
#define GET_WM_VKEYTOITEM_HWND(wp, lp) cast(HWND, (lp))
#define GET_WM_VKEYTOITEM_MPS(code, item, hwnd) '' TODO: (WPARAM)MAKELONG(item,code),(LPARAM)(hwnd)
#define GET_EM_SETSEL_START(wp, lp) cast(INT_, (wp))
#define GET_EM_SETSEL_END(wp, lp) (lp)
#define GET_EM_SETSEL_MPS(iStart, iEnd) '' TODO: (WPARAM)(iStart),(LPARAM)(iEnd)
#define GET_EM_LINESCROLL_MPS(vert, horz) '' TODO: (WPARAM)horz,(LPARAM)vert
#define GET_WM_CHANGECBCHAIN_HWNDNEXT(wp, lp) cast(HWND, (lp))
#define GET_WM_HSCROLL_CODE(wp, lp) LOWORD(wp)
#define GET_WM_HSCROLL_POS(wp, lp) HIWORD(wp)
#define GET_WM_HSCROLL_HWND(wp, lp) cast(HWND, (lp))
#define GET_WM_HSCROLL_MPS(code, pos, hwnd) '' TODO: (WPARAM)MAKELONG(code,pos),(LPARAM)(hwnd)
#define GET_WM_VSCROLL_CODE(wp, lp) LOWORD(wp)
#define GET_WM_VSCROLL_POS(wp, lp) HIWORD(wp)
#define GET_WM_VSCROLL_HWND(wp, lp) cast(HWND, (lp))
#define GET_WM_VSCROLL_MPS(code, pos, hwnd) '' TODO: (WPARAM)MAKELONG(code,pos),(LPARAM)(hwnd)
#define _ncalloc calloc
#define _nexpand _expand
#define _ffree free
#define _fmalloc malloc
#define _fmemccpy _memccpy
#define _fmemchr memchr
#define _fmemcmp memcmp
#define _fmemcpy memcpy
#define _fmemicmp _memicmp
#define _fmemmove memmove
#define _fmemset memset
#define _fmsize _msize
#define _frealloc realloc
#define _fstrcat strcat
#define _fstrchr strchr
#define _fstrcmp strcmp
#define _fstrcpy strcpy
#define _fstrcspn strcspn
#define _fstrdup _strdup
#define _fstricmp _stricmp
#define _fstrlen strlen
#define _fstrlwr _strlwr
#define _fstrncat strncat
#define _fstrncmp strncmp
#define _fstrncpy strncpy
#define _fstrnicmp _strnicmp
#define _fstrnset _strnset
#define _fstrpbrk strpbrk
#define _fstrrchr strrchr
#define _fstrrev _strrev
#define _fstrset _strset
#define _fstrspn strspn
#define _fstrstr strstr
#define _fstrtok strtok
#define _fstrupr _strupr
#define _nfree free
#define _nmalloc malloc
#define _nmsize _msize
#define _nrealloc realloc
#define _nstrdup _strdup
#define hmemcpy MoveMemory
#define DECLARE_HANDLE32 DECLARE_HANDLE
