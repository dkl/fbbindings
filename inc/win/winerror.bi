'' FreeBASIC binding for mingw-w64-v4.0.4
''
'' based on the C header files:
''   DISCLAIMER
''   This file has no copyright assigned and is placed in the Public Domain.
''   This file is part of the mingw-w64 runtime package.
''
''   The mingw-w64 runtime package and its code is distributed in the hope that it 
''   will be useful but WITHOUT ANY WARRANTY.  ALL WARRANTIES, EXPRESSED OR 
''   IMPLIED ARE HEREBY DISCLAIMED.  This includes but is not limited to 
''   warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
''
'' translated to FreeBASIC by:
''   Copyright Â© 2015 FreeBASIC development team

#pragma once

#include once "crt/long.bi"

#define _WINERROR_
const __IN__WINERROR_ = 1
const FACILITY_WINDOWSUPDATE = 36
const FACILITY_WINDOWS_CE = 24
const FACILITY_WINDOWS = 8
const FACILITY_URT = 19
const FACILITY_UMI = 22
const FACILITY_SXS = 23
const FACILITY_STORAGE = 3
const FACILITY_STATE_MANAGEMENT = 34
const FACILITY_SSPI = 9
const FACILITY_SCARD = 16
const FACILITY_SETUPAPI = 15
const FACILITY_SECURITY = 9
const FACILITY_RPC = 1
const FACILITY_WIN32 = 7
const FACILITY_CONTROL = 10
const FACILITY_NULL = 0
const FACILITY_METADIRECTORY = 35
const FACILITY_MSMQ = 14
const FACILITY_MEDIASERVER = 13
const FACILITY_INTERNET = 12
const FACILITY_ITF = 4
const FACILITY_HTTP = 25
const FACILITY_DPLAY = 21
const FACILITY_DISPATCH = 2
const FACILITY_DIRECTORYSERVICE = 37
const FACILITY_CONFIGURATION = 33
const FACILITY_COMPLUS = 17
const FACILITY_CERT = 11
const FACILITY_BACKGROUNDCOPY = 32
const FACILITY_ACS = 20
const FACILITY_AAF = 18
const FACILITY_AUDCLNT = 2185
const ERROR_SUCCESS = cast(clong, 0)
const NO_ERROR = cast(clong, 0)
const SEC_E_OK = cast(HRESULT, &h00000000)
const ERROR_INVALID_FUNCTION = cast(clong, 1)
const ERROR_FILE_NOT_FOUND = cast(clong, 2)
const ERROR_PATH_NOT_FOUND = cast(clong, 3)
const ERROR_TOO_MANY_OPEN_FILES = cast(clong, 4)
const ERROR_ACCESS_DENIED = cast(clong, 5)
const ERROR_INVALID_HANDLE = cast(clong, 6)
const ERROR_ARENA_TRASHED = cast(clong, 7)
const ERROR_NOT_ENOUGH_MEMORY = cast(clong, 8)
const ERROR_INVALID_BLOCK = cast(clong, 9)
const ERROR_BAD_ENVIRONMENT = cast(clong, 10)
const ERROR_BAD_FORMAT = cast(clong, 11)
const ERROR_INVALID_ACCESS = cast(clong, 12)
const ERROR_INVALID_DATA = cast(clong, 13)
const ERROR_OUTOFMEMORY = cast(clong, 14)
const ERROR_INVALID_DRIVE = cast(clong, 15)
const ERROR_CURRENT_DIRECTORY = cast(clong, 16)
const ERROR_NOT_SAME_DEVICE = cast(clong, 17)
const ERROR_NO_MORE_FILES = cast(clong, 18)
const ERROR_WRITE_PROTECT = cast(clong, 19)
const ERROR_BAD_UNIT = cast(clong, 20)
const ERROR_NOT_READY = cast(clong, 21)
const ERROR_BAD_COMMAND = cast(clong, 22)
const ERROR_CRC = cast(clong, 23)
const ERROR_BAD_LENGTH = cast(clong, 24)
const ERROR_SEEK = cast(clong, 25)
const ERROR_NOT_DOS_DISK = cast(clong, 26)
const ERROR_SECTOR_NOT_FOUND = cast(clong, 27)
const ERROR_OUT_OF_PAPER = cast(clong, 28)
const ERROR_WRITE_FAULT = cast(clong, 29)
const ERROR_READ_FAULT = cast(clong, 30)
const ERROR_GEN_FAILURE = cast(clong, 31)
const ERROR_SHARING_VIOLATION = cast(clong, 32)
const ERROR_LOCK_VIOLATION = cast(clong, 33)
const ERROR_WRONG_DISK = cast(clong, 34)
const ERROR_SHARING_BUFFER_EXCEEDED = cast(clong, 36)
const ERROR_HANDLE_EOF = cast(clong, 38)
const ERROR_HANDLE_DISK_FULL = cast(clong, 39)
const ERROR_NOT_SUPPORTED = cast(clong, 50)
const ERROR_REM_NOT_LIST = cast(clong, 51)
const ERROR_DUP_NAME = cast(clong, 52)
const ERROR_BAD_NETPATH = cast(clong, 53)
const ERROR_NETWORK_BUSY = cast(clong, 54)
const ERROR_DEV_NOT_EXIST = cast(clong, 55)
const ERROR_TOO_MANY_CMDS = cast(clong, 56)
const ERROR_ADAP_HDW_ERR = cast(clong, 57)
const ERROR_BAD_NET_RESP = cast(clong, 58)
const ERROR_UNEXP_NET_ERR = cast(clong, 59)
const ERROR_BAD_REM_ADAP = cast(clong, 60)
const ERROR_PRINTQ_FULL = cast(clong, 61)
const ERROR_NO_SPOOL_SPACE = cast(clong, 62)
const ERROR_PRINT_CANCELLED = cast(clong, 63)
const ERROR_NETNAME_DELETED = cast(clong, 64)
const ERROR_NETWORK_ACCESS_DENIED = cast(clong, 65)
const ERROR_BAD_DEV_TYPE = cast(clong, 66)
const ERROR_BAD_NET_NAME = cast(clong, 67)
const ERROR_TOO_MANY_NAMES = cast(clong, 68)
const ERROR_TOO_MANY_SESS = cast(clong, 69)
const ERROR_SHARING_PAUSED = cast(clong, 70)
const ERROR_REQ_NOT_ACCEP = cast(clong, 71)
const ERROR_REDIR_PAUSED = cast(clong, 72)
const ERROR_FILE_EXISTS = cast(clong, 80)
const ERROR_CANNOT_MAKE = cast(clong, 82)
const ERROR_FAIL_I24 = cast(clong, 83)
const ERROR_OUT_OF_STRUCTURES = cast(clong, 84)
const ERROR_ALREADY_ASSIGNED = cast(clong, 85)
const ERROR_INVALID_PASSWORD = cast(clong, 86)
const ERROR_INVALID_PARAMETER = cast(clong, 87)
const ERROR_NET_WRITE_FAULT = cast(clong, 88)
const ERROR_NO_PROC_SLOTS = cast(clong, 89)
const ERROR_TOO_MANY_SEMAPHORES = cast(clong, 100)
const ERROR_EXCL_SEM_ALREADY_OWNED = cast(clong, 101)
const ERROR_SEM_IS_SET = cast(clong, 102)
const ERROR_TOO_MANY_SEM_REQUESTS = cast(clong, 103)
const ERROR_INVALID_AT_INTERRUPT_TIME = cast(clong, 104)
const ERROR_SEM_OWNER_DIED = cast(clong, 105)
const ERROR_SEM_USER_LIMIT = cast(clong, 106)
const ERROR_DISK_CHANGE = cast(clong, 107)
const ERROR_DRIVE_LOCKED = cast(clong, 108)
const ERROR_BROKEN_PIPE = cast(clong, 109)
const ERROR_OPEN_FAILED = cast(clong, 110)
const ERROR_BUFFER_OVERFLOW = cast(clong, 111)
const ERROR_DISK_FULL = cast(clong, 112)
const ERROR_NO_MORE_SEARCH_HANDLES = cast(clong, 113)
const ERROR_INVALID_TARGET_HANDLE = cast(clong, 114)
const ERROR_INVALID_CATEGORY = cast(clong, 117)
const ERROR_INVALID_VERIFY_SWITCH = cast(clong, 118)
const ERROR_BAD_DRIVER_LEVEL = cast(clong, 119)
const ERROR_CALL_NOT_IMPLEMENTED = cast(clong, 120)
const ERROR_SEM_TIMEOUT = cast(clong, 121)
const ERROR_INSUFFICIENT_BUFFER = cast(clong, 122)
const ERROR_INVALID_NAME = cast(clong, 123)
const ERROR_INVALID_LEVEL = cast(clong, 124)
const ERROR_NO_VOLUME_LABEL = cast(clong, 125)
const ERROR_MOD_NOT_FOUND = cast(clong, 126)
const ERROR_PROC_NOT_FOUND = cast(clong, 127)
const ERROR_WAIT_NO_CHILDREN = cast(clong, 128)
const ERROR_CHILD_NOT_COMPLETE = cast(clong, 129)
const ERROR_DIRECT_ACCESS_HANDLE = cast(clong, 130)
const ERROR_NEGATIVE_SEEK = cast(clong, 131)
const ERROR_SEEK_ON_DEVICE = cast(clong, 132)
const ERROR_IS_JOIN_TARGET = cast(clong, 133)
const ERROR_IS_JOINED = cast(clong, 134)
const ERROR_IS_SUBSTED = cast(clong, 135)
const ERROR_NOT_JOINED = cast(clong, 136)
const ERROR_NOT_SUBSTED = cast(clong, 137)
const ERROR_JOIN_TO_JOIN = cast(clong, 138)
const ERROR_SUBST_TO_SUBST = cast(clong, 139)
const ERROR_JOIN_TO_SUBST = cast(clong, 140)
const ERROR_SUBST_TO_JOIN = cast(clong, 141)
const ERROR_BUSY_DRIVE = cast(clong, 142)
const ERROR_SAME_DRIVE = cast(clong, 143)
const ERROR_DIR_NOT_ROOT = cast(clong, 144)
const ERROR_DIR_NOT_EMPTY = cast(clong, 145)
const ERROR_IS_SUBST_PATH = cast(clong, 146)
const ERROR_IS_JOIN_PATH = cast(clong, 147)
const ERROR_PATH_BUSY = cast(clong, 148)
const ERROR_IS_SUBST_TARGET = cast(clong, 149)
const ERROR_SYSTEM_TRACE = cast(clong, 150)
const ERROR_INVALID_EVENT_COUNT = cast(clong, 151)
const ERROR_TOO_MANY_MUXWAITERS = cast(clong, 152)
const ERROR_INVALID_LIST_FORMAT = cast(clong, 153)
const ERROR_LABEL_TOO_LONG = cast(clong, 154)
const ERROR_TOO_MANY_TCBS = cast(clong, 155)
const ERROR_SIGNAL_REFUSED = cast(clong, 156)
const ERROR_DISCARDED = cast(clong, 157)
const ERROR_NOT_LOCKED = cast(clong, 158)
const ERROR_BAD_THREADID_ADDR = cast(clong, 159)
const ERROR_BAD_ARGUMENTS = cast(clong, 160)
const ERROR_BAD_PATHNAME = cast(clong, 161)
const ERROR_SIGNAL_PENDING = cast(clong, 162)
const ERROR_MAX_THRDS_REACHED = cast(clong, 164)
const ERROR_LOCK_FAILED = cast(clong, 167)
const ERROR_BUSY = cast(clong, 170)
const ERROR_CANCEL_VIOLATION = cast(clong, 173)
const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = cast(clong, 174)
const ERROR_INVALID_SEGMENT_NUMBER = cast(clong, 180)
const ERROR_INVALID_ORDINAL = cast(clong, 182)
const ERROR_ALREADY_EXISTS = cast(clong, 183)
const ERROR_INVALID_FLAG_NUMBER = cast(clong, 186)
const ERROR_SEM_NOT_FOUND = cast(clong, 187)
const ERROR_INVALID_STARTING_CODESEG = cast(clong, 188)
const ERROR_INVALID_STACKSEG = cast(clong, 189)
const ERROR_INVALID_MODULETYPE = cast(clong, 190)
const ERROR_INVALID_EXE_SIGNATURE = cast(clong, 191)
const ERROR_EXE_MARKED_INVALID = cast(clong, 192)
const ERROR_BAD_EXE_FORMAT = cast(clong, 193)
const ERROR_ITERATED_DATA_EXCEEDS_64k = cast(clong, 194)
const ERROR_INVALID_MINALLOCSIZE = cast(clong, 195)
const ERROR_DYNLINK_FROM_INVALID_RING = cast(clong, 196)
const ERROR_IOPL_NOT_ENABLED = cast(clong, 197)
const ERROR_INVALID_SEGDPL = cast(clong, 198)
const ERROR_AUTODATASEG_EXCEEDS_64k = cast(clong, 199)
const ERROR_RING2SEG_MUST_BE_MOVABLE = cast(clong, 200)
const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = cast(clong, 201)
const ERROR_INFLOOP_IN_RELOC_CHAIN = cast(clong, 202)
const ERROR_ENVVAR_NOT_FOUND = cast(clong, 203)
const ERROR_NO_SIGNAL_SENT = cast(clong, 205)
const ERROR_FILENAME_EXCED_RANGE = cast(clong, 206)
const ERROR_RING2_STACK_IN_USE = cast(clong, 207)
const ERROR_META_EXPANSION_TOO_LONG = cast(clong, 208)
const ERROR_INVALID_SIGNAL_NUMBER = cast(clong, 209)
const ERROR_THREAD_1_INACTIVE = cast(clong, 210)
const ERROR_LOCKED = cast(clong, 212)
const ERROR_TOO_MANY_MODULES = cast(clong, 214)
const ERROR_NESTING_NOT_ALLOWED = cast(clong, 215)
const ERROR_EXE_MACHINE_TYPE_MISMATCH = cast(clong, 216)
const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = cast(clong, 217)
const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = cast(clong, 218)
const ERROR_FILE_CHECKED_OUT = cast(clong, 220)
const ERROR_CHECKOUT_REQUIRED = cast(clong, 221)
const ERROR_BAD_FILE_TYPE = cast(clong, 222)
const ERROR_FILE_TOO_LARGE = cast(clong, 223)
const ERROR_FORMS_AUTH_REQUIRED = cast(clong, 224)
const ERROR_PIPE_LOCAL = cast(clong, 229)
const ERROR_BAD_PIPE = cast(clong, 230)
const ERROR_PIPE_BUSY = cast(clong, 231)
const ERROR_NO_DATA = cast(clong, 232)
const ERROR_PIPE_NOT_CONNECTED = cast(clong, 233)
const ERROR_MORE_DATA = cast(clong, 234)
const ERROR_VC_DISCONNECTED = cast(clong, 240)
const ERROR_INVALID_EA_NAME = cast(clong, 254)
const ERROR_EA_LIST_INCONSISTENT = cast(clong, 255)
const WAIT_TIMEOUT = cast(clong, 258)
const ERROR_NO_MORE_ITEMS = cast(clong, 259)
const ERROR_CANNOT_COPY = cast(clong, 266)
const ERROR_DIRECTORY = cast(clong, 267)
const ERROR_EAS_DIDNT_FIT = cast(clong, 275)
const ERROR_EA_FILE_CORRUPT = cast(clong, 276)
const ERROR_EA_TABLE_FULL = cast(clong, 277)
const ERROR_INVALID_EA_HANDLE = cast(clong, 278)
const ERROR_EAS_NOT_SUPPORTED = cast(clong, 282)
const ERROR_NOT_OWNER = cast(clong, 288)
const ERROR_TOO_MANY_POSTS = cast(clong, 298)
const ERROR_PARTIAL_COPY = cast(clong, 299)
const ERROR_OPLOCK_NOT_GRANTED = cast(clong, 300)
const ERROR_INVALID_OPLOCK_PROTOCOL = cast(clong, 301)
const ERROR_DISK_TOO_FRAGMENTED = cast(clong, 302)
const ERROR_DELETE_PENDING = cast(clong, 303)
const ERROR_MR_MID_NOT_FOUND = cast(clong, 317)
const ERROR_SCOPE_NOT_FOUND = cast(clong, 318)
const ERROR_INVALID_ADDRESS = cast(clong, 487)
const ERROR_ARITHMETIC_OVERFLOW = cast(clong, 534)
const ERROR_PIPE_CONNECTED = cast(clong, 535)
const ERROR_PIPE_LISTENING = cast(clong, 536)
const ERROR_WAKE_SYSTEM = cast(clong, 730)
const ERROR_WAIT_1 = cast(clong, 731)
const ERROR_WAIT_2 = cast(clong, 732)
const ERROR_WAIT_3 = cast(clong, 733)
const ERROR_WAIT_63 = cast(clong, 734)
const ERROR_ABANDONED_WAIT_0 = cast(clong, 735)
const ERROR_ABANDONED_WAIT_63 = cast(clong, 736)
const ERROR_USER_APC = cast(clong, 737)
const ERROR_KERNEL_APC = cast(clong, 738)
const ERROR_ALERTED = cast(clong, 739)
const ERROR_EA_ACCESS_DENIED = cast(clong, 994)
const ERROR_OPERATION_ABORTED = cast(clong, 995)
const ERROR_IO_INCOMPLETE = cast(clong, 996)
const ERROR_IO_PENDING = cast(clong, 997)
const ERROR_NOACCESS = cast(clong, 998)
const ERROR_SWAPERROR = cast(clong, 999)
const ERROR_STACK_OVERFLOW = cast(clong, 1001)
const ERROR_INVALID_MESSAGE = cast(clong, 1002)
const ERROR_CAN_NOT_COMPLETE = cast(clong, 1003)
const ERROR_INVALID_FLAGS = cast(clong, 1004)
const ERROR_UNRECOGNIZED_VOLUME = cast(clong, 1005)
const ERROR_FILE_INVALID = cast(clong, 1006)
const ERROR_FULLSCREEN_MODE = cast(clong, 1007)
const ERROR_NO_TOKEN = cast(clong, 1008)
const ERROR_BADDB = cast(clong, 1009)
const ERROR_BADKEY = cast(clong, 1010)
const ERROR_CANTOPEN = cast(clong, 1011)
const ERROR_CANTREAD = cast(clong, 1012)
const ERROR_CANTWRITE = cast(clong, 1013)
const ERROR_REGISTRY_RECOVERED = cast(clong, 1014)
const ERROR_REGISTRY_CORRUPT = cast(clong, 1015)
const ERROR_REGISTRY_IO_FAILED = cast(clong, 1016)
const ERROR_NOT_REGISTRY_FILE = cast(clong, 1017)
const ERROR_KEY_DELETED = cast(clong, 1018)
const ERROR_NO_LOG_SPACE = cast(clong, 1019)
const ERROR_KEY_HAS_CHILDREN = cast(clong, 1020)
const ERROR_CHILD_MUST_BE_VOLATILE = cast(clong, 1021)
const ERROR_NOTIFY_ENUM_DIR = cast(clong, 1022)
const ERROR_DEPENDENT_SERVICES_RUNNING = cast(clong, 1051)
const ERROR_INVALID_SERVICE_CONTROL = cast(clong, 1052)
const ERROR_SERVICE_REQUEST_TIMEOUT = cast(clong, 1053)
const ERROR_SERVICE_NO_THREAD = cast(clong, 1054)
const ERROR_SERVICE_DATABASE_LOCKED = cast(clong, 1055)
const ERROR_SERVICE_ALREADY_RUNNING = cast(clong, 1056)
const ERROR_INVALID_SERVICE_ACCOUNT = cast(clong, 1057)
const ERROR_SERVICE_DISABLED = cast(clong, 1058)
const ERROR_CIRCULAR_DEPENDENCY = cast(clong, 1059)
const ERROR_SERVICE_DOES_NOT_EXIST = cast(clong, 1060)
const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = cast(clong, 1061)
const ERROR_SERVICE_NOT_ACTIVE = cast(clong, 1062)
const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = cast(clong, 1063)
const ERROR_EXCEPTION_IN_SERVICE = cast(clong, 1064)
const ERROR_DATABASE_DOES_NOT_EXIST = cast(clong, 1065)
const ERROR_SERVICE_SPECIFIC_ERROR = cast(clong, 1066)
const ERROR_PROCESS_ABORTED = cast(clong, 1067)
const ERROR_SERVICE_DEPENDENCY_FAIL = cast(clong, 1068)
const ERROR_SERVICE_LOGON_FAILED = cast(clong, 1069)
const ERROR_SERVICE_START_HANG = cast(clong, 1070)
const ERROR_INVALID_SERVICE_LOCK = cast(clong, 1071)
const ERROR_SERVICE_MARKED_FOR_DELETE = cast(clong, 1072)
const ERROR_SERVICE_EXISTS = cast(clong, 1073)
const ERROR_ALREADY_RUNNING_LKG = cast(clong, 1074)
const ERROR_SERVICE_DEPENDENCY_DELETED = cast(clong, 1075)
const ERROR_BOOT_ALREADY_ACCEPTED = cast(clong, 1076)
const ERROR_SERVICE_NEVER_STARTED = cast(clong, 1077)
const ERROR_DUPLICATE_SERVICE_NAME = cast(clong, 1078)
const ERROR_DIFFERENT_SERVICE_ACCOUNT = cast(clong, 1079)
const ERROR_CANNOT_DETECT_DRIVER_FAILURE = cast(clong, 1080)
const ERROR_CANNOT_DETECT_PROCESS_ABORT = cast(clong, 1081)
const ERROR_NO_RECOVERY_PROGRAM = cast(clong, 1082)
const ERROR_SERVICE_NOT_IN_EXE = cast(clong, 1083)
const ERROR_NOT_SAFEBOOT_SERVICE = cast(clong, 1084)
const ERROR_END_OF_MEDIA = cast(clong, 1100)
const ERROR_FILEMARK_DETECTED = cast(clong, 1101)
const ERROR_BEGINNING_OF_MEDIA = cast(clong, 1102)
const ERROR_SETMARK_DETECTED = cast(clong, 1103)
const ERROR_NO_DATA_DETECTED = cast(clong, 1104)
const ERROR_PARTITION_FAILURE = cast(clong, 1105)
const ERROR_INVALID_BLOCK_LENGTH = cast(clong, 1106)
const ERROR_DEVICE_NOT_PARTITIONED = cast(clong, 1107)
const ERROR_UNABLE_TO_LOCK_MEDIA = cast(clong, 1108)
const ERROR_UNABLE_TO_UNLOAD_MEDIA = cast(clong, 1109)
const ERROR_MEDIA_CHANGED = cast(clong, 1110)
const ERROR_BUS_RESET = cast(clong, 1111)
const ERROR_NO_MEDIA_IN_DRIVE = cast(clong, 1112)
const ERROR_NO_UNICODE_TRANSLATION = cast(clong, 1113)
const ERROR_DLL_INIT_FAILED = cast(clong, 1114)
const ERROR_SHUTDOWN_IN_PROGRESS = cast(clong, 1115)
const ERROR_NO_SHUTDOWN_IN_PROGRESS = cast(clong, 1116)
const ERROR_IO_DEVICE = cast(clong, 1117)
const ERROR_SERIAL_NO_DEVICE = cast(clong, 1118)
const ERROR_IRQ_BUSY = cast(clong, 1119)
const ERROR_MORE_WRITES = cast(clong, 1120)
const ERROR_COUNTER_TIMEOUT = cast(clong, 1121)
const ERROR_FLOPPY_ID_MARK_NOT_FOUND = cast(clong, 1122)
const ERROR_FLOPPY_WRONG_CYLINDER = cast(clong, 1123)
const ERROR_FLOPPY_UNKNOWN_ERROR = cast(clong, 1124)
const ERROR_FLOPPY_BAD_REGISTERS = cast(clong, 1125)
const ERROR_DISK_RECALIBRATE_FAILED = cast(clong, 1126)
const ERROR_DISK_OPERATION_FAILED = cast(clong, 1127)
const ERROR_DISK_RESET_FAILED = cast(clong, 1128)
const ERROR_EOM_OVERFLOW = cast(clong, 1129)
const ERROR_NOT_ENOUGH_SERVER_MEMORY = cast(clong, 1130)
const ERROR_POSSIBLE_DEADLOCK = cast(clong, 1131)
const ERROR_MAPPED_ALIGNMENT = cast(clong, 1132)
const ERROR_SET_POWER_STATE_VETOED = cast(clong, 1140)
const ERROR_SET_POWER_STATE_FAILED = cast(clong, 1141)
const ERROR_TOO_MANY_LINKS = cast(clong, 1142)
const ERROR_OLD_WIN_VERSION = cast(clong, 1150)
const ERROR_APP_WRONG_OS = cast(clong, 1151)
const ERROR_SINGLE_INSTANCE_APP = cast(clong, 1152)
const ERROR_RMODE_APP = cast(clong, 1153)
const ERROR_INVALID_DLL = cast(clong, 1154)
const ERROR_NO_ASSOCIATION = cast(clong, 1155)
const ERROR_DDE_FAIL = cast(clong, 1156)
const ERROR_DLL_NOT_FOUND = cast(clong, 1157)
const ERROR_NO_MORE_USER_HANDLES = cast(clong, 1158)
const ERROR_MESSAGE_SYNC_ONLY = cast(clong, 1159)
const ERROR_SOURCE_ELEMENT_EMPTY = cast(clong, 1160)
const ERROR_DESTINATION_ELEMENT_FULL = cast(clong, 1161)
const ERROR_ILLEGAL_ELEMENT_ADDRESS = cast(clong, 1162)
const ERROR_MAGAZINE_NOT_PRESENT = cast(clong, 1163)
const ERROR_DEVICE_REINITIALIZATION_NEEDED = cast(clong, 1164)
const ERROR_DEVICE_REQUIRES_CLEANING = cast(clong, 1165)
const ERROR_DEVICE_DOOR_OPEN = cast(clong, 1166)
const ERROR_DEVICE_NOT_CONNECTED = cast(clong, 1167)
const ERROR_NOT_FOUND = cast(clong, 1168)
const ERROR_NO_MATCH = cast(clong, 1169)
const ERROR_SET_NOT_FOUND = cast(clong, 1170)
const ERROR_POINT_NOT_FOUND = cast(clong, 1171)
const ERROR_NO_TRACKING_SERVICE = cast(clong, 1172)
const ERROR_NO_VOLUME_ID = cast(clong, 1173)
const ERROR_UNABLE_TO_REMOVE_REPLACED = cast(clong, 1175)
const ERROR_UNABLE_TO_MOVE_REPLACEMENT = cast(clong, 1176)
const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = cast(clong, 1177)
const ERROR_JOURNAL_DELETE_IN_PROGRESS = cast(clong, 1178)
const ERROR_JOURNAL_NOT_ACTIVE = cast(clong, 1179)
const ERROR_POTENTIAL_FILE_FOUND = cast(clong, 1180)
const ERROR_JOURNAL_ENTRY_DELETED = cast(clong, 1181)
const ERROR_BAD_DEVICE = cast(clong, 1200)
const ERROR_CONNECTION_UNAVAIL = cast(clong, 1201)
const ERROR_DEVICE_ALREADY_REMEMBERED = cast(clong, 1202)
const ERROR_NO_NET_OR_BAD_PATH = cast(clong, 1203)
const ERROR_BAD_PROVIDER = cast(clong, 1204)
const ERROR_CANNOT_OPEN_PROFILE = cast(clong, 1205)
const ERROR_BAD_PROFILE = cast(clong, 1206)
const ERROR_NOT_CONTAINER = cast(clong, 1207)
const ERROR_EXTENDED_ERROR = cast(clong, 1208)
const ERROR_INVALID_GROUPNAME = cast(clong, 1209)
const ERROR_INVALID_COMPUTERNAME = cast(clong, 1210)
const ERROR_INVALID_EVENTNAME = cast(clong, 1211)
const ERROR_INVALID_DOMAINNAME = cast(clong, 1212)
const ERROR_INVALID_SERVICENAME = cast(clong, 1213)
const ERROR_INVALID_NETNAME = cast(clong, 1214)
const ERROR_INVALID_SHARENAME = cast(clong, 1215)
const ERROR_INVALID_PASSWORDNAME = cast(clong, 1216)
const ERROR_INVALID_MESSAGENAME = cast(clong, 1217)
const ERROR_INVALID_MESSAGEDEST = cast(clong, 1218)
const ERROR_SESSION_CREDENTIAL_CONFLICT = cast(clong, 1219)
const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = cast(clong, 1220)
const ERROR_DUP_DOMAINNAME = cast(clong, 1221)
const ERROR_NO_NETWORK = cast(clong, 1222)
const ERROR_CANCELLED = cast(clong, 1223)
const ERROR_USER_MAPPED_FILE = cast(clong, 1224)
const ERROR_CONNECTION_REFUSED = cast(clong, 1225)
const ERROR_GRACEFUL_DISCONNECT = cast(clong, 1226)
const ERROR_ADDRESS_ALREADY_ASSOCIATED = cast(clong, 1227)
const ERROR_ADDRESS_NOT_ASSOCIATED = cast(clong, 1228)
const ERROR_CONNECTION_INVALID = cast(clong, 1229)
const ERROR_CONNECTION_ACTIVE = cast(clong, 1230)
const ERROR_NETWORK_UNREACHABLE = cast(clong, 1231)
const ERROR_HOST_UNREACHABLE = cast(clong, 1232)
const ERROR_PROTOCOL_UNREACHABLE = cast(clong, 1233)
const ERROR_PORT_UNREACHABLE = cast(clong, 1234)
const ERROR_REQUEST_ABORTED = cast(clong, 1235)
const ERROR_CONNECTION_ABORTED = cast(clong, 1236)
const ERROR_RETRY = cast(clong, 1237)
const ERROR_CONNECTION_COUNT_LIMIT = cast(clong, 1238)
const ERROR_LOGIN_TIME_RESTRICTION = cast(clong, 1239)
const ERROR_LOGIN_WKSTA_RESTRICTION = cast(clong, 1240)
const ERROR_INCORRECT_ADDRESS = cast(clong, 1241)
const ERROR_ALREADY_REGISTERED = cast(clong, 1242)
const ERROR_SERVICE_NOT_FOUND = cast(clong, 1243)
const ERROR_NOT_AUTHENTICATED = cast(clong, 1244)
const ERROR_NOT_LOGGED_ON = cast(clong, 1245)
const ERROR_CONTINUE = cast(clong, 1246)
const ERROR_ALREADY_INITIALIZED = cast(clong, 1247)
const ERROR_NO_MORE_DEVICES = cast(clong, 1248)
const ERROR_NO_SUCH_SITE = cast(clong, 1249)
const ERROR_DOMAIN_CONTROLLER_EXISTS = cast(clong, 1250)
const ERROR_ONLY_IF_CONNECTED = cast(clong, 1251)
const ERROR_OVERRIDE_NOCHANGES = cast(clong, 1252)
const ERROR_BAD_USER_PROFILE = cast(clong, 1253)
const ERROR_NOT_SUPPORTED_ON_SBS = cast(clong, 1254)
const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = cast(clong, 1255)
const ERROR_HOST_DOWN = cast(clong, 1256)
const ERROR_NON_ACCOUNT_SID = cast(clong, 1257)
const ERROR_NON_DOMAIN_SID = cast(clong, 1258)
const ERROR_APPHELP_BLOCK = cast(clong, 1259)
const ERROR_ACCESS_DISABLED_BY_POLICY = cast(clong, 1260)
const ERROR_REG_NAT_CONSUMPTION = cast(clong, 1261)
const ERROR_CSCSHARE_OFFLINE = cast(clong, 1262)
const ERROR_PKINIT_FAILURE = cast(clong, 1263)
const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = cast(clong, 1264)
const ERROR_DOWNGRADE_DETECTED = cast(clong, 1265)
const ERROR_MACHINE_LOCKED = cast(clong, 1271)
const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = cast(clong, 1273)
const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = cast(clong, 1274)
const ERROR_DRIVER_BLOCKED = cast(clong, 1275)
const ERROR_INVALID_IMPORT_OF_NON_DLL = cast(clong, 1276)
const ERROR_ACCESS_DISABLED_WEBBLADE = cast(clong, 1277)
const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = cast(clong, 1278)
const ERROR_RECOVERY_FAILURE = cast(clong, 1279)
const ERROR_ALREADY_FIBER = cast(clong, 1280)
const ERROR_ALREADY_THREAD = cast(clong, 1281)
const ERROR_STACK_BUFFER_OVERRUN = cast(clong, 1282)
const ERROR_PARAMETER_QUOTA_EXCEEDED = cast(clong, 1283)
const ERROR_DEBUGGER_INACTIVE = cast(clong, 1284)
const ERROR_DELAY_LOAD_FAILED = cast(clong, 1285)
const ERROR_VDM_DISALLOWED = cast(clong, 1286)
const ERROR_UNIDENTIFIED_ERROR = cast(clong, 1287)
const ERROR_NOT_ALL_ASSIGNED = cast(clong, 1300)
const ERROR_SOME_NOT_MAPPED = cast(clong, 1301)
const ERROR_NO_QUOTAS_FOR_ACCOUNT = cast(clong, 1302)
const ERROR_LOCAL_USER_SESSION_KEY = cast(clong, 1303)
const ERROR_NULL_LM_PASSWORD = cast(clong, 1304)
const ERROR_UNKNOWN_REVISION = cast(clong, 1305)
const ERROR_REVISION_MISMATCH = cast(clong, 1306)
const ERROR_INVALID_OWNER = cast(clong, 1307)
const ERROR_INVALID_PRIMARY_GROUP = cast(clong, 1308)
const ERROR_NO_IMPERSONATION_TOKEN = cast(clong, 1309)
const ERROR_CANT_DISABLE_MANDATORY = cast(clong, 1310)
const ERROR_NO_LOGON_SERVERS = cast(clong, 1311)
const ERROR_NO_SUCH_LOGON_SESSION = cast(clong, 1312)
const ERROR_NO_SUCH_PRIVILEGE = cast(clong, 1313)
const ERROR_PRIVILEGE_NOT_HELD = cast(clong, 1314)
const ERROR_INVALID_ACCOUNT_NAME = cast(clong, 1315)
const ERROR_USER_EXISTS = cast(clong, 1316)
const ERROR_NO_SUCH_USER = cast(clong, 1317)
const ERROR_GROUP_EXISTS = cast(clong, 1318)
const ERROR_NO_SUCH_GROUP = cast(clong, 1319)
const ERROR_MEMBER_IN_GROUP = cast(clong, 1320)
const ERROR_MEMBER_NOT_IN_GROUP = cast(clong, 1321)
const ERROR_LAST_ADMIN = cast(clong, 1322)
const ERROR_WRONG_PASSWORD = cast(clong, 1323)
const ERROR_ILL_FORMED_PASSWORD = cast(clong, 1324)
const ERROR_PASSWORD_RESTRICTION = cast(clong, 1325)
const ERROR_LOGON_FAILURE = cast(clong, 1326)
const ERROR_ACCOUNT_RESTRICTION = cast(clong, 1327)
const ERROR_INVALID_LOGON_HOURS = cast(clong, 1328)
const ERROR_INVALID_WORKSTATION = cast(clong, 1329)
const ERROR_PASSWORD_EXPIRED = cast(clong, 1330)
const ERROR_ACCOUNT_DISABLED = cast(clong, 1331)
const ERROR_NONE_MAPPED = cast(clong, 1332)
const ERROR_TOO_MANY_LUIDS_REQUESTED = cast(clong, 1333)
const ERROR_LUIDS_EXHAUSTED = cast(clong, 1334)
const ERROR_INVALID_SUB_AUTHORITY = cast(clong, 1335)
const ERROR_INVALID_ACL = cast(clong, 1336)
const ERROR_INVALID_SID = cast(clong, 1337)
const ERROR_INVALID_SECURITY_DESCR = cast(clong, 1338)
const ERROR_BAD_INHERITANCE_ACL = cast(clong, 1340)
const ERROR_SERVER_DISABLED = cast(clong, 1341)
const ERROR_SERVER_NOT_DISABLED = cast(clong, 1342)
const ERROR_INVALID_ID_AUTHORITY = cast(clong, 1343)
const ERROR_ALLOTTED_SPACE_EXCEEDED = cast(clong, 1344)
const ERROR_INVALID_GROUP_ATTRIBUTES = cast(clong, 1345)
const ERROR_BAD_IMPERSONATION_LEVEL = cast(clong, 1346)
const ERROR_CANT_OPEN_ANONYMOUS = cast(clong, 1347)
const ERROR_BAD_VALIDATION_CLASS = cast(clong, 1348)
const ERROR_BAD_TOKEN_TYPE = cast(clong, 1349)
const ERROR_NO_SECURITY_ON_OBJECT = cast(clong, 1350)
const ERROR_CANT_ACCESS_DOMAIN_INFO = cast(clong, 1351)
const ERROR_INVALID_SERVER_STATE = cast(clong, 1352)
const ERROR_INVALID_DOMAIN_STATE = cast(clong, 1353)
const ERROR_INVALID_DOMAIN_ROLE = cast(clong, 1354)
const ERROR_NO_SUCH_DOMAIN = cast(clong, 1355)
const ERROR_DOMAIN_EXISTS = cast(clong, 1356)
const ERROR_DOMAIN_LIMIT_EXCEEDED = cast(clong, 1357)
const ERROR_INTERNAL_DB_CORRUPTION = cast(clong, 1358)
const ERROR_INTERNAL_ERROR = cast(clong, 1359)
const ERROR_GENERIC_NOT_MAPPED = cast(clong, 1360)
const ERROR_BAD_DESCRIPTOR_FORMAT = cast(clong, 1361)
const ERROR_NOT_LOGON_PROCESS = cast(clong, 1362)
const ERROR_LOGON_SESSION_EXISTS = cast(clong, 1363)
const ERROR_NO_SUCH_PACKAGE = cast(clong, 1364)
const ERROR_BAD_LOGON_SESSION_STATE = cast(clong, 1365)
const ERROR_LOGON_SESSION_COLLISION = cast(clong, 1366)
const ERROR_INVALID_LOGON_TYPE = cast(clong, 1367)
const ERROR_CANNOT_IMPERSONATE = cast(clong, 1368)
const ERROR_RXACT_INVALID_STATE = cast(clong, 1369)
const ERROR_RXACT_COMMIT_FAILURE = cast(clong, 1370)
const ERROR_SPECIAL_ACCOUNT = cast(clong, 1371)
const ERROR_SPECIAL_GROUP = cast(clong, 1372)
const ERROR_SPECIAL_USER = cast(clong, 1373)
const ERROR_MEMBERS_PRIMARY_GROUP = cast(clong, 1374)
const ERROR_TOKEN_ALREADY_IN_USE = cast(clong, 1375)
const ERROR_NO_SUCH_ALIAS = cast(clong, 1376)
const ERROR_MEMBER_NOT_IN_ALIAS = cast(clong, 1377)
const ERROR_MEMBER_IN_ALIAS = cast(clong, 1378)
const ERROR_ALIAS_EXISTS = cast(clong, 1379)
const ERROR_LOGON_NOT_GRANTED = cast(clong, 1380)
const ERROR_TOO_MANY_SECRETS = cast(clong, 1381)
const ERROR_SECRET_TOO_LONG = cast(clong, 1382)
const ERROR_INTERNAL_DB_ERROR = cast(clong, 1383)
const ERROR_TOO_MANY_CONTEXT_IDS = cast(clong, 1384)
const ERROR_LOGON_TYPE_NOT_GRANTED = cast(clong, 1385)
const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = cast(clong, 1386)
const ERROR_NO_SUCH_MEMBER = cast(clong, 1387)
const ERROR_INVALID_MEMBER = cast(clong, 1388)
const ERROR_TOO_MANY_SIDS = cast(clong, 1389)
const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = cast(clong, 1390)
const ERROR_NO_INHERITANCE = cast(clong, 1391)
const ERROR_FILE_CORRUPT = cast(clong, 1392)
const ERROR_DISK_CORRUPT = cast(clong, 1393)
const ERROR_NO_USER_SESSION_KEY = cast(clong, 1394)
const ERROR_LICENSE_QUOTA_EXCEEDED = cast(clong, 1395)
const ERROR_WRONG_TARGET_NAME = cast(clong, 1396)
const ERROR_MUTUAL_AUTH_FAILED = cast(clong, 1397)
const ERROR_TIME_SKEW = cast(clong, 1398)
const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = cast(clong, 1399)
const ERROR_INVALID_WINDOW_HANDLE = cast(clong, 1400)
const ERROR_INVALID_MENU_HANDLE = cast(clong, 1401)
const ERROR_INVALID_CURSOR_HANDLE = cast(clong, 1402)
const ERROR_INVALID_ACCEL_HANDLE = cast(clong, 1403)
const ERROR_INVALID_HOOK_HANDLE = cast(clong, 1404)
const ERROR_INVALID_DWP_HANDLE = cast(clong, 1405)
const ERROR_TLW_WITH_WSCHILD = cast(clong, 1406)
const ERROR_CANNOT_FIND_WND_CLASS = cast(clong, 1407)
const ERROR_WINDOW_OF_OTHER_THREAD = cast(clong, 1408)
const ERROR_HOTKEY_ALREADY_REGISTERED = cast(clong, 1409)
const ERROR_CLASS_ALREADY_EXISTS = cast(clong, 1410)
const ERROR_CLASS_DOES_NOT_EXIST = cast(clong, 1411)
const ERROR_CLASS_HAS_WINDOWS = cast(clong, 1412)
const ERROR_INVALID_INDEX = cast(clong, 1413)
const ERROR_INVALID_ICON_HANDLE = cast(clong, 1414)
const ERROR_PRIVATE_DIALOG_INDEX = cast(clong, 1415)
const ERROR_LISTBOX_ID_NOT_FOUND = cast(clong, 1416)
const ERROR_NO_WILDCARD_CHARACTERS = cast(clong, 1417)
const ERROR_CLIPBOARD_NOT_OPEN = cast(clong, 1418)
const ERROR_HOTKEY_NOT_REGISTERED = cast(clong, 1419)
const ERROR_WINDOW_NOT_DIALOG = cast(clong, 1420)
const ERROR_CONTROL_ID_NOT_FOUND = cast(clong, 1421)
const ERROR_INVALID_COMBOBOX_MESSAGE = cast(clong, 1422)
const ERROR_WINDOW_NOT_COMBOBOX = cast(clong, 1423)
const ERROR_INVALID_EDIT_HEIGHT = cast(clong, 1424)
const ERROR_DC_NOT_FOUND = cast(clong, 1425)
const ERROR_INVALID_HOOK_FILTER = cast(clong, 1426)
const ERROR_INVALID_FILTER_PROC = cast(clong, 1427)
const ERROR_HOOK_NEEDS_HMOD = cast(clong, 1428)
const ERROR_GLOBAL_ONLY_HOOK = cast(clong, 1429)
const ERROR_JOURNAL_HOOK_SET = cast(clong, 1430)
const ERROR_HOOK_NOT_INSTALLED = cast(clong, 1431)
const ERROR_INVALID_LB_MESSAGE = cast(clong, 1432)
const ERROR_SETCOUNT_ON_BAD_LB = cast(clong, 1433)
const ERROR_LB_WITHOUT_TABSTOPS = cast(clong, 1434)
const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = cast(clong, 1435)
const ERROR_CHILD_WINDOW_MENU = cast(clong, 1436)
const ERROR_NO_SYSTEM_MENU = cast(clong, 1437)
const ERROR_INVALID_MSGBOX_STYLE = cast(clong, 1438)
const ERROR_INVALID_SPI_VALUE = cast(clong, 1439)
const ERROR_SCREEN_ALREADY_LOCKED = cast(clong, 1440)
const ERROR_HWNDS_HAVE_DIFF_PARENT = cast(clong, 1441)
const ERROR_NOT_CHILD_WINDOW = cast(clong, 1442)
const ERROR_INVALID_GW_COMMAND = cast(clong, 1443)
const ERROR_INVALID_THREAD_ID = cast(clong, 1444)
const ERROR_NON_MDICHILD_WINDOW = cast(clong, 1445)
const ERROR_POPUP_ALREADY_ACTIVE = cast(clong, 1446)
const ERROR_NO_SCROLLBARS = cast(clong, 1447)
const ERROR_INVALID_SCROLLBAR_RANGE = cast(clong, 1448)
const ERROR_INVALID_SHOWWIN_COMMAND = cast(clong, 1449)
const ERROR_NO_SYSTEM_RESOURCES = cast(clong, 1450)
const ERROR_NONPAGED_SYSTEM_RESOURCES = cast(clong, 1451)
const ERROR_PAGED_SYSTEM_RESOURCES = cast(clong, 1452)
const ERROR_WORKING_SET_QUOTA = cast(clong, 1453)
const ERROR_PAGEFILE_QUOTA = cast(clong, 1454)
const ERROR_COMMITMENT_LIMIT = cast(clong, 1455)
const ERROR_MENU_ITEM_NOT_FOUND = cast(clong, 1456)
const ERROR_INVALID_KEYBOARD_HANDLE = cast(clong, 1457)
const ERROR_HOOK_TYPE_NOT_ALLOWED = cast(clong, 1458)
const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = cast(clong, 1459)
const ERROR_TIMEOUT = cast(clong, 1460)
const ERROR_INVALID_MONITOR_HANDLE = cast(clong, 1461)
const ERROR_INCORRECT_SIZE = cast(clong, 1462)
const ERROR_EVENTLOG_FILE_CORRUPT = cast(clong, 1500)
const ERROR_EVENTLOG_CANT_START = cast(clong, 1501)
const ERROR_LOG_FILE_FULL = cast(clong, 1502)
const ERROR_EVENTLOG_FILE_CHANGED = cast(clong, 1503)
const ERROR_INSTALL_SERVICE_FAILURE = cast(clong, 1601)
const ERROR_INSTALL_USEREXIT = cast(clong, 1602)
const ERROR_INSTALL_FAILURE = cast(clong, 1603)
const ERROR_INSTALL_SUSPEND = cast(clong, 1604)
const ERROR_UNKNOWN_PRODUCT = cast(clong, 1605)
const ERROR_UNKNOWN_FEATURE = cast(clong, 1606)
const ERROR_UNKNOWN_COMPONENT = cast(clong, 1607)
const ERROR_UNKNOWN_PROPERTY = cast(clong, 1608)
const ERROR_INVALID_HANDLE_STATE = cast(clong, 1609)
const ERROR_BAD_CONFIGURATION = cast(clong, 1610)
const ERROR_INDEX_ABSENT = cast(clong, 1611)
const ERROR_INSTALL_SOURCE_ABSENT = cast(clong, 1612)
const ERROR_INSTALL_PACKAGE_VERSION = cast(clong, 1613)
const ERROR_PRODUCT_UNINSTALLED = cast(clong, 1614)
const ERROR_BAD_QUERY_SYNTAX = cast(clong, 1615)
const ERROR_INVALID_FIELD = cast(clong, 1616)
const ERROR_DEVICE_REMOVED = cast(clong, 1617)
const ERROR_INSTALL_ALREADY_RUNNING = cast(clong, 1618)
const ERROR_INSTALL_PACKAGE_OPEN_FAILED = cast(clong, 1619)
const ERROR_INSTALL_PACKAGE_INVALID = cast(clong, 1620)
const ERROR_INSTALL_UI_FAILURE = cast(clong, 1621)
const ERROR_INSTALL_LOG_FAILURE = cast(clong, 1622)
const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = cast(clong, 1623)
const ERROR_INSTALL_TRANSFORM_FAILURE = cast(clong, 1624)
const ERROR_INSTALL_PACKAGE_REJECTED = cast(clong, 1625)
const ERROR_FUNCTION_NOT_CALLED = cast(clong, 1626)
const ERROR_FUNCTION_FAILED = cast(clong, 1627)
const ERROR_INVALID_TABLE = cast(clong, 1628)
const ERROR_DATATYPE_MISMATCH = cast(clong, 1629)
const ERROR_UNSUPPORTED_TYPE = cast(clong, 1630)
const ERROR_CREATE_FAILED = cast(clong, 1631)
const ERROR_INSTALL_TEMP_UNWRITABLE = cast(clong, 1632)
const ERROR_INSTALL_PLATFORM_UNSUPPORTED = cast(clong, 1633)
const ERROR_INSTALL_NOTUSED = cast(clong, 1634)
const ERROR_PATCH_PACKAGE_OPEN_FAILED = cast(clong, 1635)
const ERROR_PATCH_PACKAGE_INVALID = cast(clong, 1636)
const ERROR_PATCH_PACKAGE_UNSUPPORTED = cast(clong, 1637)
const ERROR_PRODUCT_VERSION = cast(clong, 1638)
const ERROR_INVALID_COMMAND_LINE = cast(clong, 1639)
const ERROR_INSTALL_REMOTE_DISALLOWED = cast(clong, 1640)
const ERROR_SUCCESS_REBOOT_INITIATED = cast(clong, 1641)
const ERROR_PATCH_TARGET_NOT_FOUND = cast(clong, 1642)
const ERROR_PATCH_PACKAGE_REJECTED = cast(clong, 1643)
const ERROR_INSTALL_TRANSFORM_REJECTED = cast(clong, 1644)
const ERROR_INSTALL_REMOTE_PROHIBITED = cast(clong, 1645)
const RPC_S_INVALID_STRING_BINDING = cast(clong, 1700)
const RPC_S_WRONG_KIND_OF_BINDING = cast(clong, 1701)
const RPC_S_INVALID_BINDING = cast(clong, 1702)
const RPC_S_PROTSEQ_NOT_SUPPORTED = cast(clong, 1703)
const RPC_S_INVALID_RPC_PROTSEQ = cast(clong, 1704)
const RPC_S_INVALID_STRING_UUID = cast(clong, 1705)
const RPC_S_INVALID_ENDPOINT_FORMAT = cast(clong, 1706)
const RPC_S_INVALID_NET_ADDR = cast(clong, 1707)
const RPC_S_NO_ENDPOINT_FOUND = cast(clong, 1708)
const RPC_S_INVALID_TIMEOUT = cast(clong, 1709)
const RPC_S_OBJECT_NOT_FOUND = cast(clong, 1710)
const RPC_S_ALREADY_REGISTERED = cast(clong, 1711)
const RPC_S_TYPE_ALREADY_REGISTERED = cast(clong, 1712)
const RPC_S_ALREADY_LISTENING = cast(clong, 1713)
const RPC_S_NO_PROTSEQS_REGISTERED = cast(clong, 1714)
const RPC_S_NOT_LISTENING = cast(clong, 1715)
const RPC_S_UNKNOWN_MGR_TYPE = cast(clong, 1716)
const RPC_S_UNKNOWN_IF = cast(clong, 1717)
const RPC_S_NO_BINDINGS = cast(clong, 1718)
const RPC_S_NO_PROTSEQS = cast(clong, 1719)
const RPC_S_CANT_CREATE_ENDPOINT = cast(clong, 1720)
const RPC_S_OUT_OF_RESOURCES = cast(clong, 1721)
const RPC_S_SERVER_UNAVAILABLE = cast(clong, 1722)
const RPC_S_SERVER_TOO_BUSY = cast(clong, 1723)
const RPC_S_INVALID_NETWORK_OPTIONS = cast(clong, 1724)
const RPC_S_NO_CALL_ACTIVE = cast(clong, 1725)
const RPC_S_CALL_FAILED = cast(clong, 1726)
const RPC_S_CALL_FAILED_DNE = cast(clong, 1727)
const RPC_S_PROTOCOL_ERROR = cast(clong, 1728)
const RPC_S_UNSUPPORTED_TRANS_SYN = cast(clong, 1730)
const RPC_S_UNSUPPORTED_TYPE = cast(clong, 1732)
const RPC_S_INVALID_TAG = cast(clong, 1733)
const RPC_S_INVALID_BOUND = cast(clong, 1734)
const RPC_S_NO_ENTRY_NAME = cast(clong, 1735)
const RPC_S_INVALID_NAME_SYNTAX = cast(clong, 1736)
const RPC_S_UNSUPPORTED_NAME_SYNTAX = cast(clong, 1737)
const RPC_S_UUID_NO_ADDRESS = cast(clong, 1739)
const RPC_S_DUPLICATE_ENDPOINT = cast(clong, 1740)
const RPC_S_UNKNOWN_AUTHN_TYPE = cast(clong, 1741)
const RPC_S_MAX_CALLS_TOO_SMALL = cast(clong, 1742)
const RPC_S_STRING_TOO_LONG = cast(clong, 1743)
const RPC_S_PROTSEQ_NOT_FOUND = cast(clong, 1744)
const RPC_S_PROCNUM_OUT_OF_RANGE = cast(clong, 1745)
const RPC_S_BINDING_HAS_NO_AUTH = cast(clong, 1746)
const RPC_S_UNKNOWN_AUTHN_SERVICE = cast(clong, 1747)
const RPC_S_UNKNOWN_AUTHN_LEVEL = cast(clong, 1748)
const RPC_S_INVALID_AUTH_IDENTITY = cast(clong, 1749)
const RPC_S_UNKNOWN_AUTHZ_SERVICE = cast(clong, 1750)
const EPT_S_INVALID_ENTRY = cast(clong, 1751)
const EPT_S_CANT_PERFORM_OP = cast(clong, 1752)
const EPT_S_NOT_REGISTERED = cast(clong, 1753)
const RPC_S_NOTHING_TO_EXPORT = cast(clong, 1754)
const RPC_S_INCOMPLETE_NAME = cast(clong, 1755)
const RPC_S_INVALID_VERS_OPTION = cast(clong, 1756)
const RPC_S_NO_MORE_MEMBERS = cast(clong, 1757)
const RPC_S_NOT_ALL_OBJS_UNEXPORTED = cast(clong, 1758)
const RPC_S_INTERFACE_NOT_FOUND = cast(clong, 1759)
const RPC_S_ENTRY_ALREADY_EXISTS = cast(clong, 1760)
const RPC_S_ENTRY_NOT_FOUND = cast(clong, 1761)
const RPC_S_NAME_SERVICE_UNAVAILABLE = cast(clong, 1762)
const RPC_S_INVALID_NAF_ID = cast(clong, 1763)
const RPC_S_CANNOT_SUPPORT = cast(clong, 1764)
const RPC_S_NO_CONTEXT_AVAILABLE = cast(clong, 1765)
const RPC_S_INTERNAL_ERROR = cast(clong, 1766)
const RPC_S_ZERO_DIVIDE = cast(clong, 1767)
const RPC_S_ADDRESS_ERROR = cast(clong, 1768)
const RPC_S_FP_DIV_ZERO = cast(clong, 1769)
const RPC_S_FP_UNDERFLOW = cast(clong, 1770)
const RPC_S_FP_OVERFLOW = cast(clong, 1771)
const RPC_X_NO_MORE_ENTRIES = cast(clong, 1772)
const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = cast(clong, 1773)
const RPC_X_SS_CHAR_TRANS_SHORT_FILE = cast(clong, 1774)
const RPC_X_SS_IN_NULL_CONTEXT = cast(clong, 1775)
const RPC_X_SS_CONTEXT_DAMAGED = cast(clong, 1777)
const RPC_X_SS_HANDLES_MISMATCH = cast(clong, 1778)
const RPC_X_SS_CANNOT_GET_CALL_HANDLE = cast(clong, 1779)
const RPC_X_NULL_REF_POINTER = cast(clong, 1780)
const RPC_X_ENUM_VALUE_OUT_OF_RANGE = cast(clong, 1781)
const RPC_X_BYTE_COUNT_TOO_SMALL = cast(clong, 1782)
const RPC_X_BAD_STUB_DATA = cast(clong, 1783)
const ERROR_INVALID_USER_BUFFER = cast(clong, 1784)
const ERROR_UNRECOGNIZED_MEDIA = cast(clong, 1785)
const ERROR_NO_TRUST_LSA_SECRET = cast(clong, 1786)
const ERROR_NO_TRUST_SAM_ACCOUNT = cast(clong, 1787)
const ERROR_TRUSTED_DOMAIN_FAILURE = cast(clong, 1788)
const ERROR_TRUSTED_RELATIONSHIP_FAILURE = cast(clong, 1789)
const ERROR_TRUST_FAILURE = cast(clong, 1790)
const RPC_S_CALL_IN_PROGRESS = cast(clong, 1791)
const ERROR_NETLOGON_NOT_STARTED = cast(clong, 1792)
const ERROR_ACCOUNT_EXPIRED = cast(clong, 1793)
const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = cast(clong, 1794)
const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = cast(clong, 1795)
const ERROR_UNKNOWN_PORT = cast(clong, 1796)
const ERROR_UNKNOWN_PRINTER_DRIVER = cast(clong, 1797)
const ERROR_UNKNOWN_PRINTPROCESSOR = cast(clong, 1798)
const ERROR_INVALID_SEPARATOR_FILE = cast(clong, 1799)
const ERROR_INVALID_PRIORITY = cast(clong, 1800)
const ERROR_INVALID_PRINTER_NAME = cast(clong, 1801)
const ERROR_PRINTER_ALREADY_EXISTS = cast(clong, 1802)
const ERROR_INVALID_PRINTER_COMMAND = cast(clong, 1803)
const ERROR_INVALID_DATATYPE = cast(clong, 1804)
const ERROR_INVALID_ENVIRONMENT = cast(clong, 1805)
const RPC_S_NO_MORE_BINDINGS = cast(clong, 1806)
const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = cast(clong, 1807)
const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = cast(clong, 1808)
const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = cast(clong, 1809)
const ERROR_DOMAIN_TRUST_INCONSISTENT = cast(clong, 1810)
const ERROR_SERVER_HAS_OPEN_HANDLES = cast(clong, 1811)
const ERROR_RESOURCE_DATA_NOT_FOUND = cast(clong, 1812)
const ERROR_RESOURCE_TYPE_NOT_FOUND = cast(clong, 1813)
const ERROR_RESOURCE_NAME_NOT_FOUND = cast(clong, 1814)
const ERROR_RESOURCE_LANG_NOT_FOUND = cast(clong, 1815)
const ERROR_NOT_ENOUGH_QUOTA = cast(clong, 1816)
const RPC_S_NO_INTERFACES = cast(clong, 1817)
const RPC_S_CALL_CANCELLED = cast(clong, 1818)
const RPC_S_BINDING_INCOMPLETE = cast(clong, 1819)
const RPC_S_COMM_FAILURE = cast(clong, 1820)
const RPC_S_UNSUPPORTED_AUTHN_LEVEL = cast(clong, 1821)
const RPC_S_NO_PRINC_NAME = cast(clong, 1822)
const RPC_S_NOT_RPC_ERROR = cast(clong, 1823)
const RPC_S_UUID_LOCAL_ONLY = cast(clong, 1824)
const RPC_S_SEC_PKG_ERROR = cast(clong, 1825)
const RPC_S_NOT_CANCELLED = cast(clong, 1826)
const RPC_X_INVALID_ES_ACTION = cast(clong, 1827)
const RPC_X_WRONG_ES_VERSION = cast(clong, 1828)
const RPC_X_WRONG_STUB_VERSION = cast(clong, 1829)
const RPC_X_INVALID_PIPE_OBJECT = cast(clong, 1830)
const RPC_X_WRONG_PIPE_ORDER = cast(clong, 1831)
const RPC_X_WRONG_PIPE_VERSION = cast(clong, 1832)
const RPC_S_GROUP_MEMBER_NOT_FOUND = cast(clong, 1898)
const EPT_S_CANT_CREATE = cast(clong, 1899)
const RPC_S_INVALID_OBJECT = cast(clong, 1900)
const ERROR_INVALID_TIME = cast(clong, 1901)
const ERROR_INVALID_FORM_NAME = cast(clong, 1902)
const ERROR_INVALID_FORM_SIZE = cast(clong, 1903)
const ERROR_ALREADY_WAITING = cast(clong, 1904)
const ERROR_PRINTER_DELETED = cast(clong, 1905)
const ERROR_INVALID_PRINTER_STATE = cast(clong, 1906)
const ERROR_PASSWORD_MUST_CHANGE = cast(clong, 1907)
const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = cast(clong, 1908)
const ERROR_ACCOUNT_LOCKED_OUT = cast(clong, 1909)
const OR_INVALID_OXID = cast(clong, 1910)
const OR_INVALID_OID = cast(clong, 1911)
const OR_INVALID_SET = cast(clong, 1912)
const RPC_S_SEND_INCOMPLETE = cast(clong, 1913)
const RPC_S_INVALID_ASYNC_HANDLE = cast(clong, 1914)
const RPC_S_INVALID_ASYNC_CALL = cast(clong, 1915)
const RPC_X_PIPE_CLOSED = cast(clong, 1916)
const RPC_X_PIPE_DISCIPLINE_ERROR = cast(clong, 1917)
const RPC_X_PIPE_EMPTY = cast(clong, 1918)
const ERROR_NO_SITENAME = cast(clong, 1919)
const ERROR_CANT_ACCESS_FILE = cast(clong, 1920)
const ERROR_CANT_RESOLVE_FILENAME = cast(clong, 1921)
const RPC_S_ENTRY_TYPE_MISMATCH = cast(clong, 1922)
const RPC_S_NOT_ALL_OBJS_EXPORTED = cast(clong, 1923)
const RPC_S_INTERFACE_NOT_EXPORTED = cast(clong, 1924)
const RPC_S_PROFILE_NOT_ADDED = cast(clong, 1925)
const RPC_S_PRF_ELT_NOT_ADDED = cast(clong, 1926)
const RPC_S_PRF_ELT_NOT_REMOVED = cast(clong, 1927)
const RPC_S_GRP_ELT_NOT_ADDED = cast(clong, 1928)
const RPC_S_GRP_ELT_NOT_REMOVED = cast(clong, 1929)
const ERROR_KM_DRIVER_BLOCKED = cast(clong, 1930)
const ERROR_CONTEXT_EXPIRED = cast(clong, 1931)
const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = cast(clong, 1932)
const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = cast(clong, 1933)
const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = cast(clong, 1934)
const ERROR_AUTHENTICATION_FIREWALL_FAILED = cast(clong, 1935)
const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = cast(clong, 1936)
const ERROR_INVALID_PIXEL_FORMAT = cast(clong, 2000)
const ERROR_BAD_DRIVER = cast(clong, 2001)
const ERROR_INVALID_WINDOW_STYLE = cast(clong, 2002)
const ERROR_METAFILE_NOT_SUPPORTED = cast(clong, 2003)
const ERROR_TRANSFORM_NOT_SUPPORTED = cast(clong, 2004)
const ERROR_CLIPPING_NOT_SUPPORTED = cast(clong, 2005)
const ERROR_INVALID_CMM = cast(clong, 2010)
const ERROR_INVALID_PROFILE = cast(clong, 2011)
const ERROR_TAG_NOT_FOUND = cast(clong, 2012)
const ERROR_TAG_NOT_PRESENT = cast(clong, 2013)
const ERROR_DUPLICATE_TAG = cast(clong, 2014)
const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = cast(clong, 2015)
const ERROR_PROFILE_NOT_FOUND = cast(clong, 2016)
const ERROR_INVALID_COLORSPACE = cast(clong, 2017)
const ERROR_ICM_NOT_ENABLED = cast(clong, 2018)
const ERROR_DELETING_ICM_XFORM = cast(clong, 2019)
const ERROR_INVALID_TRANSFORM = cast(clong, 2020)
const ERROR_COLORSPACE_MISMATCH = cast(clong, 2021)
const ERROR_INVALID_COLORINDEX = cast(clong, 2022)
const ERROR_CONNECTED_OTHER_PASSWORD = cast(clong, 2108)
const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = cast(clong, 2109)
const ERROR_BAD_USERNAME = cast(clong, 2202)
const ERROR_NOT_CONNECTED = cast(clong, 2250)
const ERROR_OPEN_FILES = cast(clong, 2401)
const ERROR_ACTIVE_CONNECTIONS = cast(clong, 2402)
const ERROR_DEVICE_IN_USE = cast(clong, 2404)
const ERROR_UNKNOWN_PRINT_MONITOR = cast(clong, 3000)
const ERROR_PRINTER_DRIVER_IN_USE = cast(clong, 3001)
const ERROR_SPOOL_FILE_NOT_FOUND = cast(clong, 3002)
const ERROR_SPL_NO_STARTDOC = cast(clong, 3003)
const ERROR_SPL_NO_ADDJOB = cast(clong, 3004)
const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = cast(clong, 3005)
const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = cast(clong, 3006)
const ERROR_INVALID_PRINT_MONITOR = cast(clong, 3007)
const ERROR_PRINT_MONITOR_IN_USE = cast(clong, 3008)
const ERROR_PRINTER_HAS_JOBS_QUEUED = cast(clong, 3009)
const ERROR_SUCCESS_REBOOT_REQUIRED = cast(clong, 3010)
const ERROR_SUCCESS_RESTART_REQUIRED = cast(clong, 3011)
const ERROR_PRINTER_NOT_FOUND = cast(clong, 3012)
const ERROR_PRINTER_DRIVER_WARNED = cast(clong, 3013)
const ERROR_PRINTER_DRIVER_BLOCKED = cast(clong, 3014)
const ERROR_WINS_INTERNAL = cast(clong, 4000)
const ERROR_CAN_NOT_DEL_LOCAL_WINS = cast(clong, 4001)
const ERROR_STATIC_INIT = cast(clong, 4002)
const ERROR_INC_BACKUP = cast(clong, 4003)
const ERROR_FULL_BACKUP = cast(clong, 4004)
const ERROR_REC_NON_EXISTENT = cast(clong, 4005)
const ERROR_RPL_NOT_ALLOWED = cast(clong, 4006)
const ERROR_DHCP_ADDRESS_CONFLICT = cast(clong, 4100)
const ERROR_WMI_GUID_NOT_FOUND = cast(clong, 4200)
const ERROR_WMI_INSTANCE_NOT_FOUND = cast(clong, 4201)
const ERROR_WMI_ITEMID_NOT_FOUND = cast(clong, 4202)
const ERROR_WMI_TRY_AGAIN = cast(clong, 4203)
const ERROR_WMI_DP_NOT_FOUND = cast(clong, 4204)
const ERROR_WMI_UNRESOLVED_INSTANCE_REF = cast(clong, 4205)
const ERROR_WMI_ALREADY_ENABLED = cast(clong, 4206)
const ERROR_WMI_GUID_DISCONNECTED = cast(clong, 4207)
const ERROR_WMI_SERVER_UNAVAILABLE = cast(clong, 4208)
const ERROR_WMI_DP_FAILED = cast(clong, 4209)
const ERROR_WMI_INVALID_MOF = cast(clong, 4210)
const ERROR_WMI_INVALID_REGINFO = cast(clong, 4211)
const ERROR_WMI_ALREADY_DISABLED = cast(clong, 4212)
const ERROR_WMI_READ_ONLY = cast(clong, 4213)
const ERROR_WMI_SET_FAILURE = cast(clong, 4214)
const ERROR_INVALID_MEDIA = cast(clong, 4300)
const ERROR_INVALID_LIBRARY = cast(clong, 4301)
const ERROR_INVALID_MEDIA_POOL = cast(clong, 4302)
const ERROR_DRIVE_MEDIA_MISMATCH = cast(clong, 4303)
const ERROR_MEDIA_OFFLINE = cast(clong, 4304)
const ERROR_LIBRARY_OFFLINE = cast(clong, 4305)
const ERROR_EMPTY = cast(clong, 4306)
const ERROR_NOT_EMPTY = cast(clong, 4307)
const ERROR_MEDIA_UNAVAILABLE = cast(clong, 4308)
const ERROR_RESOURCE_DISABLED = cast(clong, 4309)
const ERROR_INVALID_CLEANER = cast(clong, 4310)
const ERROR_UNABLE_TO_CLEAN = cast(clong, 4311)
const ERROR_OBJECT_NOT_FOUND = cast(clong, 4312)
const ERROR_DATABASE_FAILURE = cast(clong, 4313)
const ERROR_DATABASE_FULL = cast(clong, 4314)
const ERROR_MEDIA_INCOMPATIBLE = cast(clong, 4315)
const ERROR_RESOURCE_NOT_PRESENT = cast(clong, 4316)
const ERROR_INVALID_OPERATION = cast(clong, 4317)
const ERROR_MEDIA_NOT_AVAILABLE = cast(clong, 4318)
const ERROR_DEVICE_NOT_AVAILABLE = cast(clong, 4319)
const ERROR_REQUEST_REFUSED = cast(clong, 4320)
const ERROR_INVALID_DRIVE_OBJECT = cast(clong, 4321)
const ERROR_LIBRARY_FULL = cast(clong, 4322)
const ERROR_MEDIUM_NOT_ACCESSIBLE = cast(clong, 4323)
const ERROR_UNABLE_TO_LOAD_MEDIUM = cast(clong, 4324)
const ERROR_UNABLE_TO_INVENTORY_DRIVE = cast(clong, 4325)
const ERROR_UNABLE_TO_INVENTORY_SLOT = cast(clong, 4326)
const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = cast(clong, 4327)
const ERROR_TRANSPORT_FULL = cast(clong, 4328)
const ERROR_CONTROLLING_IEPORT = cast(clong, 4329)
const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = cast(clong, 4330)
const ERROR_CLEANER_SLOT_SET = cast(clong, 4331)
const ERROR_CLEANER_SLOT_NOT_SET = cast(clong, 4332)
const ERROR_CLEANER_CARTRIDGE_SPENT = cast(clong, 4333)
const ERROR_UNEXPECTED_OMID = cast(clong, 4334)
const ERROR_CANT_DELETE_LAST_ITEM = cast(clong, 4335)
const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = cast(clong, 4336)
const ERROR_VOLUME_CONTAINS_SYS_FILES = cast(clong, 4337)
const ERROR_INDIGENOUS_TYPE = cast(clong, 4338)
const ERROR_NO_SUPPORTING_DRIVES = cast(clong, 4339)
const ERROR_CLEANER_CARTRIDGE_INSTALLED = cast(clong, 4340)
const ERROR_IEPORT_FULL = cast(clong, 4341)
const ERROR_FILE_OFFLINE = cast(clong, 4350)
const ERROR_REMOTE_STORAGE_NOT_ACTIVE = cast(clong, 4351)
const ERROR_REMOTE_STORAGE_MEDIA_ERROR = cast(clong, 4352)
const ERROR_NOT_A_REPARSE_POINT = cast(clong, 4390)
const ERROR_REPARSE_ATTRIBUTE_CONFLICT = cast(clong, 4391)
const ERROR_INVALID_REPARSE_DATA = cast(clong, 4392)
const ERROR_REPARSE_TAG_INVALID = cast(clong, 4393)
const ERROR_REPARSE_TAG_MISMATCH = cast(clong, 4394)
const ERROR_VOLUME_NOT_SIS_ENABLED = cast(clong, 4500)
const ERROR_DEPENDENT_RESOURCE_EXISTS = cast(clong, 5001)
const ERROR_DEPENDENCY_NOT_FOUND = cast(clong, 5002)
const ERROR_DEPENDENCY_ALREADY_EXISTS = cast(clong, 5003)
const ERROR_RESOURCE_NOT_ONLINE = cast(clong, 5004)
const ERROR_HOST_NODE_NOT_AVAILABLE = cast(clong, 5005)
const ERROR_RESOURCE_NOT_AVAILABLE = cast(clong, 5006)
const ERROR_RESOURCE_NOT_FOUND = cast(clong, 5007)
const ERROR_SHUTDOWN_CLUSTER = cast(clong, 5008)
const ERROR_CANT_EVICT_ACTIVE_NODE = cast(clong, 5009)
const ERROR_OBJECT_ALREADY_EXISTS = cast(clong, 5010)
const ERROR_OBJECT_IN_LIST = cast(clong, 5011)
const ERROR_GROUP_NOT_AVAILABLE = cast(clong, 5012)
const ERROR_GROUP_NOT_FOUND = cast(clong, 5013)
const ERROR_GROUP_NOT_ONLINE = cast(clong, 5014)
const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = cast(clong, 5015)
const ERROR_HOST_NODE_NOT_GROUP_OWNER = cast(clong, 5016)
const ERROR_RESMON_CREATE_FAILED = cast(clong, 5017)
const ERROR_RESMON_ONLINE_FAILED = cast(clong, 5018)
const ERROR_RESOURCE_ONLINE = cast(clong, 5019)
const ERROR_QUORUM_RESOURCE = cast(clong, 5020)
const ERROR_NOT_QUORUM_CAPABLE = cast(clong, 5021)
const ERROR_CLUSTER_SHUTTING_DOWN = cast(clong, 5022)
const ERROR_INVALID_STATE = cast(clong, 5023)
const ERROR_RESOURCE_PROPERTIES_STORED = cast(clong, 5024)
const ERROR_NOT_QUORUM_CLASS = cast(clong, 5025)
const ERROR_CORE_RESOURCE = cast(clong, 5026)
const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = cast(clong, 5027)
const ERROR_QUORUMLOG_OPEN_FAILED = cast(clong, 5028)
const ERROR_CLUSTERLOG_CORRUPT = cast(clong, 5029)
const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = cast(clong, 5030)
const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = cast(clong, 5031)
const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = cast(clong, 5032)
const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = cast(clong, 5033)
const ERROR_QUORUM_OWNER_ALIVE = cast(clong, 5034)
const ERROR_NETWORK_NOT_AVAILABLE = cast(clong, 5035)
const ERROR_NODE_NOT_AVAILABLE = cast(clong, 5036)
const ERROR_ALL_NODES_NOT_AVAILABLE = cast(clong, 5037)
const ERROR_RESOURCE_FAILED = cast(clong, 5038)
const ERROR_CLUSTER_INVALID_NODE = cast(clong, 5039)
const ERROR_CLUSTER_NODE_EXISTS = cast(clong, 5040)
const ERROR_CLUSTER_JOIN_IN_PROGRESS = cast(clong, 5041)
const ERROR_CLUSTER_NODE_NOT_FOUND = cast(clong, 5042)
const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = cast(clong, 5043)
const ERROR_CLUSTER_NETWORK_EXISTS = cast(clong, 5044)
const ERROR_CLUSTER_NETWORK_NOT_FOUND = cast(clong, 5045)
const ERROR_CLUSTER_NETINTERFACE_EXISTS = cast(clong, 5046)
const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = cast(clong, 5047)
const ERROR_CLUSTER_INVALID_REQUEST = cast(clong, 5048)
const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = cast(clong, 5049)
const ERROR_CLUSTER_NODE_DOWN = cast(clong, 5050)
const ERROR_CLUSTER_NODE_UNREACHABLE = cast(clong, 5051)
const ERROR_CLUSTER_NODE_NOT_MEMBER = cast(clong, 5052)
const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = cast(clong, 5053)
const ERROR_CLUSTER_INVALID_NETWORK = cast(clong, 5054)
const ERROR_CLUSTER_NODE_UP = cast(clong, 5056)
const ERROR_CLUSTER_IPADDR_IN_USE = cast(clong, 5057)
const ERROR_CLUSTER_NODE_NOT_PAUSED = cast(clong, 5058)
const ERROR_CLUSTER_NO_SECURITY_CONTEXT = cast(clong, 5059)
const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = cast(clong, 5060)
const ERROR_CLUSTER_NODE_ALREADY_UP = cast(clong, 5061)
const ERROR_CLUSTER_NODE_ALREADY_DOWN = cast(clong, 5062)
const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = cast(clong, 5063)
const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = cast(clong, 5064)
const ERROR_CLUSTER_NODE_ALREADY_MEMBER = cast(clong, 5065)
const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = cast(clong, 5066)
const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = cast(clong, 5067)
const ERROR_INVALID_OPERATION_ON_QUORUM = cast(clong, 5068)
const ERROR_DEPENDENCY_NOT_ALLOWED = cast(clong, 5069)
const ERROR_CLUSTER_NODE_PAUSED = cast(clong, 5070)
const ERROR_NODE_CANT_HOST_RESOURCE = cast(clong, 5071)
const ERROR_CLUSTER_NODE_NOT_READY = cast(clong, 5072)
const ERROR_CLUSTER_NODE_SHUTTING_DOWN = cast(clong, 5073)
const ERROR_CLUSTER_JOIN_ABORTED = cast(clong, 5074)
const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = cast(clong, 5075)
const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = cast(clong, 5076)
const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = cast(clong, 5077)
const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = cast(clong, 5078)
const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = cast(clong, 5079)
const ERROR_CLUSTER_RESNAME_NOT_FOUND = cast(clong, 5080)
const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = cast(clong, 5081)
const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = cast(clong, 5082)
const ERROR_CLUSTER_DATABASE_SEQMISMATCH = cast(clong, 5083)
const ERROR_RESMON_INVALID_STATE = cast(clong, 5084)
const ERROR_CLUSTER_GUM_NOT_LOCKER = cast(clong, 5085)
const ERROR_QUORUM_DISK_NOT_FOUND = cast(clong, 5086)
const ERROR_DATABASE_BACKUP_CORRUPT = cast(clong, 5087)
const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = cast(clong, 5088)
const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = cast(clong, 5089)
const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = cast(clong, 5890)
const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = cast(clong, 5891)
const ERROR_CLUSTER_MEMBERSHIP_HALT = cast(clong, 5892)
const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = cast(clong, 5893)
const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = cast(clong, 5894)
const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = cast(clong, 5895)
const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = cast(clong, 5896)
const ERROR_CLUSTER_PARAMETER_MISMATCH = cast(clong, 5897)
const ERROR_NODE_CANNOT_BE_CLUSTERED = cast(clong, 5898)
const ERROR_CLUSTER_WRONG_OS_VERSION = cast(clong, 5899)
const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = cast(clong, 5900)
const ERROR_CLUSCFG_ALREADY_COMMITTED = cast(clong, 5901)
const ERROR_CLUSCFG_ROLLBACK_FAILED = cast(clong, 5902)
const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = cast(clong, 5903)
const ERROR_CLUSTER_OLD_VERSION = cast(clong, 5904)
const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = cast(clong, 5905)
const ERROR_ENCRYPTION_FAILED = cast(clong, 6000)
const ERROR_DECRYPTION_FAILED = cast(clong, 6001)
const ERROR_FILE_ENCRYPTED = cast(clong, 6002)
const ERROR_NO_RECOVERY_POLICY = cast(clong, 6003)
const ERROR_NO_EFS = cast(clong, 6004)
const ERROR_WRONG_EFS = cast(clong, 6005)
const ERROR_NO_USER_KEYS = cast(clong, 6006)
const ERROR_FILE_NOT_ENCRYPTED = cast(clong, 6007)
const ERROR_NOT_EXPORT_FORMAT = cast(clong, 6008)
const ERROR_FILE_READ_ONLY = cast(clong, 6009)
const ERROR_DIR_EFS_DISALLOWED = cast(clong, 6010)
const ERROR_EFS_SERVER_NOT_TRUSTED = cast(clong, 6011)
const ERROR_BAD_RECOVERY_POLICY = cast(clong, 6012)
const ERROR_EFS_ALG_BLOB_TOO_BIG = cast(clong, 6013)
const ERROR_VOLUME_NOT_SUPPORT_EFS = cast(clong, 6014)
const ERROR_EFS_DISABLED = cast(clong, 6015)
const ERROR_EFS_VERSION_NOT_SUPPORT = cast(clong, 6016)
const ERROR_NO_BROWSER_SERVERS_FOUND = cast(clong, 6118)
const SCHED_E_SERVICE_NOT_LOCALSYSTEM = cast(clong, 6200)
const ERROR_CTX_WINSTATION_NAME_INVALID = cast(clong, 7001)
const ERROR_CTX_INVALID_PD = cast(clong, 7002)
const ERROR_CTX_PD_NOT_FOUND = cast(clong, 7003)
const ERROR_CTX_WD_NOT_FOUND = cast(clong, 7004)
const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = cast(clong, 7005)
const ERROR_CTX_SERVICE_NAME_COLLISION = cast(clong, 7006)
const ERROR_CTX_CLOSE_PENDING = cast(clong, 7007)
const ERROR_CTX_NO_OUTBUF = cast(clong, 7008)
const ERROR_CTX_MODEM_INF_NOT_FOUND = cast(clong, 7009)
const ERROR_CTX_INVALID_MODEMNAME = cast(clong, 7010)
const ERROR_CTX_MODEM_RESPONSE_ERROR = cast(clong, 7011)
const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = cast(clong, 7012)
const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = cast(clong, 7013)
const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = cast(clong, 7014)
const ERROR_CTX_MODEM_RESPONSE_BUSY = cast(clong, 7015)
const ERROR_CTX_MODEM_RESPONSE_VOICE = cast(clong, 7016)
const ERROR_CTX_TD_ERROR = cast(clong, 7017)
const ERROR_CTX_WINSTATION_NOT_FOUND = cast(clong, 7022)
const ERROR_CTX_WINSTATION_ALREADY_EXISTS = cast(clong, 7023)
const ERROR_CTX_WINSTATION_BUSY = cast(clong, 7024)
const ERROR_CTX_BAD_VIDEO_MODE = cast(clong, 7025)
const ERROR_CTX_GRAPHICS_INVALID = cast(clong, 7035)
const ERROR_CTX_LOGON_DISABLED = cast(clong, 7037)
const ERROR_CTX_NOT_CONSOLE = cast(clong, 7038)
const ERROR_CTX_CLIENT_QUERY_TIMEOUT = cast(clong, 7040)
const ERROR_CTX_CONSOLE_DISCONNECT = cast(clong, 7041)
const ERROR_CTX_CONSOLE_CONNECT = cast(clong, 7042)
const ERROR_CTX_SHADOW_DENIED = cast(clong, 7044)
const ERROR_CTX_WINSTATION_ACCESS_DENIED = cast(clong, 7045)
const ERROR_CTX_INVALID_WD = cast(clong, 7049)
const ERROR_CTX_SHADOW_INVALID = cast(clong, 7050)
const ERROR_CTX_SHADOW_DISABLED = cast(clong, 7051)
const ERROR_CTX_CLIENT_LICENSE_IN_USE = cast(clong, 7052)
const ERROR_CTX_CLIENT_LICENSE_NOT_SET = cast(clong, 7053)
const ERROR_CTX_LICENSE_NOT_AVAILABLE = cast(clong, 7054)
const ERROR_CTX_LICENSE_CLIENT_INVALID = cast(clong, 7055)
const ERROR_CTX_LICENSE_EXPIRED = cast(clong, 7056)
const ERROR_CTX_SHADOW_NOT_RUNNING = cast(clong, 7057)
const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = cast(clong, 7058)
const ERROR_ACTIVATION_COUNT_EXCEEDED = cast(clong, 7059)
const FRS_ERR_INVALID_API_SEQUENCE = cast(clong, 8001)
const FRS_ERR_STARTING_SERVICE = cast(clong, 8002)
const FRS_ERR_STOPPING_SERVICE = cast(clong, 8003)
const FRS_ERR_INTERNAL_API = cast(clong, 8004)
const FRS_ERR_INTERNAL = cast(clong, 8005)
const FRS_ERR_SERVICE_COMM = cast(clong, 8006)
const FRS_ERR_INSUFFICIENT_PRIV = cast(clong, 8007)
const FRS_ERR_AUTHENTICATION = cast(clong, 8008)
const FRS_ERR_PARENT_INSUFFICIENT_PRIV = cast(clong, 8009)
const FRS_ERR_PARENT_AUTHENTICATION = cast(clong, 8010)
const FRS_ERR_CHILD_TO_PARENT_COMM = cast(clong, 8011)
const FRS_ERR_PARENT_TO_CHILD_COMM = cast(clong, 8012)
const FRS_ERR_SYSVOL_POPULATE = cast(clong, 8013)
const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = cast(clong, 8014)
const FRS_ERR_SYSVOL_IS_BUSY = cast(clong, 8015)
const FRS_ERR_SYSVOL_DEMOTE = cast(clong, 8016)
const FRS_ERR_INVALID_SERVICE_PARAMETER = cast(clong, 8017)
const DS_S_SUCCESS = NO_ERROR
const ERROR_DS_NOT_INSTALLED = cast(clong, 8200)
const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = cast(clong, 8201)
const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = cast(clong, 8202)
const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = cast(clong, 8203)
const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = cast(clong, 8204)
const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = cast(clong, 8205)
const ERROR_DS_BUSY = cast(clong, 8206)
const ERROR_DS_UNAVAILABLE = cast(clong, 8207)
const ERROR_DS_NO_RIDS_ALLOCATED = cast(clong, 8208)
const ERROR_DS_NO_MORE_RIDS = cast(clong, 8209)
const ERROR_DS_INCORRECT_ROLE_OWNER = cast(clong, 8210)
const ERROR_DS_RIDMGR_INIT_ERROR = cast(clong, 8211)
const ERROR_DS_OBJ_CLASS_VIOLATION = cast(clong, 8212)
const ERROR_DS_CANT_ON_NON_LEAF = cast(clong, 8213)
const ERROR_DS_CANT_ON_RDN = cast(clong, 8214)
const ERROR_DS_CANT_MOD_OBJ_CLASS = cast(clong, 8215)
const ERROR_DS_CROSS_DOM_MOVE_ERROR = cast(clong, 8216)
const ERROR_DS_GC_NOT_AVAILABLE = cast(clong, 8217)
const ERROR_SHARED_POLICY = cast(clong, 8218)
const ERROR_POLICY_OBJECT_NOT_FOUND = cast(clong, 8219)
const ERROR_POLICY_ONLY_IN_DS = cast(clong, 8220)
const ERROR_PROMOTION_ACTIVE = cast(clong, 8221)
const ERROR_NO_PROMOTION_ACTIVE = cast(clong, 8222)
const ERROR_DS_OPERATIONS_ERROR = cast(clong, 8224)
const ERROR_DS_PROTOCOL_ERROR = cast(clong, 8225)
const ERROR_DS_TIMELIMIT_EXCEEDED = cast(clong, 8226)
const ERROR_DS_SIZELIMIT_EXCEEDED = cast(clong, 8227)
const ERROR_DS_ADMIN_LIMIT_EXCEEDED = cast(clong, 8228)
const ERROR_DS_COMPARE_FALSE = cast(clong, 8229)
const ERROR_DS_COMPARE_TRUE = cast(clong, 8230)
const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = cast(clong, 8231)
const ERROR_DS_STRONG_AUTH_REQUIRED = cast(clong, 8232)
const ERROR_DS_INAPPROPRIATE_AUTH = cast(clong, 8233)
const ERROR_DS_AUTH_UNKNOWN = cast(clong, 8234)
const ERROR_DS_REFERRAL = cast(clong, 8235)
const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = cast(clong, 8236)
const ERROR_DS_CONFIDENTIALITY_REQUIRED = cast(clong, 8237)
const ERROR_DS_INAPPROPRIATE_MATCHING = cast(clong, 8238)
const ERROR_DS_CONSTRAINT_VIOLATION = cast(clong, 8239)
const ERROR_DS_NO_SUCH_OBJECT = cast(clong, 8240)
const ERROR_DS_ALIAS_PROBLEM = cast(clong, 8241)
const ERROR_DS_INVALID_DN_SYNTAX = cast(clong, 8242)
const ERROR_DS_IS_LEAF = cast(clong, 8243)
const ERROR_DS_ALIAS_DEREF_PROBLEM = cast(clong, 8244)
const ERROR_DS_UNWILLING_TO_PERFORM = cast(clong, 8245)
const ERROR_DS_LOOP_DETECT = cast(clong, 8246)
const ERROR_DS_NAMING_VIOLATION = cast(clong, 8247)
const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = cast(clong, 8248)
const ERROR_DS_AFFECTS_MULTIPLE_DSAS = cast(clong, 8249)
const ERROR_DS_SERVER_DOWN = cast(clong, 8250)
const ERROR_DS_LOCAL_ERROR = cast(clong, 8251)
const ERROR_DS_ENCODING_ERROR = cast(clong, 8252)
const ERROR_DS_DECODING_ERROR = cast(clong, 8253)
const ERROR_DS_FILTER_UNKNOWN = cast(clong, 8254)
const ERROR_DS_PARAM_ERROR = cast(clong, 8255)
const ERROR_DS_NOT_SUPPORTED = cast(clong, 8256)
const ERROR_DS_NO_RESULTS_RETURNED = cast(clong, 8257)
const ERROR_DS_CONTROL_NOT_FOUND = cast(clong, 8258)
const ERROR_DS_CLIENT_LOOP = cast(clong, 8259)
const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = cast(clong, 8260)
const ERROR_DS_SORT_CONTROL_MISSING = cast(clong, 8261)
const ERROR_DS_OFFSET_RANGE_ERROR = cast(clong, 8262)
const ERROR_DS_ROOT_MUST_BE_NC = cast(clong, 8301)
const ERROR_DS_ADD_REPLICA_INHIBITED = cast(clong, 8302)
const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = cast(clong, 8303)
const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = cast(clong, 8304)
const ERROR_DS_OBJ_STRING_NAME_EXISTS = cast(clong, 8305)
const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = cast(clong, 8306)
const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = cast(clong, 8307)
const ERROR_DS_NO_REQUESTED_ATTS_FOUND = cast(clong, 8308)
const ERROR_DS_USER_BUFFER_TO_SMALL = cast(clong, 8309)
const ERROR_DS_ATT_IS_NOT_ON_OBJ = cast(clong, 8310)
const ERROR_DS_ILLEGAL_MOD_OPERATION = cast(clong, 8311)
const ERROR_DS_OBJ_TOO_LARGE = cast(clong, 8312)
const ERROR_DS_BAD_INSTANCE_TYPE = cast(clong, 8313)
const ERROR_DS_MASTERDSA_REQUIRED = cast(clong, 8314)
const ERROR_DS_OBJECT_CLASS_REQUIRED = cast(clong, 8315)
const ERROR_DS_MISSING_REQUIRED_ATT = cast(clong, 8316)
const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = cast(clong, 8317)
const ERROR_DS_ATT_ALREADY_EXISTS = cast(clong, 8318)
const ERROR_DS_CANT_ADD_ATT_VALUES = cast(clong, 8320)
const ERROR_DS_SINGLE_VALUE_CONSTRAINT = cast(clong, 8321)
const ERROR_DS_RANGE_CONSTRAINT = cast(clong, 8322)
const ERROR_DS_ATT_VAL_ALREADY_EXISTS = cast(clong, 8323)
const ERROR_DS_CANT_REM_MISSING_ATT = cast(clong, 8324)
const ERROR_DS_CANT_REM_MISSING_ATT_VAL = cast(clong, 8325)
const ERROR_DS_ROOT_CANT_BE_SUBREF = cast(clong, 8326)
const ERROR_DS_NO_CHAINING = cast(clong, 8327)
const ERROR_DS_NO_CHAINED_EVAL = cast(clong, 8328)
const ERROR_DS_NO_PARENT_OBJECT = cast(clong, 8329)
const ERROR_DS_PARENT_IS_AN_ALIAS = cast(clong, 8330)
const ERROR_DS_CANT_MIX_MASTER_AND_REPS = cast(clong, 8331)
const ERROR_DS_CHILDREN_EXIST = cast(clong, 8332)
const ERROR_DS_OBJ_NOT_FOUND = cast(clong, 8333)
const ERROR_DS_ALIASED_OBJ_MISSING = cast(clong, 8334)
const ERROR_DS_BAD_NAME_SYNTAX = cast(clong, 8335)
const ERROR_DS_ALIAS_POINTS_TO_ALIAS = cast(clong, 8336)
const ERROR_DS_CANT_DEREF_ALIAS = cast(clong, 8337)
const ERROR_DS_OUT_OF_SCOPE = cast(clong, 8338)
const ERROR_DS_OBJECT_BEING_REMOVED = cast(clong, 8339)
const ERROR_DS_CANT_DELETE_DSA_OBJ = cast(clong, 8340)
const ERROR_DS_GENERIC_ERROR = cast(clong, 8341)
const ERROR_DS_DSA_MUST_BE_INT_MASTER = cast(clong, 8342)
const ERROR_DS_CLASS_NOT_DSA = cast(clong, 8343)
const ERROR_DS_INSUFF_ACCESS_RIGHTS = cast(clong, 8344)
const ERROR_DS_ILLEGAL_SUPERIOR = cast(clong, 8345)
const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = cast(clong, 8346)
const ERROR_DS_NAME_TOO_MANY_PARTS = cast(clong, 8347)
const ERROR_DS_NAME_TOO_LONG = cast(clong, 8348)
const ERROR_DS_NAME_VALUE_TOO_LONG = cast(clong, 8349)
const ERROR_DS_NAME_UNPARSEABLE = cast(clong, 8350)
const ERROR_DS_NAME_TYPE_UNKNOWN = cast(clong, 8351)
const ERROR_DS_NOT_AN_OBJECT = cast(clong, 8352)
const ERROR_DS_SEC_DESC_TOO_SHORT = cast(clong, 8353)
const ERROR_DS_SEC_DESC_INVALID = cast(clong, 8354)
const ERROR_DS_NO_DELETED_NAME = cast(clong, 8355)
const ERROR_DS_SUBREF_MUST_HAVE_PARENT = cast(clong, 8356)
const ERROR_DS_NCNAME_MUST_BE_NC = cast(clong, 8357)
const ERROR_DS_CANT_ADD_SYSTEM_ONLY = cast(clong, 8358)
const ERROR_DS_CLASS_MUST_BE_CONCRETE = cast(clong, 8359)
const ERROR_DS_INVALID_DMD = cast(clong, 8360)
const ERROR_DS_OBJ_GUID_EXISTS = cast(clong, 8361)
const ERROR_DS_NOT_ON_BACKLINK = cast(clong, 8362)
const ERROR_DS_NO_CROSSREF_FOR_NC = cast(clong, 8363)
const ERROR_DS_SHUTTING_DOWN = cast(clong, 8364)
const ERROR_DS_UNKNOWN_OPERATION = cast(clong, 8365)
const ERROR_DS_INVALID_ROLE_OWNER = cast(clong, 8366)
const ERROR_DS_COULDNT_CONTACT_FSMO = cast(clong, 8367)
const ERROR_DS_CROSS_NC_DN_RENAME = cast(clong, 8368)
const ERROR_DS_CANT_MOD_SYSTEM_ONLY = cast(clong, 8369)
const ERROR_DS_REPLICATOR_ONLY = cast(clong, 8370)
const ERROR_DS_OBJ_CLASS_NOT_DEFINED = cast(clong, 8371)
const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = cast(clong, 8372)
const ERROR_DS_NAME_REFERENCE_INVALID = cast(clong, 8373)
const ERROR_DS_CROSS_REF_EXISTS = cast(clong, 8374)
const ERROR_DS_CANT_DEL_MASTER_CROSSREF = cast(clong, 8375)
const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = cast(clong, 8376)
const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = cast(clong, 8377)
const ERROR_DS_DUP_RDN = cast(clong, 8378)
const ERROR_DS_DUP_OID = cast(clong, 8379)
const ERROR_DS_DUP_MAPI_ID = cast(clong, 8380)
const ERROR_DS_DUP_SCHEMA_ID_GUID = cast(clong, 8381)
const ERROR_DS_DUP_LDAP_DISPLAY_NAME = cast(clong, 8382)
const ERROR_DS_SEMANTIC_ATT_TEST = cast(clong, 8383)
const ERROR_DS_SYNTAX_MISMATCH = cast(clong, 8384)
const ERROR_DS_EXISTS_IN_MUST_HAVE = cast(clong, 8385)
const ERROR_DS_EXISTS_IN_MAY_HAVE = cast(clong, 8386)
const ERROR_DS_NONEXISTENT_MAY_HAVE = cast(clong, 8387)
const ERROR_DS_NONEXISTENT_MUST_HAVE = cast(clong, 8388)
const ERROR_DS_AUX_CLS_TEST_FAIL = cast(clong, 8389)
const ERROR_DS_NONEXISTENT_POSS_SUP = cast(clong, 8390)
const ERROR_DS_SUB_CLS_TEST_FAIL = cast(clong, 8391)
const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = cast(clong, 8392)
const ERROR_DS_EXISTS_IN_AUX_CLS = cast(clong, 8393)
const ERROR_DS_EXISTS_IN_SUB_CLS = cast(clong, 8394)
const ERROR_DS_EXISTS_IN_POSS_SUP = cast(clong, 8395)
const ERROR_DS_RECALCSCHEMA_FAILED = cast(clong, 8396)
const ERROR_DS_TREE_DELETE_NOT_FINISHED = cast(clong, 8397)
const ERROR_DS_CANT_DELETE = cast(clong, 8398)
const ERROR_DS_ATT_SCHEMA_REQ_ID = cast(clong, 8399)
const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = cast(clong, 8400)
const ERROR_DS_CANT_CACHE_ATT = cast(clong, 8401)
const ERROR_DS_CANT_CACHE_CLASS = cast(clong, 8402)
const ERROR_DS_CANT_REMOVE_ATT_CACHE = cast(clong, 8403)
const ERROR_DS_CANT_REMOVE_CLASS_CACHE = cast(clong, 8404)
const ERROR_DS_CANT_RETRIEVE_DN = cast(clong, 8405)
const ERROR_DS_MISSING_SUPREF = cast(clong, 8406)
const ERROR_DS_CANT_RETRIEVE_INSTANCE = cast(clong, 8407)
const ERROR_DS_CODE_INCONSISTENCY = cast(clong, 8408)
const ERROR_DS_DATABASE_ERROR = cast(clong, 8409)
const ERROR_DS_GOVERNSID_MISSING = cast(clong, 8410)
const ERROR_DS_MISSING_EXPECTED_ATT = cast(clong, 8411)
const ERROR_DS_NCNAME_MISSING_CR_REF = cast(clong, 8412)
const ERROR_DS_SECURITY_CHECKING_ERROR = cast(clong, 8413)
const ERROR_DS_SCHEMA_NOT_LOADED = cast(clong, 8414)
const ERROR_DS_SCHEMA_ALLOC_FAILED = cast(clong, 8415)
const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = cast(clong, 8416)
const ERROR_DS_GCVERIFY_ERROR = cast(clong, 8417)
const ERROR_DS_DRA_SCHEMA_MISMATCH = cast(clong, 8418)
const ERROR_DS_CANT_FIND_DSA_OBJ = cast(clong, 8419)
const ERROR_DS_CANT_FIND_EXPECTED_NC = cast(clong, 8420)
const ERROR_DS_CANT_FIND_NC_IN_CACHE = cast(clong, 8421)
const ERROR_DS_CANT_RETRIEVE_CHILD = cast(clong, 8422)
const ERROR_DS_SECURITY_ILLEGAL_MODIFY = cast(clong, 8423)
const ERROR_DS_CANT_REPLACE_HIDDEN_REC = cast(clong, 8424)
const ERROR_DS_BAD_HIERARCHY_FILE = cast(clong, 8425)
const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = cast(clong, 8426)
const ERROR_DS_CONFIG_PARAM_MISSING = cast(clong, 8427)
const ERROR_DS_COUNTING_AB_INDICES_FAILED = cast(clong, 8428)
const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = cast(clong, 8429)
const ERROR_DS_INTERNAL_FAILURE = cast(clong, 8430)
const ERROR_DS_UNKNOWN_ERROR = cast(clong, 8431)
const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = cast(clong, 8432)
const ERROR_DS_REFUSING_FSMO_ROLES = cast(clong, 8433)
const ERROR_DS_MISSING_FSMO_SETTINGS = cast(clong, 8434)
const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = cast(clong, 8435)
const ERROR_DS_DRA_GENERIC = cast(clong, 8436)
const ERROR_DS_DRA_INVALID_PARAMETER = cast(clong, 8437)
const ERROR_DS_DRA_BUSY = cast(clong, 8438)
const ERROR_DS_DRA_BAD_DN = cast(clong, 8439)
const ERROR_DS_DRA_BAD_NC = cast(clong, 8440)
const ERROR_DS_DRA_DN_EXISTS = cast(clong, 8441)
const ERROR_DS_DRA_INTERNAL_ERROR = cast(clong, 8442)
const ERROR_DS_DRA_INCONSISTENT_DIT = cast(clong, 8443)
const ERROR_DS_DRA_CONNECTION_FAILED = cast(clong, 8444)
const ERROR_DS_DRA_BAD_INSTANCE_TYPE = cast(clong, 8445)
const ERROR_DS_DRA_OUT_OF_MEM = cast(clong, 8446)
const ERROR_DS_DRA_MAIL_PROBLEM = cast(clong, 8447)
const ERROR_DS_DRA_REF_ALREADY_EXISTS = cast(clong, 8448)
const ERROR_DS_DRA_REF_NOT_FOUND = cast(clong, 8449)
const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = cast(clong, 8450)
const ERROR_DS_DRA_DB_ERROR = cast(clong, 8451)
const ERROR_DS_DRA_NO_REPLICA = cast(clong, 8452)
const ERROR_DS_DRA_ACCESS_DENIED = cast(clong, 8453)
const ERROR_DS_DRA_NOT_SUPPORTED = cast(clong, 8454)
const ERROR_DS_DRA_RPC_CANCELLED = cast(clong, 8455)
const ERROR_DS_DRA_SOURCE_DISABLED = cast(clong, 8456)
const ERROR_DS_DRA_SINK_DISABLED = cast(clong, 8457)
const ERROR_DS_DRA_NAME_COLLISION = cast(clong, 8458)
const ERROR_DS_DRA_SOURCE_REINSTALLED = cast(clong, 8459)
const ERROR_DS_DRA_MISSING_PARENT = cast(clong, 8460)
const ERROR_DS_DRA_PREEMPTED = cast(clong, 8461)
const ERROR_DS_DRA_ABANDON_SYNC = cast(clong, 8462)
const ERROR_DS_DRA_SHUTDOWN = cast(clong, 8463)
const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = cast(clong, 8464)
const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = cast(clong, 8465)
const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = cast(clong, 8466)
const ERROR_DS_INSTALL_SCHEMA_MISMATCH = cast(clong, 8467)
const ERROR_DS_DUP_LINK_ID = cast(clong, 8468)
const ERROR_DS_NAME_ERROR_RESOLVING = cast(clong, 8469)
const ERROR_DS_NAME_ERROR_NOT_FOUND = cast(clong, 8470)
const ERROR_DS_NAME_ERROR_NOT_UNIQUE = cast(clong, 8471)
const ERROR_DS_NAME_ERROR_NO_MAPPING = cast(clong, 8472)
const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = cast(clong, 8473)
const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = cast(clong, 8474)
const ERROR_DS_CONSTRUCTED_ATT_MOD = cast(clong, 8475)
const ERROR_DS_WRONG_OM_OBJ_CLASS = cast(clong, 8476)
const ERROR_DS_DRA_REPL_PENDING = cast(clong, 8477)
const ERROR_DS_DS_REQUIRED = cast(clong, 8478)
const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = cast(clong, 8479)
const ERROR_DS_NON_BASE_SEARCH = cast(clong, 8480)
const ERROR_DS_CANT_RETRIEVE_ATTS = cast(clong, 8481)
const ERROR_DS_BACKLINK_WITHOUT_LINK = cast(clong, 8482)
const ERROR_DS_EPOCH_MISMATCH = cast(clong, 8483)
const ERROR_DS_SRC_NAME_MISMATCH = cast(clong, 8484)
const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = cast(clong, 8485)
const ERROR_DS_DST_NC_MISMATCH = cast(clong, 8486)
const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = cast(clong, 8487)
const ERROR_DS_SRC_GUID_MISMATCH = cast(clong, 8488)
const ERROR_DS_CANT_MOVE_DELETED_OBJECT = cast(clong, 8489)
const ERROR_DS_PDC_OPERATION_IN_PROGRESS = cast(clong, 8490)
const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = cast(clong, 8491)
const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = cast(clong, 8492)
const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = cast(clong, 8493)
const ERROR_DS_NC_MUST_HAVE_NC_PARENT = cast(clong, 8494)
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = cast(clong, 8495)
const ERROR_DS_DST_DOMAIN_NOT_NATIVE = cast(clong, 8496)
const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = cast(clong, 8497)
const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = cast(clong, 8498)
const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = cast(clong, 8499)
const ERROR_DS_INVALID_SEARCH_FLAG = cast(clong, 8500)
const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = cast(clong, 8501)
const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = cast(clong, 8502)
const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = cast(clong, 8503)
const ERROR_DS_SAM_INIT_FAILURE = cast(clong, 8504)
const ERROR_DS_SENSITIVE_GROUP_VIOLATION = cast(clong, 8505)
const ERROR_DS_CANT_MOD_PRIMARYGROUPID = cast(clong, 8506)
const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = cast(clong, 8507)
const ERROR_DS_NONSAFE_SCHEMA_CHANGE = cast(clong, 8508)
const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = cast(clong, 8509)
const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = cast(clong, 8510)
const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = cast(clong, 8511)
const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = cast(clong, 8512)
const ERROR_DS_INVALID_GROUP_TYPE = cast(clong, 8513)
const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = cast(clong, 8514)
const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = cast(clong, 8515)
const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = cast(clong, 8516)
const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = cast(clong, 8517)
const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = cast(clong, 8518)
const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = cast(clong, 8519)
const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = cast(clong, 8520)
const ERROR_DS_HAVE_PRIMARY_MEMBERS = cast(clong, 8521)
const ERROR_DS_STRING_SD_CONVERSION_FAILED = cast(clong, 8522)
const ERROR_DS_NAMING_MASTER_GC = cast(clong, 8523)
const ERROR_DS_DNS_LOOKUP_FAILURE = cast(clong, 8524)
const ERROR_DS_COULDNT_UPDATE_SPNS = cast(clong, 8525)
const ERROR_DS_CANT_RETRIEVE_SD = cast(clong, 8526)
const ERROR_DS_KEY_NOT_UNIQUE = cast(clong, 8527)
const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = cast(clong, 8528)
const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = cast(clong, 8529)
const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = cast(clong, 8530)
const ERROR_DS_CANT_START = cast(clong, 8531)
const ERROR_DS_INIT_FAILURE = cast(clong, 8532)
const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = cast(clong, 8533)
const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = cast(clong, 8534)
const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = cast(clong, 8535)
const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = cast(clong, 8536)
const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = cast(clong, 8537)
const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = cast(clong, 8538)
const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = cast(clong, 8539)
const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = cast(clong, 8540)
const ERROR_SAM_INIT_FAILURE = cast(clong, 8541)
const ERROR_DS_DRA_SCHEMA_INFO_SHIP = cast(clong, 8542)
const ERROR_DS_DRA_SCHEMA_CONFLICT = cast(clong, 8543)
const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = cast(clong, 8544)
const ERROR_DS_DRA_OBJ_NC_MISMATCH = cast(clong, 8545)
const ERROR_DS_NC_STILL_HAS_DSAS = cast(clong, 8546)
const ERROR_DS_GC_REQUIRED = cast(clong, 8547)
const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = cast(clong, 8548)
const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = cast(clong, 8549)
const ERROR_DS_CANT_ADD_TO_GC = cast(clong, 8550)
const ERROR_DS_NO_CHECKPOINT_WITH_PDC = cast(clong, 8551)
const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = cast(clong, 8552)
const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = cast(clong, 8553)
const ERROR_DS_INVALID_NAME_FOR_SPN = cast(clong, 8554)
const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = cast(clong, 8555)
const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = cast(clong, 8556)
const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = cast(clong, 8557)
const ERROR_DS_MUST_BE_RUN_ON_DST_DC = cast(clong, 8558)
const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = cast(clong, 8559)
const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = cast(clong, 8560)
const ERROR_DS_INIT_FAILURE_CONSOLE = cast(clong, 8561)
const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = cast(clong, 8562)
const ERROR_DS_FOREST_VERSION_TOO_HIGH = cast(clong, 8563)
const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = cast(clong, 8564)
const ERROR_DS_FOREST_VERSION_TOO_LOW = cast(clong, 8565)
const ERROR_DS_DOMAIN_VERSION_TOO_LOW = cast(clong, 8566)
const ERROR_DS_INCOMPATIBLE_VERSION = cast(clong, 8567)
const ERROR_DS_LOW_DSA_VERSION = cast(clong, 8568)
const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = cast(clong, 8569)
const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = cast(clong, 8570)
const ERROR_DS_NAME_NOT_UNIQUE = cast(clong, 8571)
const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = cast(clong, 8572)
const ERROR_DS_OUT_OF_VERSION_STORE = cast(clong, 8573)
const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = cast(clong, 8574)
const ERROR_DS_NO_REF_DOMAIN = cast(clong, 8575)
const ERROR_DS_RESERVED_LINK_ID = cast(clong, 8576)
const ERROR_DS_LINK_ID_NOT_AVAILABLE = cast(clong, 8577)
const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = cast(clong, 8578)
const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = cast(clong, 8579)
const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = cast(clong, 8580)
const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = cast(clong, 8581)
const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = cast(clong, 8582)
const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = cast(clong, 8583)
const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = cast(clong, 8584)
const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = cast(clong, 8585)
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = cast(clong, 8586)
const ERROR_DS_THREAD_LIMIT_EXCEEDED = cast(clong, 8587)
const ERROR_DS_NOT_CLOSEST = cast(clong, 8588)
const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = cast(clong, 8589)
const ERROR_DS_SINGLE_USER_MODE_FAILED = cast(clong, 8590)
const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = cast(clong, 8591)
const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = cast(clong, 8592)
const ERROR_DS_DIFFERENT_REPL_EPOCHS = cast(clong, 8593)
const ERROR_DS_DRS_EXTENSIONS_CHANGED = cast(clong, 8594)
const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = cast(clong, 8595)
const ERROR_DS_NO_MSDS_INTID = cast(clong, 8596)
const ERROR_DS_DUP_MSDS_INTID = cast(clong, 8597)
const ERROR_DS_EXISTS_IN_RDNATTID = cast(clong, 8598)
const ERROR_DS_AUTHORIZATION_FAILED = cast(clong, 8599)
const ERROR_DS_INVALID_SCRIPT = cast(clong, 8600)
const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = cast(clong, 8601)
const ERROR_DS_CROSS_REF_BUSY = cast(clong, 8602)
const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = cast(clong, 8603)
const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = cast(clong, 8604)
const ERROR_DS_DUPLICATE_ID_FOUND = cast(clong, 8605)
const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = cast(clong, 8606)
const ERROR_DS_GROUP_CONVERSION_ERROR = cast(clong, 8607)
const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = cast(clong, 8608)
const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = cast(clong, 8609)
const ERROR_DS_ROLE_NOT_VERIFIED = cast(clong, 8610)
const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = cast(clong, 8611)
const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = cast(clong, 8612)
const ERROR_DS_EXISTING_AD_CHILD_NC = cast(clong, 8613)
const ERROR_DS_REPL_LIFETIME_EXCEEDED = cast(clong, 8614)
const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = cast(clong, 8615)
const ERROR_DS_LDAP_SEND_QUEUE_FULL = cast(clong, 8616)
const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = cast(clong, 8617)
const DNS_ERROR_RESPONSE_CODES_BASE = 9000
const DNS_ERROR_RCODE_NO_ERROR = NO_ERROR
const DNS_ERROR_MASK = &h00002328
const DNS_ERROR_RCODE_FORMAT_ERROR = cast(clong, 9001)
const DNS_ERROR_RCODE_SERVER_FAILURE = cast(clong, 9002)
const DNS_ERROR_RCODE_NAME_ERROR = cast(clong, 9003)
const DNS_ERROR_RCODE_NOT_IMPLEMENTED = cast(clong, 9004)
const DNS_ERROR_RCODE_REFUSED = cast(clong, 9005)
const DNS_ERROR_RCODE_YXDOMAIN = cast(clong, 9006)
const DNS_ERROR_RCODE_YXRRSET = cast(clong, 9007)
const DNS_ERROR_RCODE_NXRRSET = cast(clong, 9008)
const DNS_ERROR_RCODE_NOTAUTH = cast(clong, 9009)
const DNS_ERROR_RCODE_NOTZONE = cast(clong, 9010)
const DNS_ERROR_RCODE_BADSIG = cast(clong, 9016)
const DNS_ERROR_RCODE_BADKEY = cast(clong, 9017)
const DNS_ERROR_RCODE_BADTIME = cast(clong, 9018)
const DNS_ERROR_RCODE_LAST = DNS_ERROR_RCODE_BADTIME
const DNS_ERROR_PACKET_FMT_BASE = 9500
const DNS_INFO_NO_RECORDS = cast(clong, 9501)
const DNS_ERROR_BAD_PACKET = cast(clong, 9502)
const DNS_ERROR_NO_PACKET = cast(clong, 9503)
const DNS_ERROR_RCODE = cast(clong, 9504)
const DNS_ERROR_UNSECURE_PACKET = cast(clong, 9505)
const DNS_STATUS_PACKET_UNSECURE = DNS_ERROR_UNSECURE_PACKET
const DNS_ERROR_NO_MEMORY = ERROR_OUTOFMEMORY
const DNS_ERROR_INVALID_NAME = ERROR_INVALID_NAME
const DNS_ERROR_INVALID_DATA = ERROR_INVALID_DATA
const DNS_ERROR_GENERAL_API_BASE = 9550
const DNS_ERROR_INVALID_TYPE = cast(clong, 9551)
const DNS_ERROR_INVALID_IP_ADDRESS = cast(clong, 9552)
const DNS_ERROR_INVALID_PROPERTY = cast(clong, 9553)
const DNS_ERROR_TRY_AGAIN_LATER = cast(clong, 9554)
const DNS_ERROR_NOT_UNIQUE = cast(clong, 9555)
const DNS_ERROR_NON_RFC_NAME = cast(clong, 9556)
const DNS_STATUS_FQDN = cast(clong, 9557)
const DNS_STATUS_DOTTED_NAME = cast(clong, 9558)
const DNS_STATUS_SINGLE_PART_NAME = cast(clong, 9559)
const DNS_ERROR_INVALID_NAME_CHAR = cast(clong, 9560)
const DNS_ERROR_NUMERIC_NAME = cast(clong, 9561)
const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = cast(clong, 9562)
const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = cast(clong, 9563)
const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = cast(clong, 9564)
const DNS_ERROR_INCONSISTENT_ROOT_HINTS = cast(clong, 9565)
const DNS_ERROR_ZONE_BASE = 9600
const DNS_ERROR_ZONE_DOES_NOT_EXIST = cast(clong, 9601)
const DNS_ERROR_NO_ZONE_INFO = cast(clong, 9602)
const DNS_ERROR_INVALID_ZONE_OPERATION = cast(clong, 9603)
const DNS_ERROR_ZONE_CONFIGURATION_ERROR = cast(clong, 9604)
const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = cast(clong, 9605)
const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = cast(clong, 9606)
const DNS_ERROR_ZONE_LOCKED = cast(clong, 9607)
const DNS_ERROR_ZONE_CREATION_FAILED = cast(clong, 9608)
const DNS_ERROR_ZONE_ALREADY_EXISTS = cast(clong, 9609)
const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = cast(clong, 9610)
const DNS_ERROR_INVALID_ZONE_TYPE = cast(clong, 9611)
const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = cast(clong, 9612)
const DNS_ERROR_ZONE_NOT_SECONDARY = cast(clong, 9613)
const DNS_ERROR_NEED_SECONDARY_ADDRESSES = cast(clong, 9614)
const DNS_ERROR_WINS_INIT_FAILED = cast(clong, 9615)
const DNS_ERROR_NEED_WINS_SERVERS = cast(clong, 9616)
const DNS_ERROR_NBSTAT_INIT_FAILED = cast(clong, 9617)
const DNS_ERROR_SOA_DELETE_INVALID = cast(clong, 9618)
const DNS_ERROR_FORWARDER_ALREADY_EXISTS = cast(clong, 9619)
const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = cast(clong, 9620)
const DNS_ERROR_ZONE_IS_SHUTDOWN = cast(clong, 9621)
const DNS_ERROR_DATAFILE_BASE = 9650
const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = cast(clong, 9651)
const DNS_ERROR_INVALID_DATAFILE_NAME = cast(clong, 9652)
const DNS_ERROR_DATAFILE_OPEN_FAILURE = cast(clong, 9653)
const DNS_ERROR_FILE_WRITEBACK_FAILED = cast(clong, 9654)
const DNS_ERROR_DATAFILE_PARSING = cast(clong, 9655)
const DNS_ERROR_DATABASE_BASE = 9700
const DNS_ERROR_RECORD_DOES_NOT_EXIST = cast(clong, 9701)
const DNS_ERROR_RECORD_FORMAT = cast(clong, 9702)
const DNS_ERROR_NODE_CREATION_FAILED = cast(clong, 9703)
const DNS_ERROR_UNKNOWN_RECORD_TYPE = cast(clong, 9704)
const DNS_ERROR_RECORD_TIMED_OUT = cast(clong, 9705)
const DNS_ERROR_NAME_NOT_IN_ZONE = cast(clong, 9706)
const DNS_ERROR_CNAME_LOOP = cast(clong, 9707)
const DNS_ERROR_NODE_IS_CNAME = cast(clong, 9708)
const DNS_ERROR_CNAME_COLLISION = cast(clong, 9709)
const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = cast(clong, 9710)
const DNS_ERROR_RECORD_ALREADY_EXISTS = cast(clong, 9711)
const DNS_ERROR_SECONDARY_DATA = cast(clong, 9712)
const DNS_ERROR_NO_CREATE_CACHE_DATA = cast(clong, 9713)
const DNS_ERROR_NAME_DOES_NOT_EXIST = cast(clong, 9714)
const DNS_WARNING_PTR_CREATE_FAILED = cast(clong, 9715)
const DNS_WARNING_DOMAIN_UNDELETED = cast(clong, 9716)
const DNS_ERROR_DS_UNAVAILABLE = cast(clong, 9717)
const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = cast(clong, 9718)
const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = cast(clong, 9719)
const DNS_ERROR_OPERATION_BASE = 9750
const DNS_INFO_AXFR_COMPLETE = cast(clong, 9751)
const DNS_ERROR_AXFR = cast(clong, 9752)
const DNS_INFO_ADDED_LOCAL_WINS = cast(clong, 9753)
const DNS_ERROR_SECURE_BASE = 9800
const DNS_STATUS_CONTINUE_NEEDED = cast(clong, 9801)
const DNS_ERROR_SETUP_BASE = 9850
const DNS_ERROR_NO_TCPIP = cast(clong, 9851)
const DNS_ERROR_NO_DNS_SERVERS = cast(clong, 9852)
const DNS_ERROR_DP_BASE = 9900
const DNS_ERROR_DP_DOES_NOT_EXIST = cast(clong, 9901)
const DNS_ERROR_DP_ALREADY_EXISTS = cast(clong, 9902)
const DNS_ERROR_DP_NOT_ENLISTED = cast(clong, 9903)
const DNS_ERROR_DP_ALREADY_ENLISTED = cast(clong, 9904)
const DNS_ERROR_DP_NOT_AVAILABLE = cast(clong, 9905)
const DNS_ERROR_DP_FSMO_ERROR = cast(clong, 9906)
const WSABASEERR = 10000
const WSAEINTR = WSABASEERR + 4
const WSAEBADF = WSABASEERR + 9
const WSAEACCES = WSABASEERR + 13
const WSAEFAULT = WSABASEERR + 14
const WSAEINVAL = WSABASEERR + 22
const WSAEMFILE = WSABASEERR + 24
const WSAEWOULDBLOCK = WSABASEERR + 35
const WSAEINPROGRESS = WSABASEERR + 36
const WSAEALREADY = WSABASEERR + 37
const WSAENOTSOCK = WSABASEERR + 38
const WSAEDESTADDRREQ = WSABASEERR + 39
const WSAEMSGSIZE = WSABASEERR + 40
const WSAEPROTOTYPE = WSABASEERR + 41
const WSAENOPROTOOPT = WSABASEERR + 42
const WSAEPROTONOSUPPORT = WSABASEERR + 43
const WSAESOCKTNOSUPPORT = WSABASEERR + 44
const WSAEOPNOTSUPP = WSABASEERR + 45
const WSAEPFNOSUPPORT = WSABASEERR + 46
const WSAEAFNOSUPPORT = WSABASEERR + 47
const WSAEADDRINUSE = WSABASEERR + 48
const WSAEADDRNOTAVAIL = WSABASEERR + 49
const WSAENETDOWN = WSABASEERR + 50
const WSAENETUNREACH = WSABASEERR + 51
const WSAENETRESET = WSABASEERR + 52
const WSAECONNABORTED = WSABASEERR + 53
const WSAECONNRESET = WSABASEERR + 54
const WSAENOBUFS = WSABASEERR + 55
const WSAEISCONN = WSABASEERR + 56
const WSAENOTCONN = WSABASEERR + 57
const WSAESHUTDOWN = WSABASEERR + 58
const WSAETOOMANYREFS = WSABASEERR + 59
const WSAETIMEDOUT = WSABASEERR + 60
const WSAECONNREFUSED = WSABASEERR + 61
const WSAELOOP = WSABASEERR + 62
const WSAENAMETOOLONG = WSABASEERR + 63
const WSAEHOSTDOWN = WSABASEERR + 64
const WSAEHOSTUNREACH = WSABASEERR + 65
const WSAENOTEMPTY = WSABASEERR + 66
const WSAEPROCLIM = WSABASEERR + 67
const WSAEUSERS = WSABASEERR + 68
const WSAEDQUOT = WSABASEERR + 69
const WSAESTALE = WSABASEERR + 70
const WSAEREMOTE = WSABASEERR + 71
const WSASYSNOTREADY = WSABASEERR + 91
const WSAVERNOTSUPPORTED = WSABASEERR + 92
const WSANOTINITIALISED = WSABASEERR + 93
const WSAEDISCON = WSABASEERR + 101
const WSAENOMORE = WSABASEERR + 102
const WSAECANCELLED = WSABASEERR + 103
const WSAEINVALIDPROCTABLE = WSABASEERR + 104
const WSAEINVALIDPROVIDER = WSABASEERR + 105
const WSAEPROVIDERFAILEDINIT = WSABASEERR + 106
const WSASYSCALLFAILURE = WSABASEERR + 107
const WSASERVICE_NOT_FOUND = WSABASEERR + 108
const WSATYPE_NOT_FOUND = WSABASEERR + 109
const WSA_E_NO_MORE = WSABASEERR + 110
const WSA_E_CANCELLED = WSABASEERR + 111
const WSAEREFUSED = WSABASEERR + 112
const WSAHOST_NOT_FOUND = WSABASEERR + 1001
const WSATRY_AGAIN = WSABASEERR + 1002
const WSANO_RECOVERY = WSABASEERR + 1003
const WSANO_DATA = WSABASEERR + 1004
const WSA_QOS_RECEIVERS = WSABASEERR + 1005
const WSA_QOS_SENDERS = WSABASEERR + 1006
const WSA_QOS_NO_SENDERS = WSABASEERR + 1007
const WSA_QOS_NO_RECEIVERS = WSABASEERR + 1008
const WSA_QOS_REQUEST_CONFIRMED = WSABASEERR + 1009
const WSA_QOS_ADMISSION_FAILURE = WSABASEERR + 1010
const WSA_QOS_POLICY_FAILURE = WSABASEERR + 1011
const WSA_QOS_BAD_STYLE = WSABASEERR + 1012
const WSA_QOS_BAD_OBJECT = WSABASEERR + 1013
const WSA_QOS_TRAFFIC_CTRL_ERROR = WSABASEERR + 1014
const WSA_QOS_GENERIC_ERROR = WSABASEERR + 1015
const WSA_QOS_ESERVICETYPE = WSABASEERR + 1016
const WSA_QOS_EFLOWSPEC = WSABASEERR + 1017
const WSA_QOS_EPROVSPECBUF = WSABASEERR + 1018
const WSA_QOS_EFILTERSTYLE = WSABASEERR + 1019
const WSA_QOS_EFILTERTYPE = WSABASEERR + 1020
const WSA_QOS_EFILTERCOUNT = WSABASEERR + 1021
const WSA_QOS_EOBJLENGTH = WSABASEERR + 1022
const WSA_QOS_EFLOWCOUNT = WSABASEERR + 1023
const WSA_QOS_EUNKNOWNPSOBJ = WSABASEERR + 1024
const WSA_QOS_EUNKOWNPSOBJ = WSA_QOS_EUNKNOWNPSOBJ
const WSA_QOS_EPOLICYOBJ = WSABASEERR + 1025
const WSA_QOS_EFLOWDESC = WSABASEERR + 1026
const WSA_QOS_EPSFLOWSPEC = WSABASEERR + 1027
const WSA_QOS_EPSFILTERSPEC = WSABASEERR + 1028
const WSA_QOS_ESDMODEOBJ = WSABASEERR + 1029
const WSA_QOS_ESHAPERATEOBJ = WSABASEERR + 1030
const WSA_QOS_RESERVED_PETYPE = WSABASEERR + 1031
const ERROR_SXS_SECTION_NOT_FOUND = cast(clong, 14000)
const ERROR_SXS_CANT_GEN_ACTCTX = cast(clong, 14001)
const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = cast(clong, 14002)
const ERROR_SXS_ASSEMBLY_NOT_FOUND = cast(clong, 14003)
const ERROR_SXS_MANIFEST_FORMAT_ERROR = cast(clong, 14004)
const ERROR_SXS_MANIFEST_PARSE_ERROR = cast(clong, 14005)
const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = cast(clong, 14006)
const ERROR_SXS_KEY_NOT_FOUND = cast(clong, 14007)
const ERROR_SXS_VERSION_CONFLICT = cast(clong, 14008)
const ERROR_SXS_WRONG_SECTION_TYPE = cast(clong, 14009)
const ERROR_SXS_THREAD_QUERIES_DISABLED = cast(clong, 14010)
const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = cast(clong, 14011)
const ERROR_SXS_UNKNOWN_ENCODING_GROUP = cast(clong, 14012)
const ERROR_SXS_UNKNOWN_ENCODING = cast(clong, 14013)
const ERROR_SXS_INVALID_XML_NAMESPACE_URI = cast(clong, 14014)
const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = cast(clong, 14015)
const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = cast(clong, 14016)
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = cast(clong, 14017)
const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = cast(clong, 14018)
const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = cast(clong, 14019)
const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = cast(clong, 14020)
const ERROR_SXS_DUPLICATE_DLL_NAME = cast(clong, 14021)
const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = cast(clong, 14022)
const ERROR_SXS_DUPLICATE_CLSID = cast(clong, 14023)
const ERROR_SXS_DUPLICATE_IID = cast(clong, 14024)
const ERROR_SXS_DUPLICATE_TLBID = cast(clong, 14025)
const ERROR_SXS_DUPLICATE_PROGID = cast(clong, 14026)
const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = cast(clong, 14027)
const ERROR_SXS_FILE_HASH_MISMATCH = cast(clong, 14028)
const ERROR_SXS_POLICY_PARSE_ERROR = cast(clong, 14029)
const ERROR_SXS_XML_E_MISSINGQUOTE = cast(clong, 14030)
const ERROR_SXS_XML_E_COMMENTSYNTAX = cast(clong, 14031)
const ERROR_SXS_XML_E_BADSTARTNAMECHAR = cast(clong, 14032)
const ERROR_SXS_XML_E_BADNAMECHAR = cast(clong, 14033)
const ERROR_SXS_XML_E_BADCHARINSTRING = cast(clong, 14034)
const ERROR_SXS_XML_E_XMLDECLSYNTAX = cast(clong, 14035)
const ERROR_SXS_XML_E_BADCHARDATA = cast(clong, 14036)
const ERROR_SXS_XML_E_MISSINGWHITESPACE = cast(clong, 14037)
const ERROR_SXS_XML_E_EXPECTINGTAGEND = cast(clong, 14038)
const ERROR_SXS_XML_E_MISSINGSEMICOLON = cast(clong, 14039)
const ERROR_SXS_XML_E_UNBALANCEDPAREN = cast(clong, 14040)
const ERROR_SXS_XML_E_INTERNALERROR = cast(clong, 14041)
const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = cast(clong, 14042)
const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = cast(clong, 14043)
const ERROR_SXS_XML_E_MISSING_PAREN = cast(clong, 14044)
const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = cast(clong, 14045)
const ERROR_SXS_XML_E_MULTIPLE_COLONS = cast(clong, 14046)
const ERROR_SXS_XML_E_INVALID_DECIMAL = cast(clong, 14047)
const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = cast(clong, 14048)
const ERROR_SXS_XML_E_INVALID_UNICODE = cast(clong, 14049)
const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = cast(clong, 14050)
const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = cast(clong, 14051)
const ERROR_SXS_XML_E_UNCLOSEDTAG = cast(clong, 14052)
const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = cast(clong, 14053)
const ERROR_SXS_XML_E_MULTIPLEROOTS = cast(clong, 14054)
const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = cast(clong, 14055)
const ERROR_SXS_XML_E_BADXMLDECL = cast(clong, 14056)
const ERROR_SXS_XML_E_MISSINGROOT = cast(clong, 14057)
const ERROR_SXS_XML_E_UNEXPECTEDEOF = cast(clong, 14058)
const ERROR_SXS_XML_E_BADPEREFINSUBSET = cast(clong, 14059)
const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = cast(clong, 14060)
const ERROR_SXS_XML_E_UNCLOSEDENDTAG = cast(clong, 14061)
const ERROR_SXS_XML_E_UNCLOSEDSTRING = cast(clong, 14062)
const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = cast(clong, 14063)
const ERROR_SXS_XML_E_UNCLOSEDDECL = cast(clong, 14064)
const ERROR_SXS_XML_E_UNCLOSEDCDATA = cast(clong, 14065)
const ERROR_SXS_XML_E_RESERVEDNAMESPACE = cast(clong, 14066)
const ERROR_SXS_XML_E_INVALIDENCODING = cast(clong, 14067)
const ERROR_SXS_XML_E_INVALIDSWITCH = cast(clong, 14068)
const ERROR_SXS_XML_E_BADXMLCASE = cast(clong, 14069)
const ERROR_SXS_XML_E_INVALID_STANDALONE = cast(clong, 14070)
const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = cast(clong, 14071)
const ERROR_SXS_XML_E_INVALID_VERSION = cast(clong, 14072)
const ERROR_SXS_XML_E_MISSINGEQUALS = cast(clong, 14073)
const ERROR_SXS_PROTECTION_RECOVERY_FAILED = cast(clong, 14074)
const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = cast(clong, 14075)
const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = cast(clong, 14076)
const ERROR_SXS_UNTRANSLATABLE_HRESULT = cast(clong, 14077)
const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = cast(clong, 14078)
const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = cast(clong, 14079)
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = cast(clong, 14080)
const ERROR_SXS_ASSEMBLY_MISSING = cast(clong, 14081)
const ERROR_SXS_CORRUPT_ACTIVATION_STACK = cast(clong, 14082)
const ERROR_SXS_CORRUPTION = cast(clong, 14083)
const ERROR_SXS_EARLY_DEACTIVATION = cast(clong, 14084)
const ERROR_SXS_INVALID_DEACTIVATION = cast(clong, 14085)
const ERROR_SXS_MULTIPLE_DEACTIVATION = cast(clong, 14086)
const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = cast(clong, 14087)
const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = cast(clong, 14088)
const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = cast(clong, 14089)
const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = cast(clong, 14090)
const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = cast(clong, 14091)
const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = cast(clong, 14092)
const ERROR_SXS_IDENTITY_PARSE_ERROR = cast(clong, 14093)
const ERROR_MALFORMED_SUBSTITUTION_STRING = cast(clong, 14094)
const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = cast(clong, 14095)
const ERROR_UNMAPPED_SUBSTITUTION_STRING = cast(clong, 14096)
const ERROR_SXS_ASSEMBLY_NOT_LOCKED = cast(clong, 14097)
const ERROR_SXS_COMPONENT_STORE_CORRUPT = cast(clong, 14098)
const ERROR_ADVANCED_INSTALLER_FAILED = cast(clong, 14099)
const ERROR_XML_ENCODING_MISMATCH = cast(clong, 14100)
const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = cast(clong, 14101)
const ERROR_SXS_IDENTITIES_DIFFERENT = cast(clong, 14102)
const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = cast(clong, 14103)
const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = cast(clong, 14104)
const ERROR_SXS_MANIFEST_TOO_BIG = cast(clong, 14105)
const ERROR_SXS_SETTING_NOT_REGISTERED = cast(clong, 14106)
const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = cast(clong, 14107)
const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = cast(clong, 14108)
const ERROR_GENERIC_COMMAND_FAILED = cast(clong, 14109)
const ERROR_SXS_FILE_HASH_MISSING = cast(clong, 14110)
const ERROR_IPSEC_QM_POLICY_EXISTS = cast(clong, 13000)
const ERROR_IPSEC_QM_POLICY_NOT_FOUND = cast(clong, 13001)
const ERROR_IPSEC_QM_POLICY_IN_USE = cast(clong, 13002)
const ERROR_IPSEC_MM_POLICY_EXISTS = cast(clong, 13003)
const ERROR_IPSEC_MM_POLICY_NOT_FOUND = cast(clong, 13004)
const ERROR_IPSEC_MM_POLICY_IN_USE = cast(clong, 13005)
const ERROR_IPSEC_MM_FILTER_EXISTS = cast(clong, 13006)
const ERROR_IPSEC_MM_FILTER_NOT_FOUND = cast(clong, 13007)
const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = cast(clong, 13008)
const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = cast(clong, 13009)
const ERROR_IPSEC_MM_AUTH_EXISTS = cast(clong, 13010)
const ERROR_IPSEC_MM_AUTH_NOT_FOUND = cast(clong, 13011)
const ERROR_IPSEC_MM_AUTH_IN_USE = cast(clong, 13012)
const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = cast(clong, 13013)
const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = cast(clong, 13014)
const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = cast(clong, 13015)
const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = cast(clong, 13016)
const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = cast(clong, 13017)
const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = cast(clong, 13018)
const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = cast(clong, 13019)
const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = cast(clong, 13020)
const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = cast(clong, 13021)
const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = cast(clong, 13022)
const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = cast(clong, 13023)
const WARNING_IPSEC_MM_POLICY_PRUNED = cast(clong, 13024)
const WARNING_IPSEC_QM_POLICY_PRUNED = cast(clong, 13025)
const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = cast(clong, 13800)
const ERROR_IPSEC_IKE_AUTH_FAIL = cast(clong, 13801)
const ERROR_IPSEC_IKE_ATTRIB_FAIL = cast(clong, 13802)
const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = cast(clong, 13803)
const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = cast(clong, 13804)
const ERROR_IPSEC_IKE_TIMED_OUT = cast(clong, 13805)
const ERROR_IPSEC_IKE_NO_CERT = cast(clong, 13806)
const ERROR_IPSEC_IKE_SA_DELETED = cast(clong, 13807)
const ERROR_IPSEC_IKE_SA_REAPED = cast(clong, 13808)
const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = cast(clong, 13809)
const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = cast(clong, 13810)
const ERROR_IPSEC_IKE_QUEUE_DROP_MM = cast(clong, 13811)
const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = cast(clong, 13812)
const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = cast(clong, 13813)
const ERROR_IPSEC_IKE_MM_DELAY_DROP = cast(clong, 13814)
const ERROR_IPSEC_IKE_QM_DELAY_DROP = cast(clong, 13815)
const ERROR_IPSEC_IKE_ERROR = cast(clong, 13816)
const ERROR_IPSEC_IKE_CRL_FAILED = cast(clong, 13817)
const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = cast(clong, 13818)
const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = cast(clong, 13819)
const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = cast(clong, 13820)
const ERROR_IPSEC_IKE_DH_FAIL = cast(clong, 13822)
const ERROR_IPSEC_IKE_INVALID_HEADER = cast(clong, 13824)
const ERROR_IPSEC_IKE_NO_POLICY = cast(clong, 13825)
const ERROR_IPSEC_IKE_INVALID_SIGNATURE = cast(clong, 13826)
const ERROR_IPSEC_IKE_KERBEROS_ERROR = cast(clong, 13827)
const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = cast(clong, 13828)
const ERROR_IPSEC_IKE_PROCESS_ERR = cast(clong, 13829)
const ERROR_IPSEC_IKE_PROCESS_ERR_SA = cast(clong, 13830)
const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = cast(clong, 13831)
const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = cast(clong, 13832)
const ERROR_IPSEC_IKE_PROCESS_ERR_KE = cast(clong, 13833)
const ERROR_IPSEC_IKE_PROCESS_ERR_ID = cast(clong, 13834)
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = cast(clong, 13835)
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = cast(clong, 13836)
const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = cast(clong, 13837)
const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = cast(clong, 13838)
const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = cast(clong, 13839)
const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = cast(clong, 13840)
const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = cast(clong, 13841)
const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = cast(clong, 13842)
const ERROR_IPSEC_IKE_INVALID_PAYLOAD = cast(clong, 13843)
const ERROR_IPSEC_IKE_LOAD_SOFT_SA = cast(clong, 13844)
const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = cast(clong, 13845)
const ERROR_IPSEC_IKE_INVALID_COOKIE = cast(clong, 13846)
const ERROR_IPSEC_IKE_NO_PEER_CERT = cast(clong, 13847)
const ERROR_IPSEC_IKE_PEER_CRL_FAILED = cast(clong, 13848)
const ERROR_IPSEC_IKE_POLICY_CHANGE = cast(clong, 13849)
const ERROR_IPSEC_IKE_NO_MM_POLICY = cast(clong, 13850)
const ERROR_IPSEC_IKE_NOTCBPRIV = cast(clong, 13851)
const ERROR_IPSEC_IKE_SECLOADFAIL = cast(clong, 13852)
const ERROR_IPSEC_IKE_FAILSSPINIT = cast(clong, 13853)
const ERROR_IPSEC_IKE_FAILQUERYSSP = cast(clong, 13854)
const ERROR_IPSEC_IKE_SRVACQFAIL = cast(clong, 13855)
const ERROR_IPSEC_IKE_SRVQUERYCRED = cast(clong, 13856)
const ERROR_IPSEC_IKE_GETSPIFAIL = cast(clong, 13857)
const ERROR_IPSEC_IKE_INVALID_FILTER = cast(clong, 13858)
const ERROR_IPSEC_IKE_OUT_OF_MEMORY = cast(clong, 13859)
const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = cast(clong, 13860)
const ERROR_IPSEC_IKE_INVALID_POLICY = cast(clong, 13861)
const ERROR_IPSEC_IKE_UNKNOWN_DOI = cast(clong, 13862)
const ERROR_IPSEC_IKE_INVALID_SITUATION = cast(clong, 13863)
const ERROR_IPSEC_IKE_DH_FAILURE = cast(clong, 13864)
const ERROR_IPSEC_IKE_INVALID_GROUP = cast(clong, 13865)
const ERROR_IPSEC_IKE_ENCRYPT = cast(clong, 13866)
const ERROR_IPSEC_IKE_DECRYPT = cast(clong, 13867)
const ERROR_IPSEC_IKE_POLICY_MATCH = cast(clong, 13868)
const ERROR_IPSEC_IKE_UNSUPPORTED_ID = cast(clong, 13869)
const ERROR_IPSEC_IKE_INVALID_HASH = cast(clong, 13870)
const ERROR_IPSEC_IKE_INVALID_HASH_ALG = cast(clong, 13871)
const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = cast(clong, 13872)
const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = cast(clong, 13873)
const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = cast(clong, 13874)
const ERROR_IPSEC_IKE_INVALID_SIG = cast(clong, 13875)
const ERROR_IPSEC_IKE_LOAD_FAILED = cast(clong, 13876)
const ERROR_IPSEC_IKE_RPC_DELETE = cast(clong, 13877)
const ERROR_IPSEC_IKE_BENIGN_REINIT = cast(clong, 13878)
const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = cast(clong, 13879)
const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = cast(clong, 13881)
const ERROR_IPSEC_IKE_MM_LIMIT = cast(clong, 13882)
const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = cast(clong, 13883)
const ERROR_IPSEC_IKE_QM_LIMIT = cast(clong, 13884)
const ERROR_IPSEC_IKE_MM_EXPIRED = cast(clong, 13885)
const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = cast(clong, 13886)
const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = cast(clong, 13887)
const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = cast(clong, 13888)
const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = cast(clong, 13889)
const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = cast(clong, 13890)
const ERROR_IPSEC_IKE_SHUTTING_DOWN = cast(clong, 13891)
const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = cast(clong, 13892)
const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = cast(clong, 13893)
const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = cast(clong, 13894)
const ERROR_IPSEC_IKE_QM_EXPIRED = cast(clong, 13895)
const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = cast(clong, 13896)
const ERROR_IPSEC_IKE_NEG_STATUS_END = cast(clong, 13897)
const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = cast(clong, 13898)
const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = cast(clong, 13899)
const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = cast(clong, 13900)
const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = cast(clong, 13901)
const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = cast(clong, 13902)
const ERROR_IPSEC_IKE_RATELIMIT_DROP = cast(clong, 13903)
const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = cast(clong, 13904)
const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = cast(clong, 13905)
const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = cast(clong, 13906)
const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = cast(clong, 13907)
const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = cast(clong, 13908)
const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = cast(clong, 13909)
const ERROR_IPSEC_BAD_SPI = cast(clong, 13910)
const ERROR_IPSEC_SA_LIFETIME_EXPIRED = cast(clong, 13911)
const ERROR_IPSEC_WRONG_SA = cast(clong, 13912)
const ERROR_IPSEC_REPLAY_CHECK_FAILED = cast(clong, 13913)
const ERROR_IPSEC_INVALID_PACKET = cast(clong, 13914)
const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = cast(clong, 13915)
const ERROR_IPSEC_CLEAR_TEXT_DROP = cast(clong, 13916)
const ERROR_IPSEC_AUTH_FIREWALL_DROP = cast(clong, 13917)
const ERROR_IPSEC_THROTTLE_DROP = cast(clong, 13918)
const ERROR_IPSEC_DOSP_BLOCK = cast(clong, 13925)
const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = cast(clong, 13926)
const ERROR_IPSEC_DOSP_INVALID_PACKET = cast(clong, 13927)
const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = cast(clong, 13928)
const ERROR_IPSEC_DOSP_MAX_ENTRIES = cast(clong, 13929)
const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = cast(clong, 13930)
const ERROR_IPSEC_DOSP_NOT_INSTALLED = cast(clong, 13931)
const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = cast(clong, 13932)
const ERROR_EVT_INVALID_CHANNEL_PATH = cast(clong, 15000)
const ERROR_EVT_INVALID_QUERY = cast(clong, 15001)
const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = cast(clong, 15002)
const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = cast(clong, 15003)
const ERROR_EVT_INVALID_PUBLISHER_NAME = cast(clong, 15004)
const ERROR_EVT_INVALID_EVENT_DATA = cast(clong, 15005)
const ERROR_EVT_CHANNEL_NOT_FOUND = cast(clong, 15007)
const ERROR_EVT_MALFORMED_XML_TEXT = cast(clong, 15008)
const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = cast(clong, 15009)
const ERROR_EVT_CONFIGURATION_ERROR = cast(clong, 15010)
const ERROR_EVT_QUERY_RESULT_STALE = cast(clong, 15011)
const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = cast(clong, 15012)
const ERROR_EVT_NON_VALIDATING_MSXML = cast(clong, 15013)
const ERROR_EVT_FILTER_ALREADYSCOPED = cast(clong, 15014)
const ERROR_EVT_FILTER_NOTELTSET = cast(clong, 15015)
const ERROR_EVT_FILTER_INVARG = cast(clong, 15016)
const ERROR_EVT_FILTER_INVTEST = cast(clong, 15017)
const ERROR_EVT_FILTER_INVTYPE = cast(clong, 15018)
const ERROR_EVT_FILTER_PARSEERR = cast(clong, 15019)
const ERROR_EVT_FILTER_UNSUPPORTEDOP = cast(clong, 15020)
const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = cast(clong, 15021)
const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = cast(clong, 15022)
const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = cast(clong, 15023)
const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = cast(clong, 15024)
const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = cast(clong, 15025)
const ERROR_EVT_FILTER_TOO_COMPLEX = cast(clong, 15026)
const ERROR_EVT_MESSAGE_NOT_FOUND = cast(clong, 15027)
const ERROR_EVT_MESSAGE_ID_NOT_FOUND = cast(clong, 15028)
const ERROR_EVT_UNRESOLVED_VALUE_INSERT = cast(clong, 15029)
const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = cast(clong, 15030)
const ERROR_EVT_MAX_INSERTS_REACHED = cast(clong, 15031)
const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = cast(clong, 15032)
const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = cast(clong, 15033)
const ERROR_EVT_VERSION_TOO_OLD = cast(clong, 15034)
const ERROR_EVT_VERSION_TOO_NEW = cast(clong, 15035)
const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = cast(clong, 15036)
const ERROR_EVT_PUBLISHER_DISABLED = cast(clong, 15037)
const ERROR_EVT_FILTER_OUT_OF_RANGE = cast(clong, 15038)
const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = cast(clong, 15080)
const ERROR_EC_LOG_DISABLED = cast(clong, 15081)
const ERROR_EC_CIRCULAR_FORWARDING = cast(clong, 15082)
const ERROR_EC_CREDSTORE_FULL = cast(clong, 15083)
const ERROR_EC_CRED_NOT_FOUND = cast(clong, 15084)
const ERROR_EC_NO_ACTIVE_CHANNEL = cast(clong, 15085)
const ERROR_MUI_FILE_NOT_FOUND = cast(clong, 15100)
const ERROR_MUI_INVALID_FILE = cast(clong, 15101)
const ERROR_MUI_INVALID_RC_CONFIG = cast(clong, 15102)
const ERROR_MUI_INVALID_LOCALE_NAME = cast(clong, 15103)
const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = cast(clong, 15104)
const ERROR_MUI_FILE_NOT_LOADED = cast(clong, 15105)
const ERROR_RESOURCE_ENUM_USER_STOP = cast(clong, 15106)
const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = cast(clong, 15107)
const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = cast(clong, 15108)
const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = cast(clong, 15110)
const ERROR_MRM_INVALID_PRICONFIG = cast(clong, 15111)
const ERROR_MRM_INVALID_FILE_TYPE = cast(clong, 15112)
const ERROR_MRM_UNKNOWN_QUALIFIER = cast(clong, 15113)
const ERROR_MRM_INVALID_QUALIFIER_VALUE = cast(clong, 15114)
const ERROR_MRM_NO_CANDIDATE = cast(clong, 15115)
const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = cast(clong, 15116)
const ERROR_MRM_RESOURCE_TYPE_MISMATCH = cast(clong, 15117)
const ERROR_MRM_DUPLICATE_MAP_NAME = cast(clong, 15118)
const ERROR_MRM_DUPLICATE_ENTRY = cast(clong, 15119)
const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = cast(clong, 15120)
const ERROR_MRM_FILEPATH_TOO_LONG = cast(clong, 15121)
const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = cast(clong, 15122)
const ERROR_MRM_INVALID_PRI_FILE = cast(clong, 15126)
const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = cast(clong, 15127)
const ERROR_MRM_MAP_NOT_FOUND = cast(clong, 15135)
const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = cast(clong, 15136)
const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = cast(clong, 15137)
const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = cast(clong, 15138)
const ERROR_MRM_AUTOMERGE_ENABLED = cast(clong, 15139)
const ERROR_MRM_TOO_MANY_RESOURCES = cast(clong, 15140)
const ERROR_MCA_INVALID_CAPABILITIES_STRING = cast(clong, 15200)
const ERROR_MCA_INVALID_VCP_VERSION = cast(clong, 15201)
const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = cast(clong, 15202)
const ERROR_MCA_MCCS_VERSION_MISMATCH = cast(clong, 15203)
const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = cast(clong, 15204)
const ERROR_MCA_INTERNAL_ERROR = cast(clong, 15205)
const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = cast(clong, 15206)
const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = cast(clong, 15207)
const ERROR_AMBIGUOUS_SYSTEM_DEVICE = cast(clong, 15250)
const ERROR_SYSTEM_DEVICE_NOT_FOUND = cast(clong, 15299)
const ERROR_HASH_NOT_SUPPORTED = cast(clong, 15300)
const ERROR_HASH_NOT_PRESENT = cast(clong, 15301)
const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = cast(clong, 15321)
const ERROR_GPIO_CLIENT_INFORMATION_INVALID = cast(clong, 15322)
const ERROR_GPIO_VERSION_NOT_SUPPORTED = cast(clong, 15323)
const ERROR_GPIO_INVALID_REGISTRATION_PACKET = cast(clong, 15324)
const ERROR_GPIO_OPERATION_DENIED = cast(clong, 15325)
const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = cast(clong, 15326)
const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = cast(clong, 15327)
const ERROR_CANNOT_SWITCH_RUNLEVEL = cast(clong, 15400)
const ERROR_INVALID_RUNLEVEL_SETTING = cast(clong, 15401)
const ERROR_RUNLEVEL_SWITCH_TIMEOUT = cast(clong, 15402)
const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = cast(clong, 15403)
const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = cast(clong, 15404)
const ERROR_SERVICES_FAILED_AUTOSTART = cast(clong, 15405)
const ERROR_COM_TASK_STOP_PENDING = cast(clong, 15501)
const ERROR_INSTALL_OPEN_PACKAGE_FAILED = cast(clong, 15600)
const ERROR_INSTALL_PACKAGE_NOT_FOUND = cast(clong, 15601)
const ERROR_INSTALL_INVALID_PACKAGE = cast(clong, 15602)
const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = cast(clong, 15603)
const ERROR_INSTALL_OUT_OF_DISK_SPACE = cast(clong, 15604)
const ERROR_INSTALL_NETWORK_FAILURE = cast(clong, 15605)
const ERROR_INSTALL_REGISTRATION_FAILURE = cast(clong, 15606)
const ERROR_INSTALL_DEREGISTRATION_FAILURE = cast(clong, 15607)
const ERROR_INSTALL_CANCEL = cast(clong, 15608)
const ERROR_INSTALL_FAILED = cast(clong, 15609)
const ERROR_REMOVE_FAILED = cast(clong, 15610)
const ERROR_PACKAGE_ALREADY_EXISTS = cast(clong, 15611)
const ERROR_NEEDS_REMEDIATION = cast(clong, 15612)
const ERROR_INSTALL_PREREQUISITE_FAILED = cast(clong, 15613)
const ERROR_PACKAGE_REPOSITORY_CORRUPTED = cast(clong, 15614)
const ERROR_INSTALL_POLICY_FAILURE = cast(clong, 15615)
const ERROR_PACKAGE_UPDATING = cast(clong, 15616)
const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = cast(clong, 15617)
const ERROR_PACKAGES_IN_USE = cast(clong, 15618)
const ERROR_RECOVERY_FILE_CORRUPT = cast(clong, 15619)
const ERROR_INVALID_STAGED_SIGNATURE = cast(clong, 15620)
const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = cast(clong, 15621)
const ERROR_INSTALL_PACKAGE_DOWNGRADE = cast(clong, 15622)
const ERROR_SYSTEM_NEEDS_REMEDIATION = cast(clong, 15623)
const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = cast(clong, 15624)
const ERROR_RESILIENCY_FILE_CORRUPT = cast(clong, 15625)
const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = cast(clong, 15626)
const APPMODEL_ERROR_NO_PACKAGE = cast(clong, 15700)
const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = cast(clong, 15701)
const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = cast(clong, 15702)
const APPMODEL_ERROR_NO_APPLICATION = cast(clong, 15703)
const ERROR_STATE_LOAD_STORE_FAILED = cast(clong, 15800)
const ERROR_STATE_GET_VERSION_FAILED = cast(clong, 15801)
const ERROR_STATE_SET_VERSION_FAILED = cast(clong, 15802)
const ERROR_STATE_STRUCTURED_RESET_FAILED = cast(clong, 15803)
const ERROR_STATE_OPEN_CONTAINER_FAILED = cast(clong, 15804)
const ERROR_STATE_CREATE_CONTAINER_FAILED = cast(clong, 15805)
const ERROR_STATE_DELETE_CONTAINER_FAILED = cast(clong, 15806)
const ERROR_STATE_READ_SETTING_FAILED = cast(clong, 15807)
const ERROR_STATE_WRITE_SETTING_FAILED = cast(clong, 15808)
const ERROR_STATE_DELETE_SETTING_FAILED = cast(clong, 15809)
const ERROR_STATE_QUERY_SETTING_FAILED = cast(clong, 15810)
const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = cast(clong, 15811)
const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = cast(clong, 15812)
const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = cast(clong, 15813)
const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = cast(clong, 15814)
const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = cast(clong, 15815)
const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = cast(clong, 15816)
const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = cast(clong, 15817)
const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = cast(clong, 15818)
const ERROR_API_UNAVAILABLE = cast(clong, 15841)
const SEVERITY_SUCCESS = 0
const SEVERITY_ERROR = 1
#define SUCCEEDED(hr) (cast(HRESULT, (hr)) >= 0)
#define FAILED(hr) (cast(HRESULT, (hr)) < 0)
#define IS_ERROR(Status) (culng(culng(Status) shr 31) = SEVERITY_ERROR)
#define HRESULT_CODE(hr) ((hr) and &hFFFF)
#define SCODE_CODE(sc) ((sc) and &hFFFF)
#define HRESULT_FACILITY(hr) (((hr) shr 16) and &h1fff)
#define SCODE_FACILITY(sc) (((sc) shr 16) and &h1fff)
#define HRESULT_SEVERITY(hr) (((hr) shr 31) and &h1)
#define SCODE_SEVERITY(sc) (((sc) shr 31) and &h1)
#define MAKE_HRESULT(sev, fac, code) cast(HRESULT, culng(culng(culng(culng(sev) shl 31) or culng(culng(fac) shl 16)) or culng(code)))
#define MAKE_SCODE(sev, fac, code) cast(SCODE, culng(culng(culng(culng(sev) shl 31) or culng(culng(fac) shl 16)) or culng(code)))
const FACILITY_NT_BIT = &h10000000
#define __HRESULT_FROM_WIN32(x) iif(cast(HRESULT, (x)) <= 0, cast(HRESULT, (x)), cast(HRESULT, (((x) and &h0000FFFF) or (FACILITY_WIN32 shl 16)) or &h80000000))
#define HRESULT_FROM_WIN32(x) __HRESULT_FROM_WIN32(x)
#define HRESULT_FROM_NT(x) cast(HRESULT, (x) or FACILITY_NT_BIT)
#define GetScode(hr) cast(SCODE, (hr))
#define ResultFromScode(sc) cast(HRESULT, (sc))
#define PropagateResult(hrPrevious, scBase) cast(HRESULT, scBase)
#define _HRESULT_TYPEDEF_(_sc) cast(HRESULT, _sc)
const NOERROR = 0
#define E_UNEXPECTED _HRESULT_TYPEDEF_(&h8000FFFF)
#define E_NOTIMPL _HRESULT_TYPEDEF_(&h80004001)
#define E_OUTOFMEMORY _HRESULT_TYPEDEF_(&h8007000E)
#define E_INVALIDARG _HRESULT_TYPEDEF_(&h80070057)
#define E_NOINTERFACE _HRESULT_TYPEDEF_(&h80004002)
#define E_POINTER _HRESULT_TYPEDEF_(&h80004003)
#define E_HANDLE _HRESULT_TYPEDEF_(&h80070006)
#define E_ABORT _HRESULT_TYPEDEF_(&h80004004)
#define E_FAIL _HRESULT_TYPEDEF_(&h80004005)
#define E_ACCESSDENIED _HRESULT_TYPEDEF_(&h80070005)
#define E_PENDING _HRESULT_TYPEDEF_(&h8000000A)
#define E_NOT_SUFFICIENT_BUFFER HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER)
#define CO_E_INIT_TLS _HRESULT_TYPEDEF_(&h80004006)
#define CO_E_INIT_SHARED_ALLOCATOR _HRESULT_TYPEDEF_(&h80004007)
#define CO_E_INIT_MEMORY_ALLOCATOR _HRESULT_TYPEDEF_(&h80004008)
#define CO_E_INIT_CLASS_CACHE _HRESULT_TYPEDEF_(&h80004009)
#define CO_E_INIT_RPC_CHANNEL _HRESULT_TYPEDEF_(&h8000400A)
#define CO_E_INIT_TLS_SET_CHANNEL_CONTROL _HRESULT_TYPEDEF_(&h8000400B)
#define CO_E_INIT_TLS_CHANNEL_CONTROL _HRESULT_TYPEDEF_(&h8000400C)
#define CO_E_INIT_UNACCEPTED_USER_ALLOCATOR _HRESULT_TYPEDEF_(&h8000400D)
#define CO_E_INIT_SCM_MUTEX_EXISTS _HRESULT_TYPEDEF_(&h8000400E)
#define CO_E_INIT_SCM_FILE_MAPPING_EXISTS _HRESULT_TYPEDEF_(&h8000400F)
#define CO_E_INIT_SCM_MAP_VIEW_OF_FILE _HRESULT_TYPEDEF_(&h80004010)
#define CO_E_INIT_SCM_EXEC_FAILURE _HRESULT_TYPEDEF_(&h80004011)
#define CO_E_INIT_ONLY_SINGLE_THREADED _HRESULT_TYPEDEF_(&h80004012)
#define CO_E_CANT_REMOTE _HRESULT_TYPEDEF_(&h80004013)
#define CO_E_BAD_SERVER_NAME _HRESULT_TYPEDEF_(&h80004014)
#define CO_E_WRONG_SERVER_IDENTITY _HRESULT_TYPEDEF_(&h80004015)
#define CO_E_OLE1DDE_DISABLED _HRESULT_TYPEDEF_(&h80004016)
#define CO_E_RUNAS_SYNTAX _HRESULT_TYPEDEF_(&h80004017)
#define CO_E_CREATEPROCESS_FAILURE _HRESULT_TYPEDEF_(&h80004018)
#define CO_E_RUNAS_CREATEPROCESS_FAILURE _HRESULT_TYPEDEF_(&h80004019)
#define CO_E_RUNAS_LOGON_FAILURE _HRESULT_TYPEDEF_(&h8000401A)
#define CO_E_LAUNCH_PERMSSION_DENIED _HRESULT_TYPEDEF_(&h8000401B)
#define CO_E_START_SERVICE_FAILURE _HRESULT_TYPEDEF_(&h8000401C)
#define CO_E_REMOTE_COMMUNICATION_FAILURE _HRESULT_TYPEDEF_(&h8000401D)
#define CO_E_SERVER_START_TIMEOUT _HRESULT_TYPEDEF_(&h8000401E)
#define CO_E_CLSREG_INCONSISTENT _HRESULT_TYPEDEF_(&h8000401F)
#define CO_E_IIDREG_INCONSISTENT _HRESULT_TYPEDEF_(&h80004020)
#define CO_E_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h80004021)
#define CO_E_RELOAD_DLL _HRESULT_TYPEDEF_(&h80004022)
#define CO_E_MSI_ERROR _HRESULT_TYPEDEF_(&h80004023)
#define CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT _HRESULT_TYPEDEF_(&h80004024)
#define CO_E_SERVER_PAUSED _HRESULT_TYPEDEF_(&h80004025)
#define CO_E_SERVER_NOT_PAUSED _HRESULT_TYPEDEF_(&h80004026)
#define CO_E_CLASS_DISABLED _HRESULT_TYPEDEF_(&h80004027)
#define CO_E_CLRNOTAVAILABLE _HRESULT_TYPEDEF_(&h80004028)
#define CO_E_ASYNC_WORK_REJECTED _HRESULT_TYPEDEF_(&h80004029)
#define CO_E_SERVER_INIT_TIMEOUT _HRESULT_TYPEDEF_(&h8000402A)
#define CO_E_NO_SECCTX_IN_ACTIVATE _HRESULT_TYPEDEF_(&h8000402B)
#define CO_E_TRACKER_CONFIG _HRESULT_TYPEDEF_(&h80004030)
#define CO_E_THREADPOOL_CONFIG _HRESULT_TYPEDEF_(&h80004031)
#define CO_E_SXS_CONFIG _HRESULT_TYPEDEF_(&h80004032)
#define CO_E_MALFORMED_SPN _HRESULT_TYPEDEF_(&h80004033)
const S_OK = cast(HRESULT, &h00000000)
const S_FALSE = cast(HRESULT, &h00000001)
const OLE_E_FIRST = cast(HRESULT, &h80040000)
const OLE_E_LAST = cast(HRESULT, &h800400FF)
const OLE_S_FIRST = cast(HRESULT, &h00040000)
const OLE_S_LAST = cast(HRESULT, &h000400FF)
#define OLE_E_OLEVERB _HRESULT_TYPEDEF_(&h80040000)
#define OLE_E_ADVF _HRESULT_TYPEDEF_(&h80040001)
#define OLE_E_ENUM_NOMORE _HRESULT_TYPEDEF_(&h80040002)
#define OLE_E_ADVISENOTSUPPORTED _HRESULT_TYPEDEF_(&h80040003)
#define OLE_E_NOCONNECTION _HRESULT_TYPEDEF_(&h80040004)
#define OLE_E_NOTRUNNING _HRESULT_TYPEDEF_(&h80040005)
#define OLE_E_NOCACHE _HRESULT_TYPEDEF_(&h80040006)
#define OLE_E_BLANK _HRESULT_TYPEDEF_(&h80040007)
#define OLE_E_CLASSDIFF _HRESULT_TYPEDEF_(&h80040008)
#define OLE_E_CANT_GETMONIKER _HRESULT_TYPEDEF_(&h80040009)
#define OLE_E_CANT_BINDTOSOURCE _HRESULT_TYPEDEF_(&h8004000A)
#define OLE_E_STATIC _HRESULT_TYPEDEF_(&h8004000B)
#define OLE_E_PROMPTSAVECANCELLED _HRESULT_TYPEDEF_(&h8004000C)
#define OLE_E_INVALIDRECT _HRESULT_TYPEDEF_(&h8004000D)
#define OLE_E_WRONGCOMPOBJ _HRESULT_TYPEDEF_(&h8004000E)
#define OLE_E_INVALIDHWND _HRESULT_TYPEDEF_(&h8004000F)
#define OLE_E_NOT_INPLACEACTIVE _HRESULT_TYPEDEF_(&h80040010)
#define OLE_E_CANTCONVERT _HRESULT_TYPEDEF_(&h80040011)
#define OLE_E_NOSTORAGE _HRESULT_TYPEDEF_(&h80040012)
#define DV_E_FORMATETC _HRESULT_TYPEDEF_(&h80040064)
#define DV_E_DVTARGETDEVICE _HRESULT_TYPEDEF_(&h80040065)
#define DV_E_STGMEDIUM _HRESULT_TYPEDEF_(&h80040066)
#define DV_E_STATDATA _HRESULT_TYPEDEF_(&h80040067)
#define DV_E_LINDEX _HRESULT_TYPEDEF_(&h80040068)
#define DV_E_TYMED _HRESULT_TYPEDEF_(&h80040069)
#define DV_E_CLIPFORMAT _HRESULT_TYPEDEF_(&h8004006A)
#define DV_E_DVASPECT _HRESULT_TYPEDEF_(&h8004006B)
#define DV_E_DVTARGETDEVICE_SIZE _HRESULT_TYPEDEF_(&h8004006C)
#define DV_E_NOIVIEWOBJECT _HRESULT_TYPEDEF_(&h8004006D)
const DRAGDROP_E_FIRST = cast(clong, &h80040100)
const DRAGDROP_E_LAST = cast(clong, &h8004010F)
const DRAGDROP_S_FIRST = cast(clong, &h00040100)
const DRAGDROP_S_LAST = cast(clong, &h0004010F)
#define DRAGDROP_E_NOTREGISTERED _HRESULT_TYPEDEF_(&h80040100)
#define DRAGDROP_E_ALREADYREGISTERED _HRESULT_TYPEDEF_(&h80040101)
#define DRAGDROP_E_INVALIDHWND _HRESULT_TYPEDEF_(&h80040102)
const CLASSFACTORY_E_FIRST = cast(clong, &h80040110)
const CLASSFACTORY_E_LAST = cast(clong, &h8004011F)
const CLASSFACTORY_S_FIRST = cast(clong, &h00040110)
const CLASSFACTORY_S_LAST = cast(clong, &h0004011F)
#define CLASS_E_NOAGGREGATION _HRESULT_TYPEDEF_(&h80040110)
#define CLASS_E_CLASSNOTAVAILABLE _HRESULT_TYPEDEF_(&h80040111)
#define CLASS_E_NOTLICENSED _HRESULT_TYPEDEF_(&h80040112)
const MARSHAL_E_FIRST = cast(clong, &h80040120)
const MARSHAL_E_LAST = cast(clong, &h8004012F)
const MARSHAL_S_FIRST = cast(clong, &h00040120)
const MARSHAL_S_LAST = cast(clong, &h0004012F)
const DATA_E_FIRST = cast(clong, &h80040130)
const DATA_E_LAST = cast(clong, &h8004013F)
const DATA_S_FIRST = cast(clong, &h00040130)
const DATA_S_LAST = cast(clong, &h0004013F)
const VIEW_E_FIRST = cast(clong, &h80040140)
const VIEW_E_LAST = cast(clong, &h8004014F)
const VIEW_S_FIRST = cast(clong, &h00040140)
const VIEW_S_LAST = cast(clong, &h0004014F)
#define VIEW_E_DRAW _HRESULT_TYPEDEF_(&h80040140)
const REGDB_E_FIRST = cast(clong, &h80040150)
const REGDB_E_LAST = cast(clong, &h8004015F)
const REGDB_S_FIRST = cast(clong, &h00040150)
const REGDB_S_LAST = cast(clong, &h0004015F)
#define REGDB_E_READREGDB _HRESULT_TYPEDEF_(&h80040150)
#define REGDB_E_WRITEREGDB _HRESULT_TYPEDEF_(&h80040151)
#define REGDB_E_KEYMISSING _HRESULT_TYPEDEF_(&h80040152)
#define REGDB_E_INVALIDVALUE _HRESULT_TYPEDEF_(&h80040153)
#define REGDB_E_CLASSNOTREG _HRESULT_TYPEDEF_(&h80040154)
#define REGDB_E_IIDNOTREG _HRESULT_TYPEDEF_(&h80040155)
#define REGDB_E_BADTHREADINGMODEL _HRESULT_TYPEDEF_(&h80040156)
const CAT_E_FIRST = cast(clong, &h80040160)
const CAT_E_LAST = cast(clong, &h80040161)
#define CAT_E_CATIDNOEXIST _HRESULT_TYPEDEF_(&h80040160)
#define CAT_E_NODESCRIPTION _HRESULT_TYPEDEF_(&h80040161)
const CS_E_FIRST = cast(clong, &h80040164)
const CS_E_LAST = cast(clong, &h8004016F)
#define CS_E_PACKAGE_NOTFOUND _HRESULT_TYPEDEF_(&h80040164)
#define CS_E_NOT_DELETABLE _HRESULT_TYPEDEF_(&h80040165)
#define CS_E_CLASS_NOTFOUND _HRESULT_TYPEDEF_(&h80040166)
#define CS_E_INVALID_VERSION _HRESULT_TYPEDEF_(&h80040167)
#define CS_E_NO_CLASSSTORE _HRESULT_TYPEDEF_(&h80040168)
#define CS_E_OBJECT_NOTFOUND _HRESULT_TYPEDEF_(&h80040169)
#define CS_E_OBJECT_ALREADY_EXISTS _HRESULT_TYPEDEF_(&h8004016A)
#define CS_E_INVALID_PATH _HRESULT_TYPEDEF_(&h8004016B)
#define CS_E_NETWORK_ERROR _HRESULT_TYPEDEF_(&h8004016C)
#define CS_E_ADMIN_LIMIT_EXCEEDED _HRESULT_TYPEDEF_(&h8004016D)
#define CS_E_SCHEMA_MISMATCH _HRESULT_TYPEDEF_(&h8004016E)
#define CS_E_INTERNAL_ERROR _HRESULT_TYPEDEF_(&h8004016F)
const CACHE_E_FIRST = cast(clong, &h80040170)
const CACHE_E_LAST = cast(clong, &h8004017F)
const CACHE_S_FIRST = cast(clong, &h00040170)
const CACHE_S_LAST = cast(clong, &h0004017F)
#define CACHE_E_NOCACHE_UPDATED _HRESULT_TYPEDEF_(&h80040170)
const OLEOBJ_E_FIRST = cast(clong, &h80040180)
const OLEOBJ_E_LAST = cast(clong, &h8004018F)
const OLEOBJ_S_FIRST = cast(clong, &h00040180)
const OLEOBJ_S_LAST = cast(clong, &h0004018F)
#define OLEOBJ_E_NOVERBS _HRESULT_TYPEDEF_(&h80040180)
#define OLEOBJ_E_INVALIDVERB _HRESULT_TYPEDEF_(&h80040181)
const CLIENTSITE_E_FIRST = cast(clong, &h80040190)
const CLIENTSITE_E_LAST = cast(clong, &h8004019F)
const CLIENTSITE_S_FIRST = cast(clong, &h00040190)
const CLIENTSITE_S_LAST = cast(clong, &h0004019F)
#define INPLACE_E_NOTUNDOABLE _HRESULT_TYPEDEF_(&h800401A0)
#define INPLACE_E_NOTOOLSPACE _HRESULT_TYPEDEF_(&h800401A1)
const INPLACE_E_FIRST = cast(clong, &h800401A0)
const INPLACE_E_LAST = cast(clong, &h800401AF)
const INPLACE_S_FIRST = cast(clong, &h000401A0)
const INPLACE_S_LAST = cast(clong, &h000401AF)
const ENUM_E_FIRST = cast(clong, &h800401B0)
const ENUM_E_LAST = cast(clong, &h800401BF)
const ENUM_S_FIRST = cast(clong, &h000401B0)
const ENUM_S_LAST = cast(clong, &h000401BF)
const CONVERT10_E_FIRST = cast(clong, &h800401C0)
const CONVERT10_E_LAST = cast(clong, &h800401CF)
const CONVERT10_S_FIRST = cast(clong, &h000401C0)
const CONVERT10_S_LAST = cast(clong, &h000401CF)
#define CONVERT10_E_OLESTREAM_GET _HRESULT_TYPEDEF_(&h800401C0)
#define CONVERT10_E_OLESTREAM_PUT _HRESULT_TYPEDEF_(&h800401C1)
#define CONVERT10_E_OLESTREAM_FMT _HRESULT_TYPEDEF_(&h800401C2)
#define CONVERT10_E_OLESTREAM_BITMAP_TO_DIB _HRESULT_TYPEDEF_(&h800401C3)
#define CONVERT10_E_STG_FMT _HRESULT_TYPEDEF_(&h800401C4)
#define CONVERT10_E_STG_NO_STD_STREAM _HRESULT_TYPEDEF_(&h800401C5)
#define CONVERT10_E_STG_DIB_TO_BITMAP _HRESULT_TYPEDEF_(&h800401C6)
const CLIPBRD_E_FIRST = cast(clong, &h800401D0)
const CLIPBRD_E_LAST = cast(clong, &h800401DF)
const CLIPBRD_S_FIRST = cast(clong, &h000401D0)
const CLIPBRD_S_LAST = cast(clong, &h000401DF)
#define CLIPBRD_E_CANT_OPEN _HRESULT_TYPEDEF_(&h800401D0)
#define CLIPBRD_E_CANT_EMPTY _HRESULT_TYPEDEF_(&h800401D1)
#define CLIPBRD_E_CANT_SET _HRESULT_TYPEDEF_(&h800401D2)
#define CLIPBRD_E_BAD_DATA _HRESULT_TYPEDEF_(&h800401D3)
#define CLIPBRD_E_CANT_CLOSE _HRESULT_TYPEDEF_(&h800401D4)
const MK_E_FIRST = cast(clong, &h800401E0)
const MK_E_LAST = cast(clong, &h800401EF)
const MK_S_FIRST = cast(clong, &h000401E0)
const MK_S_LAST = cast(clong, &h000401EF)
#define MK_E_CONNECTMANUALLY _HRESULT_TYPEDEF_(&h800401E0)
#define MK_E_EXCEEDEDDEADLINE _HRESULT_TYPEDEF_(&h800401E1)
#define MK_E_NEEDGENERIC _HRESULT_TYPEDEF_(&h800401E2)
#define MK_E_UNAVAILABLE _HRESULT_TYPEDEF_(&h800401E3)
#define MK_E_SYNTAX _HRESULT_TYPEDEF_(&h800401E4)
#define MK_E_NOOBJECT _HRESULT_TYPEDEF_(&h800401E5)
#define MK_E_INVALIDEXTENSION _HRESULT_TYPEDEF_(&h800401E6)
#define MK_E_INTERMEDIATEINTERFACENOTSUPPORTED _HRESULT_TYPEDEF_(&h800401E7)
#define MK_E_NOTBINDABLE _HRESULT_TYPEDEF_(&h800401E8)
#define MK_E_NOTBOUND _HRESULT_TYPEDEF_(&h800401E9)
#define MK_E_CANTOPENFILE _HRESULT_TYPEDEF_(&h800401EA)
#define MK_E_MUSTBOTHERUSER _HRESULT_TYPEDEF_(&h800401EB)
#define MK_E_NOINVERSE _HRESULT_TYPEDEF_(&h800401EC)
#define MK_E_NOSTORAGE _HRESULT_TYPEDEF_(&h800401ED)
#define MK_E_NOPREFIX _HRESULT_TYPEDEF_(&h800401EE)
#define MK_E_ENUMERATION_FAILED _HRESULT_TYPEDEF_(&h800401EF)
const CO_E_FIRST = cast(clong, &h800401F0)
const CO_E_LAST = cast(clong, &h800401FF)
const CO_S_FIRST = cast(clong, &h000401F0)
const CO_S_LAST = cast(clong, &h000401FF)
#define CO_E_NOTINITIALIZED _HRESULT_TYPEDEF_(&h800401F0)
#define CO_E_ALREADYINITIALIZED _HRESULT_TYPEDEF_(&h800401F1)
#define CO_E_CANTDETERMINECLASS _HRESULT_TYPEDEF_(&h800401F2)
#define CO_E_CLASSSTRING _HRESULT_TYPEDEF_(&h800401F3)
#define CO_E_IIDSTRING _HRESULT_TYPEDEF_(&h800401F4)
#define CO_E_APPNOTFOUND _HRESULT_TYPEDEF_(&h800401F5)
#define CO_E_APPSINGLEUSE _HRESULT_TYPEDEF_(&h800401F6)
#define CO_E_ERRORINAPP _HRESULT_TYPEDEF_(&h800401F7)
#define CO_E_DLLNOTFOUND _HRESULT_TYPEDEF_(&h800401F8)
#define CO_E_ERRORINDLL _HRESULT_TYPEDEF_(&h800401F9)
#define CO_E_WRONGOSFORAPP _HRESULT_TYPEDEF_(&h800401FA)
#define CO_E_OBJNOTREG _HRESULT_TYPEDEF_(&h800401FB)
#define CO_E_OBJISREG _HRESULT_TYPEDEF_(&h800401FC)
#define CO_E_OBJNOTCONNECTED _HRESULT_TYPEDEF_(&h800401FD)
#define CO_E_APPDIDNTREG _HRESULT_TYPEDEF_(&h800401FE)
#define CO_E_RELEASED _HRESULT_TYPEDEF_(&h800401FF)
const EVENT_E_FIRST = cast(clong, &h80040200)
const EVENT_E_LAST = cast(clong, &h8004021F)
const EVENT_S_FIRST = cast(clong, &h00040200)
const EVENT_S_LAST = cast(clong, &h0004021F)
#define EVENT_S_SOME_SUBSCRIBERS_FAILED _HRESULT_TYPEDEF_(&h00040200)
#define EVENT_E_ALL_SUBSCRIBERS_FAILED _HRESULT_TYPEDEF_(&h80040201)
#define EVENT_S_NOSUBSCRIBERS _HRESULT_TYPEDEF_(&h00040202)
#define EVENT_E_QUERYSYNTAX _HRESULT_TYPEDEF_(&h80040203)
#define EVENT_E_QUERYFIELD _HRESULT_TYPEDEF_(&h80040204)
#define EVENT_E_INTERNALEXCEPTION _HRESULT_TYPEDEF_(&h80040205)
#define EVENT_E_INTERNALERROR _HRESULT_TYPEDEF_(&h80040206)
#define EVENT_E_INVALID_PER_USER_SID _HRESULT_TYPEDEF_(&h80040207)
#define EVENT_E_USER_EXCEPTION _HRESULT_TYPEDEF_(&h80040208)
#define EVENT_E_TOO_MANY_METHODS _HRESULT_TYPEDEF_(&h80040209)
#define EVENT_E_MISSING_EVENTCLASS _HRESULT_TYPEDEF_(&h8004020A)
#define EVENT_E_NOT_ALL_REMOVED _HRESULT_TYPEDEF_(&h8004020B)
#define EVENT_E_COMPLUS_NOT_INSTALLED _HRESULT_TYPEDEF_(&h8004020C)
#define EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT _HRESULT_TYPEDEF_(&h8004020D)
#define EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT _HRESULT_TYPEDEF_(&h8004020E)
#define EVENT_E_INVALID_EVENT_CLASS_PARTITION _HRESULT_TYPEDEF_(&h8004020F)
#define EVENT_E_PER_USER_SID_NOT_LOGGED_ON _HRESULT_TYPEDEF_(&h80040210)
const XACT_E_FIRST = &h8004D000
const XACT_E_LAST = &h8004D029
const XACT_S_FIRST = &h0004D000
const XACT_S_LAST = &h0004D010
#define XACT_E_ALREADYOTHERSINGLEPHASE _HRESULT_TYPEDEF_(&h8004D000)
#define XACT_E_CANTRETAIN _HRESULT_TYPEDEF_(&h8004D001)
#define XACT_E_COMMITFAILED _HRESULT_TYPEDEF_(&h8004D002)
#define XACT_E_COMMITPREVENTED _HRESULT_TYPEDEF_(&h8004D003)
#define XACT_E_HEURISTICABORT _HRESULT_TYPEDEF_(&h8004D004)
#define XACT_E_HEURISTICCOMMIT _HRESULT_TYPEDEF_(&h8004D005)
#define XACT_E_HEURISTICDAMAGE _HRESULT_TYPEDEF_(&h8004D006)
#define XACT_E_HEURISTICDANGER _HRESULT_TYPEDEF_(&h8004D007)
#define XACT_E_ISOLATIONLEVEL _HRESULT_TYPEDEF_(&h8004D008)
#define XACT_E_NOASYNC _HRESULT_TYPEDEF_(&h8004D009)
#define XACT_E_NOENLIST _HRESULT_TYPEDEF_(&h8004D00A)
#define XACT_E_NOISORETAIN _HRESULT_TYPEDEF_(&h8004D00B)
#define XACT_E_NORESOURCE _HRESULT_TYPEDEF_(&h8004D00C)
#define XACT_E_NOTCURRENT _HRESULT_TYPEDEF_(&h8004D00D)
#define XACT_E_NOTRANSACTION _HRESULT_TYPEDEF_(&h8004D00E)
#define XACT_E_NOTSUPPORTED _HRESULT_TYPEDEF_(&h8004D00F)
#define XACT_E_UNKNOWNRMGRID _HRESULT_TYPEDEF_(&h8004D010)
#define XACT_E_WRONGSTATE _HRESULT_TYPEDEF_(&h8004D011)
#define XACT_E_WRONGUOW _HRESULT_TYPEDEF_(&h8004D012)
#define XACT_E_XTIONEXISTS _HRESULT_TYPEDEF_(&h8004D013)
#define XACT_E_NOIMPORTOBJECT _HRESULT_TYPEDEF_(&h8004D014)
#define XACT_E_INVALIDCOOKIE _HRESULT_TYPEDEF_(&h8004D015)
#define XACT_E_INDOUBT _HRESULT_TYPEDEF_(&h8004D016)
#define XACT_E_NOTIMEOUT _HRESULT_TYPEDEF_(&h8004D017)
#define XACT_E_ALREADYINPROGRESS _HRESULT_TYPEDEF_(&h8004D018)
#define XACT_E_ABORTED _HRESULT_TYPEDEF_(&h8004D019)
#define XACT_E_LOGFULL _HRESULT_TYPEDEF_(&h8004D01A)
#define XACT_E_TMNOTAVAILABLE _HRESULT_TYPEDEF_(&h8004D01B)
#define XACT_E_CONNECTION_DOWN _HRESULT_TYPEDEF_(&h8004D01C)
#define XACT_E_CONNECTION_DENIED _HRESULT_TYPEDEF_(&h8004D01D)
#define XACT_E_REENLISTTIMEOUT _HRESULT_TYPEDEF_(&h8004D01E)
#define XACT_E_TIP_CONNECT_FAILED _HRESULT_TYPEDEF_(&h8004D01F)
#define XACT_E_TIP_PROTOCOL_ERROR _HRESULT_TYPEDEF_(&h8004D020)
#define XACT_E_TIP_PULL_FAILED _HRESULT_TYPEDEF_(&h8004D021)
#define XACT_E_DEST_TMNOTAVAILABLE _HRESULT_TYPEDEF_(&h8004D022)
#define XACT_E_TIP_DISABLED _HRESULT_TYPEDEF_(&h8004D023)
#define XACT_E_NETWORK_TX_DISABLED _HRESULT_TYPEDEF_(&h8004D024)
#define XACT_E_PARTNER_NETWORK_TX_DISABLED _HRESULT_TYPEDEF_(&h8004D025)
#define XACT_E_XA_TX_DISABLED _HRESULT_TYPEDEF_(&h8004D026)
#define XACT_E_UNABLE_TO_READ_DTC_CONFIG _HRESULT_TYPEDEF_(&h8004D027)
#define XACT_E_UNABLE_TO_LOAD_DTC_PROXY _HRESULT_TYPEDEF_(&h8004D028)
#define XACT_E_ABORTING _HRESULT_TYPEDEF_(&h8004D029)
#define XACT_E_CLERKNOTFOUND _HRESULT_TYPEDEF_(&h8004D080)
#define XACT_E_CLERKEXISTS _HRESULT_TYPEDEF_(&h8004D081)
#define XACT_E_RECOVERYINPROGRESS _HRESULT_TYPEDEF_(&h8004D082)
#define XACT_E_TRANSACTIONCLOSED _HRESULT_TYPEDEF_(&h8004D083)
#define XACT_E_INVALIDLSN _HRESULT_TYPEDEF_(&h8004D084)
#define XACT_E_REPLAYREQUEST _HRESULT_TYPEDEF_(&h8004D085)
#define XACT_S_ASYNC _HRESULT_TYPEDEF_(&h0004D000)
#define XACT_S_DEFECT _HRESULT_TYPEDEF_(&h0004D001)
#define XACT_S_READONLY _HRESULT_TYPEDEF_(&h0004D002)
#define XACT_S_SOMENORETAIN _HRESULT_TYPEDEF_(&h0004D003)
#define XACT_S_OKINFORM _HRESULT_TYPEDEF_(&h0004D004)
#define XACT_S_MADECHANGESCONTENT _HRESULT_TYPEDEF_(&h0004D005)
#define XACT_S_MADECHANGESINFORM _HRESULT_TYPEDEF_(&h0004D006)
#define XACT_S_ALLNORETAIN _HRESULT_TYPEDEF_(&h0004D007)
#define XACT_S_ABORTING _HRESULT_TYPEDEF_(&h0004D008)
#define XACT_S_SINGLEPHASE _HRESULT_TYPEDEF_(&h0004D009)
#define XACT_S_LOCALLY_OK _HRESULT_TYPEDEF_(&h0004D00A)
#define XACT_S_LASTRESOURCEMANAGER _HRESULT_TYPEDEF_(&h0004D010)
const CONTEXT_E_FIRST = cast(clong, &h8004E000)
const CONTEXT_E_LAST = cast(clong, &h8004E02F)
const CONTEXT_S_FIRST = cast(clong, &h0004E000)
const CONTEXT_S_LAST = cast(clong, &h0004E02F)
#define CONTEXT_E_ABORTED _HRESULT_TYPEDEF_(&h8004E002)
#define CONTEXT_E_ABORTING _HRESULT_TYPEDEF_(&h8004E003)
#define CONTEXT_E_NOCONTEXT _HRESULT_TYPEDEF_(&h8004E004)
#define CONTEXT_E_WOULD_DEADLOCK _HRESULT_TYPEDEF_(&h8004E005)
#define CONTEXT_E_SYNCH_TIMEOUT _HRESULT_TYPEDEF_(&h8004E006)
#define CONTEXT_E_OLDREF _HRESULT_TYPEDEF_(&h8004E007)
#define CONTEXT_E_ROLENOTFOUND _HRESULT_TYPEDEF_(&h8004E00C)
#define CONTEXT_E_TMNOTAVAILABLE _HRESULT_TYPEDEF_(&h8004E00F)
#define CO_E_ACTIVATIONFAILED _HRESULT_TYPEDEF_(&h8004E021)
#define CO_E_ACTIVATIONFAILED_EVENTLOGGED _HRESULT_TYPEDEF_(&h8004E022)
#define CO_E_ACTIVATIONFAILED_CATALOGERROR _HRESULT_TYPEDEF_(&h8004E023)
#define CO_E_ACTIVATIONFAILED_TIMEOUT _HRESULT_TYPEDEF_(&h8004E024)
#define CO_E_INITIALIZATIONFAILED _HRESULT_TYPEDEF_(&h8004E025)
#define CONTEXT_E_NOJIT _HRESULT_TYPEDEF_(&h8004E026)
#define CONTEXT_E_NOTRANSACTION _HRESULT_TYPEDEF_(&h8004E027)
#define CO_E_THREADINGMODEL_CHANGED _HRESULT_TYPEDEF_(&h8004E028)
#define CO_E_NOIISINTRINSICS _HRESULT_TYPEDEF_(&h8004E029)
#define CO_E_NOCOOKIES _HRESULT_TYPEDEF_(&h8004E02A)
#define CO_E_DBERROR _HRESULT_TYPEDEF_(&h8004E02B)
#define CO_E_NOTPOOLED _HRESULT_TYPEDEF_(&h8004E02C)
#define CO_E_NOTCONSTRUCTED _HRESULT_TYPEDEF_(&h8004E02D)
#define CO_E_NOSYNCHRONIZATION _HRESULT_TYPEDEF_(&h8004E02E)
#define CO_E_ISOLEVELMISMATCH _HRESULT_TYPEDEF_(&h8004E02F)
#define OLE_S_USEREG _HRESULT_TYPEDEF_(&h00040000)
#define OLE_S_STATIC _HRESULT_TYPEDEF_(&h00040001)
#define OLE_S_MAC_CLIPFORMAT _HRESULT_TYPEDEF_(&h00040002)
#define DRAGDROP_S_DROP _HRESULT_TYPEDEF_(&h00040100)
#define DRAGDROP_S_CANCEL _HRESULT_TYPEDEF_(&h00040101)
#define DRAGDROP_S_USEDEFAULTCURSORS _HRESULT_TYPEDEF_(&h00040102)
#define DATA_S_SAMEFORMATETC _HRESULT_TYPEDEF_(&h00040130)
#define VIEW_S_ALREADY_FROZEN _HRESULT_TYPEDEF_(&h00040140)
#define CACHE_S_FORMATETC_NOTSUPPORTED _HRESULT_TYPEDEF_(&h00040170)
#define CACHE_S_SAMECACHE _HRESULT_TYPEDEF_(&h00040171)
#define CACHE_S_SOMECACHES_NOTUPDATED _HRESULT_TYPEDEF_(&h00040172)
#define OLEOBJ_S_INVALIDVERB _HRESULT_TYPEDEF_(&h00040180)
#define OLEOBJ_S_CANNOT_DOVERB_NOW _HRESULT_TYPEDEF_(&h00040181)
#define OLEOBJ_S_INVALIDHWND _HRESULT_TYPEDEF_(&h00040182)
#define INPLACE_S_TRUNCATED _HRESULT_TYPEDEF_(&h000401A0)
#define CONVERT10_S_NO_PRESENTATION _HRESULT_TYPEDEF_(&h000401C0)
#define MK_S_REDUCED_TO_SELF _HRESULT_TYPEDEF_(&h000401E2)
#define MK_S_ME _HRESULT_TYPEDEF_(&h000401E4)
#define MK_S_HIM _HRESULT_TYPEDEF_(&h000401E5)
#define MK_S_US _HRESULT_TYPEDEF_(&h000401E6)
#define MK_S_MONIKERALREADYREGISTERED _HRESULT_TYPEDEF_(&h000401E7)
#define SCHED_S_TASK_READY _HRESULT_TYPEDEF_(&h00041300)
#define SCHED_S_TASK_RUNNING _HRESULT_TYPEDEF_(&h00041301)
#define SCHED_S_TASK_DISABLED _HRESULT_TYPEDEF_(&h00041302)
#define SCHED_S_TASK_HAS_NOT_RUN _HRESULT_TYPEDEF_(&h00041303)
#define SCHED_S_TASK_NO_MORE_RUNS _HRESULT_TYPEDEF_(&h00041304)
#define SCHED_S_TASK_NOT_SCHEDULED _HRESULT_TYPEDEF_(&h00041305)
#define SCHED_S_TASK_TERMINATED _HRESULT_TYPEDEF_(&h00041306)
#define SCHED_S_TASK_NO_VALID_TRIGGERS _HRESULT_TYPEDEF_(&h00041307)
#define SCHED_S_EVENT_TRIGGER _HRESULT_TYPEDEF_(&h00041308)
#define SCHED_E_TRIGGER_NOT_FOUND _HRESULT_TYPEDEF_(&h80041309)
#define SCHED_E_TASK_NOT_READY _HRESULT_TYPEDEF_(&h8004130A)
#define SCHED_E_TASK_NOT_RUNNING _HRESULT_TYPEDEF_(&h8004130B)
#define SCHED_E_SERVICE_NOT_INSTALLED _HRESULT_TYPEDEF_(&h8004130C)
#define SCHED_E_CANNOT_OPEN_TASK _HRESULT_TYPEDEF_(&h8004130D)
#define SCHED_E_INVALID_TASK _HRESULT_TYPEDEF_(&h8004130E)
#define SCHED_E_ACCOUNT_INFORMATION_NOT_SET _HRESULT_TYPEDEF_(&h8004130F)
#define SCHED_E_ACCOUNT_NAME_NOT_FOUND _HRESULT_TYPEDEF_(&h80041310)
#define SCHED_E_ACCOUNT_DBASE_CORRUPT _HRESULT_TYPEDEF_(&h80041311)
#define SCHED_E_NO_SECURITY_SERVICES _HRESULT_TYPEDEF_(&h80041312)
#define SCHED_E_UNKNOWN_OBJECT_VERSION _HRESULT_TYPEDEF_(&h80041313)
#define SCHED_E_UNSUPPORTED_ACCOUNT_OPTION _HRESULT_TYPEDEF_(&h80041314)
#define SCHED_E_SERVICE_NOT_RUNNING _HRESULT_TYPEDEF_(&h80041315)
#define CO_E_CLASS_CREATE_FAILED _HRESULT_TYPEDEF_(&h80080001)
#define CO_E_SCM_ERROR _HRESULT_TYPEDEF_(&h80080002)
#define CO_E_SCM_RPC_FAILURE _HRESULT_TYPEDEF_(&h80080003)
#define CO_E_BAD_PATH _HRESULT_TYPEDEF_(&h80080004)
#define CO_E_SERVER_EXEC_FAILURE _HRESULT_TYPEDEF_(&h80080005)
#define CO_E_OBJSRV_RPC_FAILURE _HRESULT_TYPEDEF_(&h80080006)
#define MK_E_NO_NORMALIZED _HRESULT_TYPEDEF_(&h80080007)
#define CO_E_SERVER_STOPPING _HRESULT_TYPEDEF_(&h80080008)
#define MEM_E_INVALID_ROOT _HRESULT_TYPEDEF_(&h80080009)
#define MEM_E_INVALID_LINK _HRESULT_TYPEDEF_(&h80080010)
#define MEM_E_INVALID_SIZE _HRESULT_TYPEDEF_(&h80080011)
#define CO_S_NOTALLINTERFACES _HRESULT_TYPEDEF_(&h00080012)
#define CO_S_MACHINENAMENOTFOUND _HRESULT_TYPEDEF_(&h00080013)
#define DISP_E_UNKNOWNINTERFACE _HRESULT_TYPEDEF_(&h80020001)
#define DISP_E_MEMBERNOTFOUND _HRESULT_TYPEDEF_(&h80020003)
#define DISP_E_PARAMNOTFOUND _HRESULT_TYPEDEF_(&h80020004)
#define DISP_E_TYPEMISMATCH _HRESULT_TYPEDEF_(&h80020005)
#define DISP_E_UNKNOWNNAME _HRESULT_TYPEDEF_(&h80020006)
#define DISP_E_NONAMEDARGS _HRESULT_TYPEDEF_(&h80020007)
#define DISP_E_BADVARTYPE _HRESULT_TYPEDEF_(&h80020008)
#define DISP_E_EXCEPTION _HRESULT_TYPEDEF_(&h80020009)
#define DISP_E_OVERFLOW _HRESULT_TYPEDEF_(&h8002000A)
#define DISP_E_BADINDEX _HRESULT_TYPEDEF_(&h8002000B)
#define DISP_E_UNKNOWNLCID _HRESULT_TYPEDEF_(&h8002000C)
#define DISP_E_ARRAYISLOCKED _HRESULT_TYPEDEF_(&h8002000D)
#define DISP_E_BADPARAMCOUNT _HRESULT_TYPEDEF_(&h8002000E)
#define DISP_E_PARAMNOTOPTIONAL _HRESULT_TYPEDEF_(&h8002000F)
#define DISP_E_BADCALLEE _HRESULT_TYPEDEF_(&h80020010)
#define DISP_E_NOTACOLLECTION _HRESULT_TYPEDEF_(&h80020011)
#define DISP_E_DIVBYZERO _HRESULT_TYPEDEF_(&h80020012)
#define DISP_E_BUFFERTOOSMALL _HRESULT_TYPEDEF_(&h80020013)
#define TYPE_E_BUFFERTOOSMALL _HRESULT_TYPEDEF_(&h80028016)
#define TYPE_E_FIELDNOTFOUND _HRESULT_TYPEDEF_(&h80028017)
#define TYPE_E_INVDATAREAD _HRESULT_TYPEDEF_(&h80028018)
#define TYPE_E_UNSUPFORMAT _HRESULT_TYPEDEF_(&h80028019)
#define TYPE_E_REGISTRYACCESS _HRESULT_TYPEDEF_(&h8002801C)
#define TYPE_E_LIBNOTREGISTERED _HRESULT_TYPEDEF_(&h8002801D)
#define TYPE_E_UNDEFINEDTYPE _HRESULT_TYPEDEF_(&h80028027)
#define TYPE_E_QUALIFIEDNAMEDISALLOWED _HRESULT_TYPEDEF_(&h80028028)
#define TYPE_E_INVALIDSTATE _HRESULT_TYPEDEF_(&h80028029)
#define TYPE_E_WRONGTYPEKIND _HRESULT_TYPEDEF_(&h8002802A)
#define TYPE_E_ELEMENTNOTFOUND _HRESULT_TYPEDEF_(&h8002802B)
#define TYPE_E_AMBIGUOUSNAME _HRESULT_TYPEDEF_(&h8002802C)
#define TYPE_E_NAMECONFLICT _HRESULT_TYPEDEF_(&h8002802D)
#define TYPE_E_UNKNOWNLCID _HRESULT_TYPEDEF_(&h8002802E)
#define TYPE_E_DLLFUNCTIONNOTFOUND _HRESULT_TYPEDEF_(&h8002802F)
#define TYPE_E_BADMODULEKIND _HRESULT_TYPEDEF_(&h800288BD)
#define TYPE_E_SIZETOOBIG _HRESULT_TYPEDEF_(&h800288C5)
#define TYPE_E_DUPLICATEID _HRESULT_TYPEDEF_(&h800288C6)
#define TYPE_E_INVALIDID _HRESULT_TYPEDEF_(&h800288CF)
#define TYPE_E_TYPEMISMATCH _HRESULT_TYPEDEF_(&h80028CA0)
#define TYPE_E_OUTOFBOUNDS _HRESULT_TYPEDEF_(&h80028CA1)
#define TYPE_E_IOERROR _HRESULT_TYPEDEF_(&h80028CA2)
#define TYPE_E_CANTCREATETMPFILE _HRESULT_TYPEDEF_(&h80028CA3)
#define TYPE_E_CANTLOADLIBRARY _HRESULT_TYPEDEF_(&h80029C4A)
#define TYPE_E_INCONSISTENTPROPFUNCS _HRESULT_TYPEDEF_(&h80029C83)
#define TYPE_E_CIRCULARTYPE _HRESULT_TYPEDEF_(&h80029C84)
#define STG_E_INVALIDFUNCTION _HRESULT_TYPEDEF_(&h80030001)
#define STG_E_FILENOTFOUND _HRESULT_TYPEDEF_(&h80030002)
#define STG_E_PATHNOTFOUND _HRESULT_TYPEDEF_(&h80030003)
#define STG_E_TOOMANYOPENFILES _HRESULT_TYPEDEF_(&h80030004)
#define STG_E_ACCESSDENIED _HRESULT_TYPEDEF_(&h80030005)
#define STG_E_INVALIDHANDLE _HRESULT_TYPEDEF_(&h80030006)
#define STG_E_INSUFFICIENTMEMORY _HRESULT_TYPEDEF_(&h80030008)
#define STG_E_INVALIDPOINTER _HRESULT_TYPEDEF_(&h80030009)
#define STG_E_NOMOREFILES _HRESULT_TYPEDEF_(&h80030012)
#define STG_E_DISKISWRITEPROTECTED _HRESULT_TYPEDEF_(&h80030013)
#define STG_E_SEEKERROR _HRESULT_TYPEDEF_(&h80030019)
#define STG_E_WRITEFAULT _HRESULT_TYPEDEF_(&h8003001D)
#define STG_E_READFAULT _HRESULT_TYPEDEF_(&h8003001E)
#define STG_E_SHAREVIOLATION _HRESULT_TYPEDEF_(&h80030020)
#define STG_E_LOCKVIOLATION _HRESULT_TYPEDEF_(&h80030021)
#define STG_E_FILEALREADYEXISTS _HRESULT_TYPEDEF_(&h80030050)
#define STG_E_INVALIDPARAMETER _HRESULT_TYPEDEF_(&h80030057)
#define STG_E_MEDIUMFULL _HRESULT_TYPEDEF_(&h80030070)
#define STG_E_PROPSETMISMATCHED _HRESULT_TYPEDEF_(&h800300F0)
#define STG_E_ABNORMALAPIEXIT _HRESULT_TYPEDEF_(&h800300FA)
#define STG_E_INVALIDHEADER _HRESULT_TYPEDEF_(&h800300FB)
#define STG_E_INVALIDNAME _HRESULT_TYPEDEF_(&h800300FC)
#define STG_E_UNKNOWN _HRESULT_TYPEDEF_(&h800300FD)
#define STG_E_UNIMPLEMENTEDFUNCTION _HRESULT_TYPEDEF_(&h800300FE)
#define STG_E_INVALIDFLAG _HRESULT_TYPEDEF_(&h800300FF)
#define STG_E_INUSE _HRESULT_TYPEDEF_(&h80030100)
#define STG_E_NOTCURRENT _HRESULT_TYPEDEF_(&h80030101)
#define STG_E_REVERTED _HRESULT_TYPEDEF_(&h80030102)
#define STG_E_CANTSAVE _HRESULT_TYPEDEF_(&h80030103)
#define STG_E_OLDFORMAT _HRESULT_TYPEDEF_(&h80030104)
#define STG_E_OLDDLL _HRESULT_TYPEDEF_(&h80030105)
#define STG_E_SHAREREQUIRED _HRESULT_TYPEDEF_(&h80030106)
#define STG_E_NOTFILEBASEDSTORAGE _HRESULT_TYPEDEF_(&h80030107)
#define STG_E_EXTANTMARSHALLINGS _HRESULT_TYPEDEF_(&h80030108)
#define STG_E_DOCFILECORRUPT _HRESULT_TYPEDEF_(&h80030109)
#define STG_E_BADBASEADDRESS _HRESULT_TYPEDEF_(&h80030110)
#define STG_E_DOCFILETOOLARGE _HRESULT_TYPEDEF_(&h80030111)
#define STG_E_NOTSIMPLEFORMAT _HRESULT_TYPEDEF_(&h80030112)
#define STG_E_INCOMPLETE _HRESULT_TYPEDEF_(&h80030201)
#define STG_E_TERMINATED _HRESULT_TYPEDEF_(&h80030202)
#define STG_S_CONVERTED _HRESULT_TYPEDEF_(&h00030200)
#define STG_S_BLOCK _HRESULT_TYPEDEF_(&h00030201)
#define STG_S_RETRYNOW _HRESULT_TYPEDEF_(&h00030202)
#define STG_S_MONITORING _HRESULT_TYPEDEF_(&h00030203)
#define STG_S_MULTIPLEOPENS _HRESULT_TYPEDEF_(&h00030204)
#define STG_S_CONSOLIDATIONFAILED _HRESULT_TYPEDEF_(&h00030205)
#define STG_S_CANNOTCONSOLIDATE _HRESULT_TYPEDEF_(&h00030206)
#define STG_E_STATUS_COPY_PROTECTION_FAILURE _HRESULT_TYPEDEF_(&h80030305)
#define STG_E_CSS_AUTHENTICATION_FAILURE _HRESULT_TYPEDEF_(&h80030306)
#define STG_E_CSS_KEY_NOT_PRESENT _HRESULT_TYPEDEF_(&h80030307)
#define STG_E_CSS_KEY_NOT_ESTABLISHED _HRESULT_TYPEDEF_(&h80030308)
#define STG_E_CSS_SCRAMBLED_SECTOR _HRESULT_TYPEDEF_(&h80030309)
#define STG_E_CSS_REGION_MISMATCH _HRESULT_TYPEDEF_(&h8003030A)
#define STG_E_RESETS_EXHAUSTED _HRESULT_TYPEDEF_(&h8003030B)
#define RPC_E_CALL_REJECTED _HRESULT_TYPEDEF_(&h80010001)
#define RPC_E_CALL_CANCELED _HRESULT_TYPEDEF_(&h80010002)
#define RPC_E_CANTPOST_INSENDCALL _HRESULT_TYPEDEF_(&h80010003)
#define RPC_E_CANTCALLOUT_INASYNCCALL _HRESULT_TYPEDEF_(&h80010004)
#define RPC_E_CANTCALLOUT_INEXTERNALCALL _HRESULT_TYPEDEF_(&h80010005)
#define RPC_E_CONNECTION_TERMINATED _HRESULT_TYPEDEF_(&h80010006)
#define RPC_E_SERVER_DIED _HRESULT_TYPEDEF_(&h80010007)
#define RPC_E_CLIENT_DIED _HRESULT_TYPEDEF_(&h80010008)
#define RPC_E_INVALID_DATAPACKET _HRESULT_TYPEDEF_(&h80010009)
#define RPC_E_CANTTRANSMIT_CALL _HRESULT_TYPEDEF_(&h8001000A)
#define RPC_E_CLIENT_CANTMARSHAL_DATA _HRESULT_TYPEDEF_(&h8001000B)
#define RPC_E_CLIENT_CANTUNMARSHAL_DATA _HRESULT_TYPEDEF_(&h8001000C)
#define RPC_E_SERVER_CANTMARSHAL_DATA _HRESULT_TYPEDEF_(&h8001000D)
#define RPC_E_SERVER_CANTUNMARSHAL_DATA _HRESULT_TYPEDEF_(&h8001000E)
#define RPC_E_INVALID_DATA _HRESULT_TYPEDEF_(&h8001000F)
#define RPC_E_INVALID_PARAMETER _HRESULT_TYPEDEF_(&h80010010)
#define RPC_E_CANTCALLOUT_AGAIN _HRESULT_TYPEDEF_(&h80010011)
#define RPC_E_SERVER_DIED_DNE _HRESULT_TYPEDEF_(&h80010012)
#define RPC_E_SYS_CALL_FAILED _HRESULT_TYPEDEF_(&h80010100)
#define RPC_E_OUT_OF_RESOURCES _HRESULT_TYPEDEF_(&h80010101)
#define RPC_E_ATTEMPTED_MULTITHREAD _HRESULT_TYPEDEF_(&h80010102)
#define RPC_E_NOT_REGISTERED _HRESULT_TYPEDEF_(&h80010103)
#define RPC_E_FAULT _HRESULT_TYPEDEF_(&h80010104)
#define RPC_E_SERVERFAULT _HRESULT_TYPEDEF_(&h80010105)
#define RPC_E_CHANGED_MODE _HRESULT_TYPEDEF_(&h80010106)
#define RPC_E_INVALIDMETHOD _HRESULT_TYPEDEF_(&h80010107)
#define RPC_E_DISCONNECTED _HRESULT_TYPEDEF_(&h80010108)
#define RPC_E_RETRY _HRESULT_TYPEDEF_(&h80010109)
#define RPC_E_SERVERCALL_RETRYLATER _HRESULT_TYPEDEF_(&h8001010A)
#define RPC_E_SERVERCALL_REJECTED _HRESULT_TYPEDEF_(&h8001010B)
#define RPC_E_INVALID_CALLDATA _HRESULT_TYPEDEF_(&h8001010C)
#define RPC_E_CANTCALLOUT_ININPUTSYNCCALL _HRESULT_TYPEDEF_(&h8001010D)
#define RPC_E_WRONG_THREAD _HRESULT_TYPEDEF_(&h8001010E)
#define RPC_E_THREAD_NOT_INIT _HRESULT_TYPEDEF_(&h8001010F)
#define RPC_E_VERSION_MISMATCH _HRESULT_TYPEDEF_(&h80010110)
#define RPC_E_INVALID_HEADER _HRESULT_TYPEDEF_(&h80010111)
#define RPC_E_INVALID_EXTENSION _HRESULT_TYPEDEF_(&h80010112)
#define RPC_E_INVALID_IPID _HRESULT_TYPEDEF_(&h80010113)
#define RPC_E_INVALID_OBJECT _HRESULT_TYPEDEF_(&h80010114)
#define RPC_S_CALLPENDING _HRESULT_TYPEDEF_(&h80010115)
#define RPC_S_WAITONTIMER _HRESULT_TYPEDEF_(&h80010116)
#define RPC_E_CALL_COMPLETE _HRESULT_TYPEDEF_(&h80010117)
#define RPC_E_UNSECURE_CALL _HRESULT_TYPEDEF_(&h80010118)
#define RPC_E_TOO_LATE _HRESULT_TYPEDEF_(&h80010119)
#define RPC_E_NO_GOOD_SECURITY_PACKAGES _HRESULT_TYPEDEF_(&h8001011A)
#define RPC_E_ACCESS_DENIED _HRESULT_TYPEDEF_(&h8001011B)
#define RPC_E_REMOTE_DISABLED _HRESULT_TYPEDEF_(&h8001011C)
#define RPC_E_INVALID_OBJREF _HRESULT_TYPEDEF_(&h8001011D)
#define RPC_E_NO_CONTEXT _HRESULT_TYPEDEF_(&h8001011E)
#define RPC_E_TIMEOUT _HRESULT_TYPEDEF_(&h8001011F)
#define RPC_E_NO_SYNC _HRESULT_TYPEDEF_(&h80010120)
#define RPC_E_FULLSIC_REQUIRED _HRESULT_TYPEDEF_(&h80010121)
#define RPC_E_INVALID_STD_NAME _HRESULT_TYPEDEF_(&h80010122)
#define CO_E_FAILEDTOIMPERSONATE _HRESULT_TYPEDEF_(&h80010123)
#define CO_E_FAILEDTOGETSECCTX _HRESULT_TYPEDEF_(&h80010124)
#define CO_E_FAILEDTOOPENTHREADTOKEN _HRESULT_TYPEDEF_(&h80010125)
#define CO_E_FAILEDTOGETTOKENINFO _HRESULT_TYPEDEF_(&h80010126)
#define CO_E_TRUSTEEDOESNTMATCHCLIENT _HRESULT_TYPEDEF_(&h80010127)
#define CO_E_FAILEDTOQUERYCLIENTBLANKET _HRESULT_TYPEDEF_(&h80010128)
#define CO_E_FAILEDTOSETDACL _HRESULT_TYPEDEF_(&h80010129)
#define CO_E_ACCESSCHECKFAILED _HRESULT_TYPEDEF_(&h8001012A)
#define CO_E_NETACCESSAPIFAILED _HRESULT_TYPEDEF_(&h8001012B)
#define CO_E_WRONGTRUSTEENAMESYNTAX _HRESULT_TYPEDEF_(&h8001012C)
#define CO_E_INVALIDSID _HRESULT_TYPEDEF_(&h8001012D)
#define CO_E_CONVERSIONFAILED _HRESULT_TYPEDEF_(&h8001012E)
#define CO_E_NOMATCHINGSIDFOUND _HRESULT_TYPEDEF_(&h8001012F)
#define CO_E_LOOKUPACCSIDFAILED _HRESULT_TYPEDEF_(&h80010130)
#define CO_E_NOMATCHINGNAMEFOUND _HRESULT_TYPEDEF_(&h80010131)
#define CO_E_LOOKUPACCNAMEFAILED _HRESULT_TYPEDEF_(&h80010132)
#define CO_E_SETSERLHNDLFAILED _HRESULT_TYPEDEF_(&h80010133)
#define CO_E_FAILEDTOGETWINDIR _HRESULT_TYPEDEF_(&h80010134)
#define CO_E_PATHTOOLONG _HRESULT_TYPEDEF_(&h80010135)
#define CO_E_FAILEDTOGENUUID _HRESULT_TYPEDEF_(&h80010136)
#define CO_E_FAILEDTOCREATEFILE _HRESULT_TYPEDEF_(&h80010137)
#define CO_E_FAILEDTOCLOSEHANDLE _HRESULT_TYPEDEF_(&h80010138)
#define CO_E_EXCEEDSYSACLLIMIT _HRESULT_TYPEDEF_(&h80010139)
#define CO_E_ACESINWRONGORDER _HRESULT_TYPEDEF_(&h8001013A)
#define CO_E_INCOMPATIBLESTREAMVERSION _HRESULT_TYPEDEF_(&h8001013B)
#define CO_E_FAILEDTOOPENPROCESSTOKEN _HRESULT_TYPEDEF_(&h8001013C)
#define CO_E_DECODEFAILED _HRESULT_TYPEDEF_(&h8001013D)
#define CO_E_ACNOTINITIALIZED _HRESULT_TYPEDEF_(&h8001013F)
#define CO_E_CANCEL_DISABLED _HRESULT_TYPEDEF_(&h80010140)
#define RPC_E_UNEXPECTED _HRESULT_TYPEDEF_(&h8001FFFF)
#define ERROR_AUDITING_DISABLED _HRESULT_TYPEDEF_(&hC0090001)
#define ERROR_ALL_SIDS_FILTERED _HRESULT_TYPEDEF_(&hC0090002)
#define NTE_BAD_UID _HRESULT_TYPEDEF_(&h80090001)
#define NTE_BAD_HASH _HRESULT_TYPEDEF_(&h80090002)
#define NTE_BAD_KEY _HRESULT_TYPEDEF_(&h80090003)
#define NTE_BAD_LEN _HRESULT_TYPEDEF_(&h80090004)
#define NTE_BAD_DATA _HRESULT_TYPEDEF_(&h80090005)
#define NTE_BAD_SIGNATURE _HRESULT_TYPEDEF_(&h80090006)
#define NTE_BAD_VER _HRESULT_TYPEDEF_(&h80090007)
#define NTE_BAD_ALGID _HRESULT_TYPEDEF_(&h80090008)
#define NTE_BAD_FLAGS _HRESULT_TYPEDEF_(&h80090009)
#define NTE_BAD_TYPE _HRESULT_TYPEDEF_(&h8009000A)
#define NTE_BAD_KEY_STATE _HRESULT_TYPEDEF_(&h8009000B)
#define NTE_BAD_HASH_STATE _HRESULT_TYPEDEF_(&h8009000C)
#define NTE_NO_KEY _HRESULT_TYPEDEF_(&h8009000D)
#define NTE_NO_MEMORY _HRESULT_TYPEDEF_(&h8009000E)
#define NTE_EXISTS _HRESULT_TYPEDEF_(&h8009000F)
#define NTE_PERM _HRESULT_TYPEDEF_(&h80090010)
#define NTE_NOT_FOUND _HRESULT_TYPEDEF_(&h80090011)
#define NTE_DOUBLE_ENCRYPT _HRESULT_TYPEDEF_(&h80090012)
#define NTE_BAD_PROVIDER _HRESULT_TYPEDEF_(&h80090013)
#define NTE_BAD_PROV_TYPE _HRESULT_TYPEDEF_(&h80090014)
#define NTE_BAD_PUBLIC_KEY _HRESULT_TYPEDEF_(&h80090015)
#define NTE_BAD_KEYSET _HRESULT_TYPEDEF_(&h80090016)
#define NTE_PROV_TYPE_NOT_DEF _HRESULT_TYPEDEF_(&h80090017)
#define NTE_PROV_TYPE_ENTRY_BAD _HRESULT_TYPEDEF_(&h80090018)
#define NTE_KEYSET_NOT_DEF _HRESULT_TYPEDEF_(&h80090019)
#define NTE_KEYSET_ENTRY_BAD _HRESULT_TYPEDEF_(&h8009001A)
#define NTE_PROV_TYPE_NO_MATCH _HRESULT_TYPEDEF_(&h8009001B)
#define NTE_SIGNATURE_FILE_BAD _HRESULT_TYPEDEF_(&h8009001C)
#define NTE_PROVIDER_DLL_FAIL _HRESULT_TYPEDEF_(&h8009001D)
#define NTE_PROV_DLL_NOT_FOUND _HRESULT_TYPEDEF_(&h8009001E)
#define NTE_BAD_KEYSET_PARAM _HRESULT_TYPEDEF_(&h8009001F)
#define NTE_FAIL _HRESULT_TYPEDEF_(&h80090020)
#define NTE_SYS_ERR _HRESULT_TYPEDEF_(&h80090021)
#define NTE_SILENT_CONTEXT _HRESULT_TYPEDEF_(&h80090022)
#define NTE_TOKEN_KEYSET_STORAGE_FULL _HRESULT_TYPEDEF_(&h80090023)
#define NTE_TEMPORARY_PROFILE _HRESULT_TYPEDEF_(&h80090024)
#define NTE_FIXEDPARAMETER _HRESULT_TYPEDEF_(&h80090025)
#define SEC_E_INSUFFICIENT_MEMORY _HRESULT_TYPEDEF_(&h80090300)
#define SEC_E_INVALID_HANDLE _HRESULT_TYPEDEF_(&h80090301)
#define SEC_E_UNSUPPORTED_FUNCTION _HRESULT_TYPEDEF_(&h80090302)
#define SEC_E_TARGET_UNKNOWN _HRESULT_TYPEDEF_(&h80090303)
#define SEC_E_INTERNAL_ERROR _HRESULT_TYPEDEF_(&h80090304)
#define SEC_E_SECPKG_NOT_FOUND _HRESULT_TYPEDEF_(&h80090305)
#define SEC_E_NOT_OWNER _HRESULT_TYPEDEF_(&h80090306)
#define SEC_E_CANNOT_INSTALL _HRESULT_TYPEDEF_(&h80090307)
#define SEC_E_INVALID_TOKEN _HRESULT_TYPEDEF_(&h80090308)
#define SEC_E_CANNOT_PACK _HRESULT_TYPEDEF_(&h80090309)
#define SEC_E_QOP_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h8009030A)
#define SEC_E_NO_IMPERSONATION _HRESULT_TYPEDEF_(&h8009030B)
#define SEC_E_LOGON_DENIED _HRESULT_TYPEDEF_(&h8009030C)
#define SEC_E_UNKNOWN_CREDENTIALS _HRESULT_TYPEDEF_(&h8009030D)
#define SEC_E_NO_CREDENTIALS _HRESULT_TYPEDEF_(&h8009030E)
#define SEC_E_MESSAGE_ALTERED _HRESULT_TYPEDEF_(&h8009030F)
#define SEC_E_OUT_OF_SEQUENCE _HRESULT_TYPEDEF_(&h80090310)
#define SEC_E_NO_AUTHENTICATING_AUTHORITY _HRESULT_TYPEDEF_(&h80090311)
#define SEC_I_CONTINUE_NEEDED _HRESULT_TYPEDEF_(&h00090312)
#define SEC_I_COMPLETE_NEEDED _HRESULT_TYPEDEF_(&h00090313)
#define SEC_I_COMPLETE_AND_CONTINUE _HRESULT_TYPEDEF_(&h00090314)
#define SEC_I_LOCAL_LOGON _HRESULT_TYPEDEF_(&h00090315)
#define SEC_E_BAD_PKGID _HRESULT_TYPEDEF_(&h80090316)
#define SEC_E_CONTEXT_EXPIRED _HRESULT_TYPEDEF_(&h80090317)
#define SEC_I_CONTEXT_EXPIRED _HRESULT_TYPEDEF_(&h00090317)
#define SEC_E_INCOMPLETE_MESSAGE _HRESULT_TYPEDEF_(&h80090318)
#define SEC_E_INCOMPLETE_CREDENTIALS _HRESULT_TYPEDEF_(&h80090320)
#define SEC_E_BUFFER_TOO_SMALL _HRESULT_TYPEDEF_(&h80090321)
#define SEC_I_INCOMPLETE_CREDENTIALS _HRESULT_TYPEDEF_(&h00090320)
#define SEC_I_RENEGOTIATE _HRESULT_TYPEDEF_(&h00090321)
#define SEC_E_WRONG_PRINCIPAL _HRESULT_TYPEDEF_(&h80090322)
#define SEC_I_NO_LSA_CONTEXT _HRESULT_TYPEDEF_(&h00090323)
#define SEC_E_TIME_SKEW _HRESULT_TYPEDEF_(&h80090324)
#define SEC_E_UNTRUSTED_ROOT _HRESULT_TYPEDEF_(&h80090325)
#define SEC_E_ILLEGAL_MESSAGE _HRESULT_TYPEDEF_(&h80090326)
#define SEC_E_CERT_UNKNOWN _HRESULT_TYPEDEF_(&h80090327)
#define SEC_E_CERT_EXPIRED _HRESULT_TYPEDEF_(&h80090328)
#define SEC_E_ENCRYPT_FAILURE _HRESULT_TYPEDEF_(&h80090329)
#define SEC_E_DECRYPT_FAILURE _HRESULT_TYPEDEF_(&h80090330)
#define SEC_E_ALGORITHM_MISMATCH _HRESULT_TYPEDEF_(&h80090331)
#define SEC_E_SECURITY_QOS_FAILED _HRESULT_TYPEDEF_(&h80090332)
#define SEC_E_UNFINISHED_CONTEXT_DELETED _HRESULT_TYPEDEF_(&h80090333)
#define SEC_E_NO_TGT_REPLY _HRESULT_TYPEDEF_(&h80090334)
#define SEC_E_NO_IP_ADDRESSES _HRESULT_TYPEDEF_(&h80090335)
#define SEC_E_WRONG_CREDENTIAL_HANDLE _HRESULT_TYPEDEF_(&h80090336)
#define SEC_E_CRYPTO_SYSTEM_INVALID _HRESULT_TYPEDEF_(&h80090337)
#define SEC_E_MAX_REFERRALS_EXCEEDED _HRESULT_TYPEDEF_(&h80090338)
#define SEC_E_MUST_BE_KDC _HRESULT_TYPEDEF_(&h80090339)
#define SEC_E_STRONG_CRYPTO_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h8009033A)
#define SEC_E_TOO_MANY_PRINCIPALS _HRESULT_TYPEDEF_(&h8009033B)
#define SEC_E_NO_PA_DATA _HRESULT_TYPEDEF_(&h8009033C)
#define SEC_E_PKINIT_NAME_MISMATCH _HRESULT_TYPEDEF_(&h8009033D)
#define SEC_E_SMARTCARD_LOGON_REQUIRED _HRESULT_TYPEDEF_(&h8009033E)
#define SEC_E_SHUTDOWN_IN_PROGRESS _HRESULT_TYPEDEF_(&h8009033F)
#define SEC_E_KDC_INVALID_REQUEST _HRESULT_TYPEDEF_(&h80090340)
#define SEC_E_KDC_UNABLE_TO_REFER _HRESULT_TYPEDEF_(&h80090341)
#define SEC_E_KDC_UNKNOWN_ETYPE _HRESULT_TYPEDEF_(&h80090342)
#define SEC_E_UNSUPPORTED_PREAUTH _HRESULT_TYPEDEF_(&h80090343)
#define SEC_E_DELEGATION_REQUIRED _HRESULT_TYPEDEF_(&h80090345)
#define SEC_E_BAD_BINDINGS _HRESULT_TYPEDEF_(&h80090346)
#define SEC_E_MULTIPLE_ACCOUNTS _HRESULT_TYPEDEF_(&h80090347)
#define SEC_E_NO_KERB_KEY _HRESULT_TYPEDEF_(&h80090348)
#define SEC_E_CERT_WRONG_USAGE _HRESULT_TYPEDEF_(&h80090349)
#define SEC_E_DOWNGRADE_DETECTED _HRESULT_TYPEDEF_(&h80090350)
#define SEC_E_SMARTCARD_CERT_REVOKED _HRESULT_TYPEDEF_(&h80090351)
#define SEC_E_ISSUING_CA_UNTRUSTED _HRESULT_TYPEDEF_(&h80090352)
#define SEC_E_REVOCATION_OFFLINE_C _HRESULT_TYPEDEF_(&h80090353)
#define SEC_E_PKINIT_CLIENT_FAILURE _HRESULT_TYPEDEF_(&h80090354)
#define SEC_E_SMARTCARD_CERT_EXPIRED _HRESULT_TYPEDEF_(&h80090355)
#define SEC_E_NO_S4U_PROT_SUPPORT _HRESULT_TYPEDEF_(&h80090356)
#define SEC_E_CROSSREALM_DELEGATION_FAILURE _HRESULT_TYPEDEF_(&h80090357)
#define SEC_E_REVOCATION_OFFLINE_KDC _HRESULT_TYPEDEF_(&h80090358)
#define SEC_E_ISSUING_CA_UNTRUSTED_KDC _HRESULT_TYPEDEF_(&h80090359)
#define SEC_E_KDC_CERT_EXPIRED _HRESULT_TYPEDEF_(&h8009035A)
#define SEC_E_KDC_CERT_REVOKED _HRESULT_TYPEDEF_(&h8009035B)
#define SEC_E_NO_SPM SEC_E_INTERNAL_ERROR
#define SEC_E_NOT_SUPPORTED SEC_E_UNSUPPORTED_FUNCTION
#define CRYPT_E_MSG_ERROR _HRESULT_TYPEDEF_(&h80091001)
#define CRYPT_E_UNKNOWN_ALGO _HRESULT_TYPEDEF_(&h80091002)
#define CRYPT_E_OID_FORMAT _HRESULT_TYPEDEF_(&h80091003)
#define CRYPT_E_INVALID_MSG_TYPE _HRESULT_TYPEDEF_(&h80091004)
#define CRYPT_E_UNEXPECTED_ENCODING _HRESULT_TYPEDEF_(&h80091005)
#define CRYPT_E_AUTH_ATTR_MISSING _HRESULT_TYPEDEF_(&h80091006)
#define CRYPT_E_HASH_VALUE _HRESULT_TYPEDEF_(&h80091007)
#define CRYPT_E_INVALID_INDEX _HRESULT_TYPEDEF_(&h80091008)
#define CRYPT_E_ALREADY_DECRYPTED _HRESULT_TYPEDEF_(&h80091009)
#define CRYPT_E_NOT_DECRYPTED _HRESULT_TYPEDEF_(&h8009100A)
#define CRYPT_E_RECIPIENT_NOT_FOUND _HRESULT_TYPEDEF_(&h8009100B)
#define CRYPT_E_CONTROL_TYPE _HRESULT_TYPEDEF_(&h8009100C)
#define CRYPT_E_ISSUER_SERIALNUMBER _HRESULT_TYPEDEF_(&h8009100D)
#define CRYPT_E_SIGNER_NOT_FOUND _HRESULT_TYPEDEF_(&h8009100E)
#define CRYPT_E_ATTRIBUTES_MISSING _HRESULT_TYPEDEF_(&h8009100F)
#define CRYPT_E_STREAM_MSG_NOT_READY _HRESULT_TYPEDEF_(&h80091010)
#define CRYPT_E_STREAM_INSUFFICIENT_DATA _HRESULT_TYPEDEF_(&h80091011)
#define CRYPT_I_NEW_PROTECTION_REQUIRED _HRESULT_TYPEDEF_(&h00091012)
#define CRYPT_E_BAD_LEN _HRESULT_TYPEDEF_(&h80092001)
#define CRYPT_E_BAD_ENCODE _HRESULT_TYPEDEF_(&h80092002)
#define CRYPT_E_FILE_ERROR _HRESULT_TYPEDEF_(&h80092003)
#define CRYPT_E_NOT_FOUND _HRESULT_TYPEDEF_(&h80092004)
#define CRYPT_E_EXISTS _HRESULT_TYPEDEF_(&h80092005)
#define CRYPT_E_NO_PROVIDER _HRESULT_TYPEDEF_(&h80092006)
#define CRYPT_E_SELF_SIGNED _HRESULT_TYPEDEF_(&h80092007)
#define CRYPT_E_DELETED_PREV _HRESULT_TYPEDEF_(&h80092008)
#define CRYPT_E_NO_MATCH _HRESULT_TYPEDEF_(&h80092009)
#define CRYPT_E_UNEXPECTED_MSG_TYPE _HRESULT_TYPEDEF_(&h8009200A)
#define CRYPT_E_NO_KEY_PROPERTY _HRESULT_TYPEDEF_(&h8009200B)
#define CRYPT_E_NO_DECRYPT_CERT _HRESULT_TYPEDEF_(&h8009200C)
#define CRYPT_E_BAD_MSG _HRESULT_TYPEDEF_(&h8009200D)
#define CRYPT_E_NO_SIGNER _HRESULT_TYPEDEF_(&h8009200E)
#define CRYPT_E_PENDING_CLOSE _HRESULT_TYPEDEF_(&h8009200F)
#define CRYPT_E_REVOKED _HRESULT_TYPEDEF_(&h80092010)
#define CRYPT_E_NO_REVOCATION_DLL _HRESULT_TYPEDEF_(&h80092011)
#define CRYPT_E_NO_REVOCATION_CHECK _HRESULT_TYPEDEF_(&h80092012)
#define CRYPT_E_REVOCATION_OFFLINE _HRESULT_TYPEDEF_(&h80092013)
#define CRYPT_E_NOT_IN_REVOCATION_DATABASE _HRESULT_TYPEDEF_(&h80092014)
#define CRYPT_E_INVALID_NUMERIC_STRING _HRESULT_TYPEDEF_(&h80092020)
#define CRYPT_E_INVALID_PRINTABLE_STRING _HRESULT_TYPEDEF_(&h80092021)
#define CRYPT_E_INVALID_IA5_STRING _HRESULT_TYPEDEF_(&h80092022)
#define CRYPT_E_INVALID_X500_STRING _HRESULT_TYPEDEF_(&h80092023)
#define CRYPT_E_NOT_CHAR_STRING _HRESULT_TYPEDEF_(&h80092024)
#define CRYPT_E_FILERESIZED _HRESULT_TYPEDEF_(&h80092025)
#define CRYPT_E_SECURITY_SETTINGS _HRESULT_TYPEDEF_(&h80092026)
#define CRYPT_E_NO_VERIFY_USAGE_DLL _HRESULT_TYPEDEF_(&h80092027)
#define CRYPT_E_NO_VERIFY_USAGE_CHECK _HRESULT_TYPEDEF_(&h80092028)
#define CRYPT_E_VERIFY_USAGE_OFFLINE _HRESULT_TYPEDEF_(&h80092029)
#define CRYPT_E_NOT_IN_CTL _HRESULT_TYPEDEF_(&h8009202A)
#define CRYPT_E_NO_TRUSTED_SIGNER _HRESULT_TYPEDEF_(&h8009202B)
#define CRYPT_E_MISSING_PUBKEY_PARA _HRESULT_TYPEDEF_(&h8009202C)
#define CRYPT_E_OSS_ERROR _HRESULT_TYPEDEF_(&h80093000)
#define OSS_MORE_BUF _HRESULT_TYPEDEF_(&h80093001)
#define OSS_NEGATIVE_UINTEGER _HRESULT_TYPEDEF_(&h80093002)
#define OSS_PDU_RANGE _HRESULT_TYPEDEF_(&h80093003)
#define OSS_MORE_INPUT _HRESULT_TYPEDEF_(&h80093004)
#define OSS_DATA_ERROR _HRESULT_TYPEDEF_(&h80093005)
#define OSS_BAD_ARG _HRESULT_TYPEDEF_(&h80093006)
#define OSS_BAD_VERSION _HRESULT_TYPEDEF_(&h80093007)
#define OSS_OUT_MEMORY _HRESULT_TYPEDEF_(&h80093008)
#define OSS_PDU_MISMATCH _HRESULT_TYPEDEF_(&h80093009)
#define OSS_LIMITED _HRESULT_TYPEDEF_(&h8009300A)
#define OSS_BAD_PTR _HRESULT_TYPEDEF_(&h8009300B)
#define OSS_BAD_TIME _HRESULT_TYPEDEF_(&h8009300C)
#define OSS_INDEFINITE_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h8009300D)
#define OSS_MEM_ERROR _HRESULT_TYPEDEF_(&h8009300E)
#define OSS_BAD_TABLE _HRESULT_TYPEDEF_(&h8009300F)
#define OSS_TOO_LONG _HRESULT_TYPEDEF_(&h80093010)
#define OSS_CONSTRAINT_VIOLATED _HRESULT_TYPEDEF_(&h80093011)
#define OSS_FATAL_ERROR _HRESULT_TYPEDEF_(&h80093012)
#define OSS_ACCESS_SERIALIZATION_ERROR _HRESULT_TYPEDEF_(&h80093013)
#define OSS_NULL_TBL _HRESULT_TYPEDEF_(&h80093014)
#define OSS_NULL_FCN _HRESULT_TYPEDEF_(&h80093015)
#define OSS_BAD_ENCRULES _HRESULT_TYPEDEF_(&h80093016)
#define OSS_UNAVAIL_ENCRULES _HRESULT_TYPEDEF_(&h80093017)
#define OSS_CANT_OPEN_TRACE_WINDOW _HRESULT_TYPEDEF_(&h80093018)
#define OSS_UNIMPLEMENTED _HRESULT_TYPEDEF_(&h80093019)
#define OSS_OID_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h8009301A)
#define OSS_CANT_OPEN_TRACE_FILE _HRESULT_TYPEDEF_(&h8009301B)
#define OSS_TRACE_FILE_ALREADY_OPEN _HRESULT_TYPEDEF_(&h8009301C)
#define OSS_TABLE_MISMATCH _HRESULT_TYPEDEF_(&h8009301D)
#define OSS_TYPE_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h8009301E)
#define OSS_REAL_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h8009301F)
#define OSS_REAL_CODE_NOT_LINKED _HRESULT_TYPEDEF_(&h80093020)
#define OSS_OUT_OF_RANGE _HRESULT_TYPEDEF_(&h80093021)
#define OSS_COPIER_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h80093022)
#define OSS_CONSTRAINT_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h80093023)
#define OSS_COMPARATOR_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h80093024)
#define OSS_COMPARATOR_CODE_NOT_LINKED _HRESULT_TYPEDEF_(&h80093025)
#define OSS_MEM_MGR_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h80093026)
#define OSS_PDV_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h80093027)
#define OSS_PDV_CODE_NOT_LINKED _HRESULT_TYPEDEF_(&h80093028)
#define OSS_API_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h80093029)
#define OSS_BERDER_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h8009302A)
#define OSS_PER_DLL_NOT_LINKED _HRESULT_TYPEDEF_(&h8009302B)
#define OSS_OPEN_TYPE_ERROR _HRESULT_TYPEDEF_(&h8009302C)
#define OSS_MUTEX_NOT_CREATED _HRESULT_TYPEDEF_(&h8009302D)
#define OSS_CANT_CLOSE_TRACE_FILE _HRESULT_TYPEDEF_(&h8009302E)
#define CRYPT_E_ASN1_ERROR _HRESULT_TYPEDEF_(&h80093100)
#define CRYPT_E_ASN1_INTERNAL _HRESULT_TYPEDEF_(&h80093101)
#define CRYPT_E_ASN1_EOD _HRESULT_TYPEDEF_(&h80093102)
#define CRYPT_E_ASN1_CORRUPT _HRESULT_TYPEDEF_(&h80093103)
#define CRYPT_E_ASN1_LARGE _HRESULT_TYPEDEF_(&h80093104)
#define CRYPT_E_ASN1_CONSTRAINT _HRESULT_TYPEDEF_(&h80093105)
#define CRYPT_E_ASN1_MEMORY _HRESULT_TYPEDEF_(&h80093106)
#define CRYPT_E_ASN1_OVERFLOW _HRESULT_TYPEDEF_(&h80093107)
#define CRYPT_E_ASN1_BADPDU _HRESULT_TYPEDEF_(&h80093108)
#define CRYPT_E_ASN1_BADARGS _HRESULT_TYPEDEF_(&h80093109)
#define CRYPT_E_ASN1_BADREAL _HRESULT_TYPEDEF_(&h8009310A)
#define CRYPT_E_ASN1_BADTAG _HRESULT_TYPEDEF_(&h8009310B)
#define CRYPT_E_ASN1_CHOICE _HRESULT_TYPEDEF_(&h8009310C)
#define CRYPT_E_ASN1_RULE _HRESULT_TYPEDEF_(&h8009310D)
#define CRYPT_E_ASN1_UTF8 _HRESULT_TYPEDEF_(&h8009310E)
#define CRYPT_E_ASN1_PDU_TYPE _HRESULT_TYPEDEF_(&h80093133)
#define CRYPT_E_ASN1_NYI _HRESULT_TYPEDEF_(&h80093134)
#define CRYPT_E_ASN1_EXTENDED _HRESULT_TYPEDEF_(&h80093201)
#define CRYPT_E_ASN1_NOEOD _HRESULT_TYPEDEF_(&h80093202)
#define CERTSRV_E_BAD_REQUESTSUBJECT _HRESULT_TYPEDEF_(&h80094001)
#define CERTSRV_E_NO_REQUEST _HRESULT_TYPEDEF_(&h80094002)
#define CERTSRV_E_BAD_REQUESTSTATUS _HRESULT_TYPEDEF_(&h80094003)
#define CERTSRV_E_PROPERTY_EMPTY _HRESULT_TYPEDEF_(&h80094004)
#define CERTSRV_E_INVALID_CA_CERTIFICATE _HRESULT_TYPEDEF_(&h80094005)
#define CERTSRV_E_SERVER_SUSPENDED _HRESULT_TYPEDEF_(&h80094006)
#define CERTSRV_E_ENCODING_LENGTH _HRESULT_TYPEDEF_(&h80094007)
#define CERTSRV_E_ROLECONFLICT _HRESULT_TYPEDEF_(&h80094008)
#define CERTSRV_E_RESTRICTEDOFFICER _HRESULT_TYPEDEF_(&h80094009)
#define CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED _HRESULT_TYPEDEF_(&h8009400A)
#define CERTSRV_E_NO_VALID_KRA _HRESULT_TYPEDEF_(&h8009400B)
#define CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL _HRESULT_TYPEDEF_(&h8009400C)
#define CERTSRV_E_NO_CAADMIN_DEFINED _HRESULT_TYPEDEF_(&h8009400D)
#define CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE _HRESULT_TYPEDEF_(&h8009400E)
#define CERTSRV_E_NO_DB_SESSIONS _HRESULT_TYPEDEF_(&h8009400F)
#define CERTSRV_E_ALIGNMENT_FAULT _HRESULT_TYPEDEF_(&h80094010)
#define CERTSRV_E_ENROLL_DENIED _HRESULT_TYPEDEF_(&h80094011)
#define CERTSRV_E_TEMPLATE_DENIED _HRESULT_TYPEDEF_(&h80094012)
#define CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE _HRESULT_TYPEDEF_(&h80094013)
#define CERTSRV_E_UNSUPPORTED_CERT_TYPE _HRESULT_TYPEDEF_(&h80094800)
#define CERTSRV_E_NO_CERT_TYPE _HRESULT_TYPEDEF_(&h80094801)
#define CERTSRV_E_TEMPLATE_CONFLICT _HRESULT_TYPEDEF_(&h80094802)
#define CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED _HRESULT_TYPEDEF_(&h80094803)
#define CERTSRV_E_ARCHIVED_KEY_REQUIRED _HRESULT_TYPEDEF_(&h80094804)
#define CERTSRV_E_SMIME_REQUIRED _HRESULT_TYPEDEF_(&h80094805)
#define CERTSRV_E_BAD_RENEWAL_SUBJECT _HRESULT_TYPEDEF_(&h80094806)
#define CERTSRV_E_BAD_TEMPLATE_VERSION _HRESULT_TYPEDEF_(&h80094807)
#define CERTSRV_E_TEMPLATE_POLICY_REQUIRED _HRESULT_TYPEDEF_(&h80094808)
#define CERTSRV_E_SIGNATURE_POLICY_REQUIRED _HRESULT_TYPEDEF_(&h80094809)
#define CERTSRV_E_SIGNATURE_COUNT _HRESULT_TYPEDEF_(&h8009480A)
#define CERTSRV_E_SIGNATURE_REJECTED _HRESULT_TYPEDEF_(&h8009480B)
#define CERTSRV_E_ISSUANCE_POLICY_REQUIRED _HRESULT_TYPEDEF_(&h8009480C)
#define CERTSRV_E_SUBJECT_UPN_REQUIRED _HRESULT_TYPEDEF_(&h8009480D)
#define CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED _HRESULT_TYPEDEF_(&h8009480E)
#define CERTSRV_E_SUBJECT_DNS_REQUIRED _HRESULT_TYPEDEF_(&h8009480F)
#define CERTSRV_E_ARCHIVED_KEY_UNEXPECTED _HRESULT_TYPEDEF_(&h80094810)
#define CERTSRV_E_KEY_LENGTH _HRESULT_TYPEDEF_(&h80094811)
#define CERTSRV_E_SUBJECT_EMAIL_REQUIRED _HRESULT_TYPEDEF_(&h80094812)
#define CERTSRV_E_UNKNOWN_CERT_TYPE _HRESULT_TYPEDEF_(&h80094813)
#define CERTSRV_E_CERT_TYPE_OVERLAP _HRESULT_TYPEDEF_(&h80094814)
#define XENROLL_E_KEY_NOT_EXPORTABLE _HRESULT_TYPEDEF_(&h80095000)
#define XENROLL_E_CANNOT_ADD_ROOT_CERT _HRESULT_TYPEDEF_(&h80095001)
#define XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND _HRESULT_TYPEDEF_(&h80095002)
#define XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH _HRESULT_TYPEDEF_(&h80095003)
#define XENROLL_E_RESPONSE_KA_HASH_MISMATCH _HRESULT_TYPEDEF_(&h80095004)
#define XENROLL_E_KEYSPEC_SMIME_MISMATCH _HRESULT_TYPEDEF_(&h80095005)
#define TRUST_E_SYSTEM_ERROR _HRESULT_TYPEDEF_(&h80096001)
#define TRUST_E_NO_SIGNER_CERT _HRESULT_TYPEDEF_(&h80096002)
#define TRUST_E_COUNTER_SIGNER _HRESULT_TYPEDEF_(&h80096003)
#define TRUST_E_CERT_SIGNATURE _HRESULT_TYPEDEF_(&h80096004)
#define TRUST_E_TIME_STAMP _HRESULT_TYPEDEF_(&h80096005)
#define TRUST_E_BAD_DIGEST _HRESULT_TYPEDEF_(&h80096010)
#define TRUST_E_BASIC_CONSTRAINTS _HRESULT_TYPEDEF_(&h80096019)
#define TRUST_E_FINANCIAL_CRITERIA _HRESULT_TYPEDEF_(&h8009601E)
#define MSSIPOTF_E_OUTOFMEMRANGE _HRESULT_TYPEDEF_(&h80097001)
#define MSSIPOTF_E_CANTGETOBJECT _HRESULT_TYPEDEF_(&h80097002)
#define MSSIPOTF_E_NOHEADTABLE _HRESULT_TYPEDEF_(&h80097003)
#define MSSIPOTF_E_BAD_MAGICNUMBER _HRESULT_TYPEDEF_(&h80097004)
#define MSSIPOTF_E_BAD_OFFSET_TABLE _HRESULT_TYPEDEF_(&h80097005)
#define MSSIPOTF_E_TABLE_TAGORDER _HRESULT_TYPEDEF_(&h80097006)
#define MSSIPOTF_E_TABLE_LONGWORD _HRESULT_TYPEDEF_(&h80097007)
#define MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT _HRESULT_TYPEDEF_(&h80097008)
#define MSSIPOTF_E_TABLES_OVERLAP _HRESULT_TYPEDEF_(&h80097009)
#define MSSIPOTF_E_TABLE_PADBYTES _HRESULT_TYPEDEF_(&h8009700A)
#define MSSIPOTF_E_FILETOOSMALL _HRESULT_TYPEDEF_(&h8009700B)
#define MSSIPOTF_E_TABLE_CHECKSUM _HRESULT_TYPEDEF_(&h8009700C)
#define MSSIPOTF_E_FILE_CHECKSUM _HRESULT_TYPEDEF_(&h8009700D)
#define MSSIPOTF_E_FAILED_POLICY _HRESULT_TYPEDEF_(&h80097010)
#define MSSIPOTF_E_FAILED_HINTS_CHECK _HRESULT_TYPEDEF_(&h80097011)
#define MSSIPOTF_E_NOT_OPENTYPE _HRESULT_TYPEDEF_(&h80097012)
#define MSSIPOTF_E_FILE _HRESULT_TYPEDEF_(&h80097013)
#define MSSIPOTF_E_CRYPT _HRESULT_TYPEDEF_(&h80097014)
#define MSSIPOTF_E_BADVERSION _HRESULT_TYPEDEF_(&h80097015)
#define MSSIPOTF_E_DSIG_STRUCTURE _HRESULT_TYPEDEF_(&h80097016)
#define MSSIPOTF_E_PCONST_CHECK _HRESULT_TYPEDEF_(&h80097017)
#define MSSIPOTF_E_STRUCTURE _HRESULT_TYPEDEF_(&h80097018)
const NTE_OP_OK = 0
#define TRUST_E_PROVIDER_UNKNOWN _HRESULT_TYPEDEF_(&h800B0001)
#define TRUST_E_ACTION_UNKNOWN _HRESULT_TYPEDEF_(&h800B0002)
#define TRUST_E_SUBJECT_FORM_UNKNOWN _HRESULT_TYPEDEF_(&h800B0003)
#define TRUST_E_SUBJECT_NOT_TRUSTED _HRESULT_TYPEDEF_(&h800B0004)
#define DIGSIG_E_ENCODE _HRESULT_TYPEDEF_(&h800B0005)
#define DIGSIG_E_DECODE _HRESULT_TYPEDEF_(&h800B0006)
#define DIGSIG_E_EXTENSIBILITY _HRESULT_TYPEDEF_(&h800B0007)
#define DIGSIG_E_CRYPTO _HRESULT_TYPEDEF_(&h800B0008)
#define PERSIST_E_SIZEDEFINITE _HRESULT_TYPEDEF_(&h800B0009)
#define PERSIST_E_SIZEINDEFINITE _HRESULT_TYPEDEF_(&h800B000A)
#define PERSIST_E_NOTSELFSIZING _HRESULT_TYPEDEF_(&h800B000B)
#define TRUST_E_NOSIGNATURE _HRESULT_TYPEDEF_(&h800B0100)
#define CERT_E_EXPIRED _HRESULT_TYPEDEF_(&h800B0101)
#define CERT_E_VALIDITYPERIODNESTING _HRESULT_TYPEDEF_(&h800B0102)
#define CERT_E_ROLE _HRESULT_TYPEDEF_(&h800B0103)
#define CERT_E_PATHLENCONST _HRESULT_TYPEDEF_(&h800B0104)
#define CERT_E_CRITICAL _HRESULT_TYPEDEF_(&h800B0105)
#define CERT_E_PURPOSE _HRESULT_TYPEDEF_(&h800B0106)
#define CERT_E_ISSUERCHAINING _HRESULT_TYPEDEF_(&h800B0107)
#define CERT_E_MALFORMED _HRESULT_TYPEDEF_(&h800B0108)
#define CERT_E_UNTRUSTEDROOT _HRESULT_TYPEDEF_(&h800B0109)
#define CERT_E_CHAINING _HRESULT_TYPEDEF_(&h800B010A)
#define TRUST_E_FAIL _HRESULT_TYPEDEF_(&h800B010B)
#define CERT_E_REVOKED _HRESULT_TYPEDEF_(&h800B010C)
#define CERT_E_UNTRUSTEDTESTROOT _HRESULT_TYPEDEF_(&h800B010D)
#define CERT_E_REVOCATION_FAILURE _HRESULT_TYPEDEF_(&h800B010E)
#define CERT_E_CN_NO_MATCH _HRESULT_TYPEDEF_(&h800B010F)
#define CERT_E_WRONG_USAGE _HRESULT_TYPEDEF_(&h800B0110)
#define TRUST_E_EXPLICIT_DISTRUST _HRESULT_TYPEDEF_(&h800B0111)
#define CERT_E_UNTRUSTEDCA _HRESULT_TYPEDEF_(&h800B0112)
#define CERT_E_INVALID_POLICY _HRESULT_TYPEDEF_(&h800B0113)
#define CERT_E_INVALID_NAME _HRESULT_TYPEDEF_(&h800B0114)
#define HRESULT_FROM_SETUPAPI(x) iif(((x) and (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR)) = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR), cast(HRESULT, (((x) and &h0000FFFF) or (FACILITY_SETUPAPI shl 16)) or &h80000000), HRESULT_FROM_WIN32(x))
#define SPAPI_E_EXPECTED_SECTION_NAME _HRESULT_TYPEDEF_(&h800F0000)
#define SPAPI_E_BAD_SECTION_NAME_LINE _HRESULT_TYPEDEF_(&h800F0001)
#define SPAPI_E_SECTION_NAME_TOO_LONG _HRESULT_TYPEDEF_(&h800F0002)
#define SPAPI_E_GENERAL_SYNTAX _HRESULT_TYPEDEF_(&h800F0003)
#define SPAPI_E_WRONG_INF_STYLE _HRESULT_TYPEDEF_(&h800F0100)
#define SPAPI_E_SECTION_NOT_FOUND _HRESULT_TYPEDEF_(&h800F0101)
#define SPAPI_E_LINE_NOT_FOUND _HRESULT_TYPEDEF_(&h800F0102)
#define SPAPI_E_NO_BACKUP _HRESULT_TYPEDEF_(&h800F0103)
#define SPAPI_E_NO_ASSOCIATED_CLASS _HRESULT_TYPEDEF_(&h800F0200)
#define SPAPI_E_CLASS_MISMATCH _HRESULT_TYPEDEF_(&h800F0201)
#define SPAPI_E_DUPLICATE_FOUND _HRESULT_TYPEDEF_(&h800F0202)
#define SPAPI_E_NO_DRIVER_SELECTED _HRESULT_TYPEDEF_(&h800F0203)
#define SPAPI_E_KEY_DOES_NOT_EXIST _HRESULT_TYPEDEF_(&h800F0204)
#define SPAPI_E_INVALID_DEVINST_NAME _HRESULT_TYPEDEF_(&h800F0205)
#define SPAPI_E_INVALID_CLASS _HRESULT_TYPEDEF_(&h800F0206)
#define SPAPI_E_DEVINST_ALREADY_EXISTS _HRESULT_TYPEDEF_(&h800F0207)
#define SPAPI_E_DEVINFO_NOT_REGISTERED _HRESULT_TYPEDEF_(&h800F0208)
#define SPAPI_E_INVALID_REG_PROPERTY _HRESULT_TYPEDEF_(&h800F0209)
#define SPAPI_E_NO_INF _HRESULT_TYPEDEF_(&h800F020A)
#define SPAPI_E_NO_SUCH_DEVINST _HRESULT_TYPEDEF_(&h800F020B)
#define SPAPI_E_CANT_LOAD_CLASS_ICON _HRESULT_TYPEDEF_(&h800F020C)
#define SPAPI_E_INVALID_CLASS_INSTALLER _HRESULT_TYPEDEF_(&h800F020D)
#define SPAPI_E_DI_DO_DEFAULT _HRESULT_TYPEDEF_(&h800F020E)
#define SPAPI_E_DI_NOFILECOPY _HRESULT_TYPEDEF_(&h800F020F)
#define SPAPI_E_INVALID_HWPROFILE _HRESULT_TYPEDEF_(&h800F0210)
#define SPAPI_E_NO_DEVICE_SELECTED _HRESULT_TYPEDEF_(&h800F0211)
#define SPAPI_E_DEVINFO_LIST_LOCKED _HRESULT_TYPEDEF_(&h800F0212)
#define SPAPI_E_DEVINFO_DATA_LOCKED _HRESULT_TYPEDEF_(&h800F0213)
#define SPAPI_E_DI_BAD_PATH _HRESULT_TYPEDEF_(&h800F0214)
#define SPAPI_E_NO_CLASSINSTALL_PARAMS _HRESULT_TYPEDEF_(&h800F0215)
#define SPAPI_E_FILEQUEUE_LOCKED _HRESULT_TYPEDEF_(&h800F0216)
#define SPAPI_E_BAD_SERVICE_INSTALLSECT _HRESULT_TYPEDEF_(&h800F0217)
#define SPAPI_E_NO_CLASS_DRIVER_LIST _HRESULT_TYPEDEF_(&h800F0218)
#define SPAPI_E_NO_ASSOCIATED_SERVICE _HRESULT_TYPEDEF_(&h800F0219)
#define SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE _HRESULT_TYPEDEF_(&h800F021A)
#define SPAPI_E_DEVICE_INTERFACE_ACTIVE _HRESULT_TYPEDEF_(&h800F021B)
#define SPAPI_E_DEVICE_INTERFACE_REMOVED _HRESULT_TYPEDEF_(&h800F021C)
#define SPAPI_E_BAD_INTERFACE_INSTALLSECT _HRESULT_TYPEDEF_(&h800F021D)
#define SPAPI_E_NO_SUCH_INTERFACE_CLASS _HRESULT_TYPEDEF_(&h800F021E)
#define SPAPI_E_INVALID_REFERENCE_STRING _HRESULT_TYPEDEF_(&h800F021F)
#define SPAPI_E_INVALID_MACHINENAME _HRESULT_TYPEDEF_(&h800F0220)
#define SPAPI_E_REMOTE_COMM_FAILURE _HRESULT_TYPEDEF_(&h800F0221)
#define SPAPI_E_MACHINE_UNAVAILABLE _HRESULT_TYPEDEF_(&h800F0222)
#define SPAPI_E_NO_CONFIGMGR_SERVICES _HRESULT_TYPEDEF_(&h800F0223)
#define SPAPI_E_INVALID_PROPPAGE_PROVIDER _HRESULT_TYPEDEF_(&h800F0224)
#define SPAPI_E_NO_SUCH_DEVICE_INTERFACE _HRESULT_TYPEDEF_(&h800F0225)
#define SPAPI_E_DI_POSTPROCESSING_REQUIRED _HRESULT_TYPEDEF_(&h800F0226)
#define SPAPI_E_INVALID_COINSTALLER _HRESULT_TYPEDEF_(&h800F0227)
#define SPAPI_E_NO_COMPAT_DRIVERS _HRESULT_TYPEDEF_(&h800F0228)
#define SPAPI_E_NO_DEVICE_ICON _HRESULT_TYPEDEF_(&h800F0229)
#define SPAPI_E_INVALID_INF_LOGCONFIG _HRESULT_TYPEDEF_(&h800F022A)
#define SPAPI_E_DI_DONT_INSTALL _HRESULT_TYPEDEF_(&h800F022B)
#define SPAPI_E_INVALID_FILTER_DRIVER _HRESULT_TYPEDEF_(&h800F022C)
#define SPAPI_E_NON_WINDOWS_NT_DRIVER _HRESULT_TYPEDEF_(&h800F022D)
#define SPAPI_E_NON_WINDOWS_DRIVER _HRESULT_TYPEDEF_(&h800F022E)
#define SPAPI_E_NO_CATALOG_FOR_OEM_INF _HRESULT_TYPEDEF_(&h800F022F)
#define SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE _HRESULT_TYPEDEF_(&h800F0230)
#define SPAPI_E_NOT_DISABLEABLE _HRESULT_TYPEDEF_(&h800F0231)
#define SPAPI_E_CANT_REMOVE_DEVINST _HRESULT_TYPEDEF_(&h800F0232)
#define SPAPI_E_INVALID_TARGET _HRESULT_TYPEDEF_(&h800F0233)
#define SPAPI_E_DRIVER_NONNATIVE _HRESULT_TYPEDEF_(&h800F0234)
#define SPAPI_E_IN_WOW64 _HRESULT_TYPEDEF_(&h800F0235)
#define SPAPI_E_SET_SYSTEM_RESTORE_POINT _HRESULT_TYPEDEF_(&h800F0236)
#define SPAPI_E_INCORRECTLY_COPIED_INF _HRESULT_TYPEDEF_(&h800F0237)
#define SPAPI_E_SCE_DISABLED _HRESULT_TYPEDEF_(&h800F0238)
#define SPAPI_E_UNKNOWN_EXCEPTION _HRESULT_TYPEDEF_(&h800F0239)
#define SPAPI_E_PNP_REGISTRY_ERROR _HRESULT_TYPEDEF_(&h800F023A)
#define SPAPI_E_REMOTE_REQUEST_UNSUPPORTED _HRESULT_TYPEDEF_(&h800F023B)
#define SPAPI_E_NOT_AN_INSTALLED_OEM_INF _HRESULT_TYPEDEF_(&h800F023C)
#define SPAPI_E_INF_IN_USE_BY_DEVICES _HRESULT_TYPEDEF_(&h800F023D)
#define SPAPI_E_DI_FUNCTION_OBSOLETE _HRESULT_TYPEDEF_(&h800F023E)
#define SPAPI_E_NO_AUTHENTICODE_CATALOG _HRESULT_TYPEDEF_(&h800F023F)
#define SPAPI_E_AUTHENTICODE_DISALLOWED _HRESULT_TYPEDEF_(&h800F0240)
#define SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER _HRESULT_TYPEDEF_(&h800F0241)
#define SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED _HRESULT_TYPEDEF_(&h800F0242)
#define SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED _HRESULT_TYPEDEF_(&h800F0243)
#define SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH _HRESULT_TYPEDEF_(&h800F0244)
#define SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE _HRESULT_TYPEDEF_(&h800F0245)
#define SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW _HRESULT_TYPEDEF_(&h800F0300)
#define SPAPI_E_ERROR_NOT_INSTALLED _HRESULT_TYPEDEF_(&h800F1000)
const SCARD_S_SUCCESS = NO_ERROR
#define SCARD_F_INTERNAL_ERROR _HRESULT_TYPEDEF_(&h80100001)
#define SCARD_E_CANCELLED _HRESULT_TYPEDEF_(&h80100002)
#define SCARD_E_INVALID_HANDLE _HRESULT_TYPEDEF_(&h80100003)
#define SCARD_E_INVALID_PARAMETER _HRESULT_TYPEDEF_(&h80100004)
#define SCARD_E_INVALID_TARGET _HRESULT_TYPEDEF_(&h80100005)
#define SCARD_E_NO_MEMORY _HRESULT_TYPEDEF_(&h80100006)
#define SCARD_F_WAITED_TOO_LONG _HRESULT_TYPEDEF_(&h80100007)
#define SCARD_E_INSUFFICIENT_BUFFER _HRESULT_TYPEDEF_(&h80100008)
#define SCARD_E_UNKNOWN_READER _HRESULT_TYPEDEF_(&h80100009)
#define SCARD_E_TIMEOUT _HRESULT_TYPEDEF_(&h8010000A)
#define SCARD_E_SHARING_VIOLATION _HRESULT_TYPEDEF_(&h8010000B)
#define SCARD_E_NO_SMARTCARD _HRESULT_TYPEDEF_(&h8010000C)
#define SCARD_E_UNKNOWN_CARD _HRESULT_TYPEDEF_(&h8010000D)
#define SCARD_E_CANT_DISPOSE _HRESULT_TYPEDEF_(&h8010000E)
#define SCARD_E_PROTO_MISMATCH _HRESULT_TYPEDEF_(&h8010000F)
#define SCARD_E_NOT_READY _HRESULT_TYPEDEF_(&h80100010)
#define SCARD_E_INVALID_VALUE _HRESULT_TYPEDEF_(&h80100011)
#define SCARD_E_SYSTEM_CANCELLED _HRESULT_TYPEDEF_(&h80100012)
#define SCARD_F_COMM_ERROR _HRESULT_TYPEDEF_(&h80100013)
#define SCARD_F_UNKNOWN_ERROR _HRESULT_TYPEDEF_(&h80100014)
#define SCARD_E_INVALID_ATR _HRESULT_TYPEDEF_(&h80100015)
#define SCARD_E_NOT_TRANSACTED _HRESULT_TYPEDEF_(&h80100016)
#define SCARD_E_READER_UNAVAILABLE _HRESULT_TYPEDEF_(&h80100017)
#define SCARD_P_SHUTDOWN _HRESULT_TYPEDEF_(&h80100018)
#define SCARD_E_PCI_TOO_SMALL _HRESULT_TYPEDEF_(&h80100019)
#define SCARD_E_READER_UNSUPPORTED _HRESULT_TYPEDEF_(&h8010001A)
#define SCARD_E_DUPLICATE_READER _HRESULT_TYPEDEF_(&h8010001B)
#define SCARD_E_CARD_UNSUPPORTED _HRESULT_TYPEDEF_(&h8010001C)
#define SCARD_E_NO_SERVICE _HRESULT_TYPEDEF_(&h8010001D)
#define SCARD_E_SERVICE_STOPPED _HRESULT_TYPEDEF_(&h8010001E)
#define SCARD_E_UNEXPECTED _HRESULT_TYPEDEF_(&h8010001F)
#define SCARD_E_ICC_INSTALLATION _HRESULT_TYPEDEF_(&h80100020)
#define SCARD_E_ICC_CREATEORDER _HRESULT_TYPEDEF_(&h80100021)
#define SCARD_E_UNSUPPORTED_FEATURE _HRESULT_TYPEDEF_(&h80100022)
#define SCARD_E_DIR_NOT_FOUND _HRESULT_TYPEDEF_(&h80100023)
#define SCARD_E_FILE_NOT_FOUND _HRESULT_TYPEDEF_(&h80100024)
#define SCARD_E_NO_DIR _HRESULT_TYPEDEF_(&h80100025)
#define SCARD_E_NO_FILE _HRESULT_TYPEDEF_(&h80100026)
#define SCARD_E_NO_ACCESS _HRESULT_TYPEDEF_(&h80100027)
#define SCARD_E_WRITE_TOO_MANY _HRESULT_TYPEDEF_(&h80100028)
#define SCARD_E_BAD_SEEK _HRESULT_TYPEDEF_(&h80100029)
#define SCARD_E_INVALID_CHV _HRESULT_TYPEDEF_(&h8010002A)
#define SCARD_E_UNKNOWN_RES_MNG _HRESULT_TYPEDEF_(&h8010002B)
#define SCARD_E_NO_SUCH_CERTIFICATE _HRESULT_TYPEDEF_(&h8010002C)
#define SCARD_E_CERTIFICATE_UNAVAILABLE _HRESULT_TYPEDEF_(&h8010002D)
#define SCARD_E_NO_READERS_AVAILABLE _HRESULT_TYPEDEF_(&h8010002E)
#define SCARD_E_COMM_DATA_LOST _HRESULT_TYPEDEF_(&h8010002F)
#define SCARD_E_NO_KEY_CONTAINER _HRESULT_TYPEDEF_(&h80100030)
#define SCARD_E_SERVER_TOO_BUSY _HRESULT_TYPEDEF_(&h80100031)
#define SCARD_W_UNSUPPORTED_CARD _HRESULT_TYPEDEF_(&h80100065)
#define SCARD_W_UNRESPONSIVE_CARD _HRESULT_TYPEDEF_(&h80100066)
#define SCARD_W_UNPOWERED_CARD _HRESULT_TYPEDEF_(&h80100067)
#define SCARD_W_RESET_CARD _HRESULT_TYPEDEF_(&h80100068)
#define SCARD_W_REMOVED_CARD _HRESULT_TYPEDEF_(&h80100069)
#define SCARD_W_SECURITY_VIOLATION _HRESULT_TYPEDEF_(&h8010006A)
#define SCARD_W_WRONG_CHV _HRESULT_TYPEDEF_(&h8010006B)
#define SCARD_W_CHV_BLOCKED _HRESULT_TYPEDEF_(&h8010006C)
#define SCARD_W_EOF _HRESULT_TYPEDEF_(&h8010006D)
#define SCARD_W_CANCELLED_BY_USER _HRESULT_TYPEDEF_(&h8010006E)
#define SCARD_W_CARD_NOT_AUTHENTICATED _HRESULT_TYPEDEF_(&h8010006F)
#define SCARD_W_CACHE_ITEM_NOT_FOUND _HRESULT_TYPEDEF_(&h80100070)
#define SCARD_W_CACHE_ITEM_STALE _HRESULT_TYPEDEF_(&h80100071)
#define COMADMIN_E_OBJECTERRORS _HRESULT_TYPEDEF_(&h80110401)
#define COMADMIN_E_OBJECTINVALID _HRESULT_TYPEDEF_(&h80110402)
#define COMADMIN_E_KEYMISSING _HRESULT_TYPEDEF_(&h80110403)
#define COMADMIN_E_ALREADYINSTALLED _HRESULT_TYPEDEF_(&h80110404)
#define COMADMIN_E_APP_FILE_WRITEFAIL _HRESULT_TYPEDEF_(&h80110407)
#define COMADMIN_E_APP_FILE_READFAIL _HRESULT_TYPEDEF_(&h80110408)
#define COMADMIN_E_APP_FILE_VERSION _HRESULT_TYPEDEF_(&h80110409)
#define COMADMIN_E_BADPATH _HRESULT_TYPEDEF_(&h8011040A)
#define COMADMIN_E_APPLICATIONEXISTS _HRESULT_TYPEDEF_(&h8011040B)
#define COMADMIN_E_ROLEEXISTS _HRESULT_TYPEDEF_(&h8011040C)
#define COMADMIN_E_CANTCOPYFILE _HRESULT_TYPEDEF_(&h8011040D)
#define COMADMIN_E_NOUSER _HRESULT_TYPEDEF_(&h8011040F)
#define COMADMIN_E_INVALIDUSERIDS _HRESULT_TYPEDEF_(&h80110410)
#define COMADMIN_E_NOREGISTRYCLSID _HRESULT_TYPEDEF_(&h80110411)
#define COMADMIN_E_BADREGISTRYPROGID _HRESULT_TYPEDEF_(&h80110412)
#define COMADMIN_E_AUTHENTICATIONLEVEL _HRESULT_TYPEDEF_(&h80110413)
#define COMADMIN_E_USERPASSWDNOTVALID _HRESULT_TYPEDEF_(&h80110414)
#define COMADMIN_E_CLSIDORIIDMISMATCH _HRESULT_TYPEDEF_(&h80110418)
#define COMADMIN_E_REMOTEINTERFACE _HRESULT_TYPEDEF_(&h80110419)
#define COMADMIN_E_DLLREGISTERSERVER _HRESULT_TYPEDEF_(&h8011041A)
#define COMADMIN_E_NOSERVERSHARE _HRESULT_TYPEDEF_(&h8011041B)
#define COMADMIN_E_DLLLOADFAILED _HRESULT_TYPEDEF_(&h8011041D)
#define COMADMIN_E_BADREGISTRYLIBID _HRESULT_TYPEDEF_(&h8011041E)
#define COMADMIN_E_APPDIRNOTFOUND _HRESULT_TYPEDEF_(&h8011041F)
#define COMADMIN_E_REGISTRARFAILED _HRESULT_TYPEDEF_(&h80110423)
#define COMADMIN_E_COMPFILE_DOESNOTEXIST _HRESULT_TYPEDEF_(&h80110424)
#define COMADMIN_E_COMPFILE_LOADDLLFAIL _HRESULT_TYPEDEF_(&h80110425)
#define COMADMIN_E_COMPFILE_GETCLASSOBJ _HRESULT_TYPEDEF_(&h80110426)
#define COMADMIN_E_COMPFILE_CLASSNOTAVAIL _HRESULT_TYPEDEF_(&h80110427)
#define COMADMIN_E_COMPFILE_BADTLB _HRESULT_TYPEDEF_(&h80110428)
#define COMADMIN_E_COMPFILE_NOTINSTALLABLE _HRESULT_TYPEDEF_(&h80110429)
#define COMADMIN_E_NOTCHANGEABLE _HRESULT_TYPEDEF_(&h8011042A)
#define COMADMIN_E_NOTDELETEABLE _HRESULT_TYPEDEF_(&h8011042B)
#define COMADMIN_E_SESSION _HRESULT_TYPEDEF_(&h8011042C)
#define COMADMIN_E_COMP_MOVE_LOCKED _HRESULT_TYPEDEF_(&h8011042D)
#define COMADMIN_E_COMP_MOVE_BAD_DEST _HRESULT_TYPEDEF_(&h8011042E)
#define COMADMIN_E_REGISTERTLB _HRESULT_TYPEDEF_(&h80110430)
#define COMADMIN_E_SYSTEMAPP _HRESULT_TYPEDEF_(&h80110433)
#define COMADMIN_E_COMPFILE_NOREGISTRAR _HRESULT_TYPEDEF_(&h80110434)
#define COMADMIN_E_COREQCOMPINSTALLED _HRESULT_TYPEDEF_(&h80110435)
#define COMADMIN_E_SERVICENOTINSTALLED _HRESULT_TYPEDEF_(&h80110436)
#define COMADMIN_E_PROPERTYSAVEFAILED _HRESULT_TYPEDEF_(&h80110437)
#define COMADMIN_E_OBJECTEXISTS _HRESULT_TYPEDEF_(&h80110438)
#define COMADMIN_E_COMPONENTEXISTS _HRESULT_TYPEDEF_(&h80110439)
#define COMADMIN_E_REGFILE_CORRUPT _HRESULT_TYPEDEF_(&h8011043B)
#define COMADMIN_E_PROPERTY_OVERFLOW _HRESULT_TYPEDEF_(&h8011043C)
#define COMADMIN_E_NOTINREGISTRY _HRESULT_TYPEDEF_(&h8011043E)
#define COMADMIN_E_OBJECTNOTPOOLABLE _HRESULT_TYPEDEF_(&h8011043F)
#define COMADMIN_E_APPLID_MATCHES_CLSID _HRESULT_TYPEDEF_(&h80110446)
#define COMADMIN_E_ROLE_DOES_NOT_EXIST _HRESULT_TYPEDEF_(&h80110447)
#define COMADMIN_E_START_APP_NEEDS_COMPONENTS _HRESULT_TYPEDEF_(&h80110448)
#define COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM _HRESULT_TYPEDEF_(&h80110449)
#define COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY _HRESULT_TYPEDEF_(&h8011044A)
#define COMADMIN_E_CAN_NOT_START_APP _HRESULT_TYPEDEF_(&h8011044B)
#define COMADMIN_E_CAN_NOT_EXPORT_SYS_APP _HRESULT_TYPEDEF_(&h8011044C)
#define COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT _HRESULT_TYPEDEF_(&h8011044D)
#define COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER _HRESULT_TYPEDEF_(&h8011044E)
#define COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE _HRESULT_TYPEDEF_(&h8011044F)
#define COMADMIN_E_BASE_PARTITION_ONLY _HRESULT_TYPEDEF_(&h80110450)
#define COMADMIN_E_START_APP_DISABLED _HRESULT_TYPEDEF_(&h80110451)
#define COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME _HRESULT_TYPEDEF_(&h80110457)
#define COMADMIN_E_CAT_INVALID_PARTITION_NAME _HRESULT_TYPEDEF_(&h80110458)
#define COMADMIN_E_CAT_PARTITION_IN_USE _HRESULT_TYPEDEF_(&h80110459)
#define COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES _HRESULT_TYPEDEF_(&h8011045A)
#define COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED _HRESULT_TYPEDEF_(&h8011045B)
#define COMADMIN_E_AMBIGUOUS_APPLICATION_NAME _HRESULT_TYPEDEF_(&h8011045C)
#define COMADMIN_E_AMBIGUOUS_PARTITION_NAME _HRESULT_TYPEDEF_(&h8011045D)
#define COMADMIN_E_REGDB_NOTINITIALIZED _HRESULT_TYPEDEF_(&h80110472)
#define COMADMIN_E_REGDB_NOTOPEN _HRESULT_TYPEDEF_(&h80110473)
#define COMADMIN_E_REGDB_SYSTEMERR _HRESULT_TYPEDEF_(&h80110474)
#define COMADMIN_E_REGDB_ALREADYRUNNING _HRESULT_TYPEDEF_(&h80110475)
#define COMADMIN_E_MIG_VERSIONNOTSUPPORTED _HRESULT_TYPEDEF_(&h80110480)
#define COMADMIN_E_MIG_SCHEMANOTFOUND _HRESULT_TYPEDEF_(&h80110481)
#define COMADMIN_E_CAT_BITNESSMISMATCH _HRESULT_TYPEDEF_(&h80110482)
#define COMADMIN_E_CAT_UNACCEPTABLEBITNESS _HRESULT_TYPEDEF_(&h80110483)
#define COMADMIN_E_CAT_WRONGAPPBITNESS _HRESULT_TYPEDEF_(&h80110484)
#define COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h80110485)
#define COMADMIN_E_CAT_SERVERFAULT _HRESULT_TYPEDEF_(&h80110486)
#define COMQC_E_APPLICATION_NOT_QUEUED _HRESULT_TYPEDEF_(&h80110600)
#define COMQC_E_NO_QUEUEABLE_INTERFACES _HRESULT_TYPEDEF_(&h80110601)
#define COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE _HRESULT_TYPEDEF_(&h80110602)
#define COMQC_E_NO_IPERSISTSTREAM _HRESULT_TYPEDEF_(&h80110603)
#define COMQC_E_BAD_MESSAGE _HRESULT_TYPEDEF_(&h80110604)
#define COMQC_E_UNAUTHENTICATED _HRESULT_TYPEDEF_(&h80110605)
#define COMQC_E_UNTRUSTED_ENQUEUER _HRESULT_TYPEDEF_(&h80110606)
#define MSDTC_E_DUPLICATE_RESOURCE _HRESULT_TYPEDEF_(&h80110701)
#define COMADMIN_E_OBJECT_PARENT_MISSING _HRESULT_TYPEDEF_(&h80110808)
#define COMADMIN_E_OBJECT_DOES_NOT_EXIST _HRESULT_TYPEDEF_(&h80110809)
#define COMADMIN_E_APP_NOT_RUNNING _HRESULT_TYPEDEF_(&h8011080A)
#define COMADMIN_E_INVALID_PARTITION _HRESULT_TYPEDEF_(&h8011080B)
#define COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE _HRESULT_TYPEDEF_(&h8011080D)
#define COMADMIN_E_USER_IN_SET _HRESULT_TYPEDEF_(&h8011080E)
#define COMADMIN_E_CANTRECYCLELIBRARYAPPS _HRESULT_TYPEDEF_(&h8011080F)
#define COMADMIN_E_CANTRECYCLESERVICEAPPS _HRESULT_TYPEDEF_(&h80110811)
#define COMADMIN_E_PROCESSALREADYRECYCLED _HRESULT_TYPEDEF_(&h80110812)
#define COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED _HRESULT_TYPEDEF_(&h80110813)
#define COMADMIN_E_CANTMAKEINPROCSERVICE _HRESULT_TYPEDEF_(&h80110814)
#define COMADMIN_E_PROGIDINUSEBYCLSID _HRESULT_TYPEDEF_(&h80110815)
#define COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET _HRESULT_TYPEDEF_(&h80110816)
#define COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED _HRESULT_TYPEDEF_(&h80110817)
#define COMADMIN_E_PARTITION_ACCESSDENIED _HRESULT_TYPEDEF_(&h80110818)
#define COMADMIN_E_PARTITION_MSI_ONLY _HRESULT_TYPEDEF_(&h80110819)
#define COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT _HRESULT_TYPEDEF_(&h8011081A)
#define COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS _HRESULT_TYPEDEF_(&h8011081B)
#define COMADMIN_E_COMP_MOVE_SOURCE _HRESULT_TYPEDEF_(&h8011081C)
#define COMADMIN_E_COMP_MOVE_DEST _HRESULT_TYPEDEF_(&h8011081D)
#define COMADMIN_E_COMP_MOVE_PRIVATE _HRESULT_TYPEDEF_(&h8011081E)
#define COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET _HRESULT_TYPEDEF_(&h8011081F)
#define COMADMIN_E_CANNOT_ALIAS_EVENTCLASS _HRESULT_TYPEDEF_(&h80110820)
#define COMADMIN_E_PRIVATE_ACCESSDENIED _HRESULT_TYPEDEF_(&h80110821)
#define COMADMIN_E_SAFERINVALID _HRESULT_TYPEDEF_(&h80110822)
#define COMADMIN_E_REGISTRY_ACCESSDENIED _HRESULT_TYPEDEF_(&h80110823)
#define COMADMIN_E_PARTITIONS_DISABLED _HRESULT_TYPEDEF_(&h80110824)
#define VSS_E_BAD_STATE _HRESULT_TYPEDEF_(&h80042301)
#define VSS_E_LEGACY_PROVIDER _HRESULT_TYPEDEF_(&h800423F7)
#define VSS_E_RESYNC_IN_PROGRESS _HRESULT_TYPEDEF_(&h800423FF)
#define VSS_E_SNAPSHOT_NOT_IN_SET _HRESULT_TYPEDEF_(&h8004232B)
#define VSS_E_MAXIMUM_NUMBER_OF_VOLUMES_REACHED _HRESULT_TYPEDEF_(&h80042312)
#define VSS_E_MAXIMUM_NUMBER_OF_SNAPSHOTS_REACHED _HRESULT_TYPEDEF_(&h80042317)
#define VSS_E_NESTED_VOLUME_LIMIT _HRESULT_TYPEDEF_(&h8004232C)
#define VSS_E_OBJECT_NOT_FOUND _HRESULT_TYPEDEF_(&h80042308)
#define VSS_E_PROVIDER_NOT_REGISTERED _HRESULT_TYPEDEF_(&h80042304)
#define VSS_E_PROVIDER_VETO _HRESULT_TYPEDEF_(&h80042306)
#define VSS_E_VOLUME_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h8004230C)
#define VSS_E_VOLUME_NOT_SUPPORTED_BY_PROVIDER _HRESULT_TYPEDEF_(&h8004230E)
#define VSS_E_UNEXPECTED _HRESULT_TYPEDEF_(&h80042302)
#define VSS_E_UNEXPECTED_PROVIDER_ERROR _HRESULT_TYPEDEF_(&h8004230F)
#define VSS_E_UNSELECTED_VOLUME _HRESULT_TYPEDEF_(&h8004232A)
#define VSS_E_CANNOT_REVERT_DISKID _HRESULT_TYPEDEF_(&h800423FE)
#define VSS_E_INVALID_XML_DOCUMENT _HRESULT_TYPEDEF_(&h80042311)
#define VSS_E_OBJECT_ALREADY_EXISTS _HRESULT_TYPEDEF_(&h8004230D)
#define DXGI_ERROR_INVALID_CALL _HRESULT_TYPEDEF_(&h887A0001)
#define DXGI_ERROR_NOT_FOUND _HRESULT_TYPEDEF_(&h887A0002)
#define DXGI_ERROR_MORE_DATA _HRESULT_TYPEDEF_(&h887A0003)
#define DXGI_ERROR_UNSUPPORTED _HRESULT_TYPEDEF_(&h887A0004)
#define DXGI_ERROR_DEVICE_REMOVED _HRESULT_TYPEDEF_(&h887A0005)
#define DXGI_ERROR_DEVICE_HUNG _HRESULT_TYPEDEF_(&h887A0006)
#define DXGI_ERROR_DEVICE_RESET _HRESULT_TYPEDEF_(&h887A0007)
#define DXGI_ERROR_WAS_STILL_DRAWING _HRESULT_TYPEDEF_(&h887A000A)
#define DXGI_ERROR_FRAME_STATISTICS_DISJOINT _HRESULT_TYPEDEF_(&h887A000B)
#define DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE _HRESULT_TYPEDEF_(&h887A000C)
#define DXGI_ERROR_DRIVER_INTERNAL_ERROR _HRESULT_TYPEDEF_(&h887A0020)
#define DXGI_ERROR_NONEXCLUSIVE _HRESULT_TYPEDEF_(&h887A0021)
#define DXGI_ERROR_NOT_CURRENTLY_AVAILABLE _HRESULT_TYPEDEF_(&h887A0022)
#define DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED _HRESULT_TYPEDEF_(&h887A0023)
#define DXGI_ERROR_REMOTE_OUTOFMEMORY _HRESULT_TYPEDEF_(&h887A0024)
#define DXGI_ERROR_ACCESS_LOST _HRESULT_TYPEDEF_(&h887A0026)
#define DXGI_ERROR_WAIT_TIMEOUT _HRESULT_TYPEDEF_(&h887A0027)
#define DXGI_ERROR_SESSION_DISCONNECTED _HRESULT_TYPEDEF_(&h887A0028)
#define DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE _HRESULT_TYPEDEF_(&h887A0029)
#define DXGI_ERROR_CANNOT_PROTECT_CONTENT _HRESULT_TYPEDEF_(&h887A002A)
#define DXGI_ERROR_ACCESS_DENIED _HRESULT_TYPEDEF_(&h887A002B)
#define DXGI_ERROR_NAME_ALREADY_EXISTS _HRESULT_TYPEDEF_(&h887A002C)
#define DXGI_ERROR_SDK_COMPONENT_MISSING _HRESULT_TYPEDEF_(&h887A002D)

#if _WIN32_WINNT = &h0602
	const TBS_SUCCESS = 0u
	#define TBS_E_INTERNAL_ERROR _HRESULT_TYPEDEF_(&h80284001)
	#define TBS_E_BAD_PARAMETER _HRESULT_TYPEDEF_(&h80284002)
	#define TBS_E_INVALID_OUTPUT_POINTER _HRESULT_TYPEDEF_(&h80284003)
	#define TBS_E_INSUFFICIENT_BUFFER _HRESULT_TYPEDEF_(&h80284005)
	#define TBS_E_IOERROR _HRESULT_TYPEDEF_(&h80284006)
	#define TBS_E_INVALID_CONTEXT_PARAM _HRESULT_TYPEDEF_(&h80284007)
	#define TBS_E_SERVICE_NOT_RUNNING _HRESULT_TYPEDEF_(&h80284008)
	#define TBS_E_TOO_MANY_TBS_CONTEXTS _HRESULT_TYPEDEF_(&h80284009)
	#define TBS_E_SERVICE_START_PENDING _HRESULT_TYPEDEF_(&h8028400B)
	#define TBS_E_BUFFER_TOO_LARGE _HRESULT_TYPEDEF_(&h8028400E)
	#define TBS_E_TPM_NOT_FOUND _HRESULT_TYPEDEF_(&h8028400F)
	#define TBS_E_SERVICE_DISABLED _HRESULT_TYPEDEF_(&h80284010)
	#define TBS_E_DEACTIVATED _HRESULT_TYPEDEF_(&h80284016)
	#define FWP_E_CALLOUT_NOT_FOUND _HRESULT_TYPEDEF_(&h80320001)
	#define FWP_E_CONDITION_NOT_FOUND _HRESULT_TYPEDEF_(&h80320002)
	#define FWP_E_FILTER_NOT_FOUND _HRESULT_TYPEDEF_(&h80320003)
	#define FWP_E_LAYER_NOT_FOUND _HRESULT_TYPEDEF_(&h80320004)
	#define FWP_E_PROVIDER_NOT_FOUND _HRESULT_TYPEDEF_(&h80320005)
	#define FWP_E_PROVIDER_CONTEXT_NOT_FOUND _HRESULT_TYPEDEF_(&h80320006)
	#define FWP_E_SUBLAYER_NOT_FOUND _HRESULT_TYPEDEF_(&h80320007)
	#define FWP_E_NOT_FOUND _HRESULT_TYPEDEF_(&h80320008)
	#define FWP_E_ALREADY_EXISTS _HRESULT_TYPEDEF_(&h80320009)
	#define FWP_E_IN_USE _HRESULT_TYPEDEF_(&h8032000A)
	#define FWP_E_DYNAMIC_SESSION_IN_PROGRESS _HRESULT_TYPEDEF_(&h8032000B)
	#define FWP_E_WRONG_SESSION _HRESULT_TYPEDEF_(&h8032000C)
	#define FWP_E_NO_TXN_IN_PROGRESS _HRESULT_TYPEDEF_(&h8032000D)
	#define FWP_E_TXN_IN_PROGRESS _HRESULT_TYPEDEF_(&h8032000E)
	#define FWP_E_TXN_ABORTED _HRESULT_TYPEDEF_(&h8032000F)
	#define FWP_E_SESSION_ABORTED _HRESULT_TYPEDEF_(&h80320010)
	#define FWP_E_INCOMPATIBLE_TXN _HRESULT_TYPEDEF_(&h80320011)
	#define FWP_E_TIMEOUT _HRESULT_TYPEDEF_(&h80320012)
	#define FWP_E_NET_EVENTS_DISABLED _HRESULT_TYPEDEF_(&h80320013)
	#define FWP_E_INCOMPATIBLE_LAYER _HRESULT_TYPEDEF_(&h80320014)
	#define FWP_E_KM_CLIENTS_ONLY _HRESULT_TYPEDEF_(&h80320015)
	#define FWP_E_LIFETIME_MISMATCH _HRESULT_TYPEDEF_(&h80320016)
	#define FWP_E_BUILTIN_OBJECT _HRESULT_TYPEDEF_(&h80320017)
	#define FWP_E_TOO_MANY_CALLOUTS _HRESULT_TYPEDEF_(&h80320018)
	#define FWP_E_NOTIFICATION_DROPPED _HRESULT_TYPEDEF_(&h80320019)
	#define FWP_E_TRAFFIC_MISMATCH _HRESULT_TYPEDEF_(&h8032001A)
	#define FWP_E_INCOMPATIBLE_SA_STATE _HRESULT_TYPEDEF_(&h8032001B)
	#define FWP_E_NULL_POINTER _HRESULT_TYPEDEF_(&h8032001C)
	#define FWP_E_INVALID_ENUMERATOR _HRESULT_TYPEDEF_(&h8032001D)
	#define FWP_E_INVALID_FLAGS _HRESULT_TYPEDEF_(&h8032001E)
	#define FWP_E_INVALID_NET_MASK _HRESULT_TYPEDEF_(&h8032001F)
	#define FWP_E_INVALID_RANGE _HRESULT_TYPEDEF_(&h80320020)
	#define FWP_E_INVALID_INTERVAL _HRESULT_TYPEDEF_(&h80320021)
	#define FWP_E_ZERO_LENGTH_ARRAY _HRESULT_TYPEDEF_(&h80320022)
	#define FWP_E_NULL_DISPLAY_NAME _HRESULT_TYPEDEF_(&h80320023)
	#define FWP_E_INVALID_ACTION_TYPE _HRESULT_TYPEDEF_(&h80320024)
	#define FWP_E_INVALID_WEIGHT _HRESULT_TYPEDEF_(&h80320025)
	#define FWP_E_MATCH_TYPE_MISMATCH _HRESULT_TYPEDEF_(&h80320026)
	#define FWP_E_TYPE_MISMATCH _HRESULT_TYPEDEF_(&h80320027)
	#define FWP_E_OUT_OF_BOUNDS _HRESULT_TYPEDEF_(&h80320028)
	#define FWP_E_RESERVED _HRESULT_TYPEDEF_(&h80320029)
	#define FWP_E_DUPLICATE_CONDITION _HRESULT_TYPEDEF_(&h8032002A)
	#define FWP_E_DUPLICATE_KEYMOD _HRESULT_TYPEDEF_(&h8032002B)
	#define FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER _HRESULT_TYPEDEF_(&h8032002C)
	#define FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER _HRESULT_TYPEDEF_(&h8032002D)
	#define FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER _HRESULT_TYPEDEF_(&h8032002E)
	#define FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT _HRESULT_TYPEDEF_(&h8032002F)
	#define FWP_E_INCOMPATIBLE_AUTH_METHOD _HRESULT_TYPEDEF_(&h80320030)
	#define FWP_E_INCOMPATIBLE_DH_GROUP _HRESULT_TYPEDEF_(&h80320031)
	#define FWP_E_EM_NOT_SUPPORTED _HRESULT_TYPEDEF_(&h80320032)
	#define FWP_E_NEVER_MATCH _HRESULT_TYPEDEF_(&h80320033)
	#define FWP_E_PROVIDER_CONTEXT_MISMATCH _HRESULT_TYPEDEF_(&h80320034)
	#define FWP_E_INVALID_PARAMETER _HRESULT_TYPEDEF_(&h80320035)
	#define FWP_E_TOO_MANY_SUBLAYERS _HRESULT_TYPEDEF_(&h80320036)
	#define FWP_E_CALLOUT_NOTIFICATION_FAILED _HRESULT_TYPEDEF_(&h80320037)
	#define FWP_E_INVALID_AUTH_TRANSFORM _HRESULT_TYPEDEF_(&h80320038)
	#define FWP_E_INVALID_CIPHER_TRANSFORM _HRESULT_TYPEDEF_(&h80320039)
#endif

#define NAP_E_INVALID_PACKET _HRESULT_TYPEDEF_(&h80270001)
#define NAP_E_MISSING_SOH _HRESULT_TYPEDEF_(&h80270002)
#define NAP_E_CONFLICTING_ID _HRESULT_TYPEDEF_(&h80270003)
#define NAP_E_NO_CACHED_SOH _HRESULT_TYPEDEF_(&h80270004)
#define NAP_E_STILL_BOUND _HRESULT_TYPEDEF_(&h80270005)
#define NAP_E_NOT_REGISTERED _HRESULT_TYPEDEF_(&h80270006)
#define NAP_E_NOT_INITIALIZED _HRESULT_TYPEDEF_(&h80270007)
#define NAP_E_MISMATCHED_ID _HRESULT_TYPEDEF_(&h80270008)
#define NAP_E_NOT_PENDING _HRESULT_TYPEDEF_(&h80270009)
#define NAP_E_ID_NOT_FOUND _HRESULT_TYPEDEF_(&h8027000A)
#define NAP_E_MAXSIZE_TOO_SMALL _HRESULT_TYPEDEF_(&h8027000B)
#define NAP_E_SERVICE_NOT_RUNNING _HRESULT_TYPEDEF_(&h8027000C)
#define NAP_S_CERT_ALREADY_PRESENT _HRESULT_TYPEDEF_(&h0027000D)
#define NAP_E_ENTITY_DISABLED _HRESULT_TYPEDEF_(&h8027000E)
#define NAP_E_NETSH_GROUPPOLICY_ERROR _HRESULT_TYPEDEF_(&h8027000F)
#define NAP_E_TOO_MANY_CALLS _HRESULT_TYPEDEF_(&h80270010)
#define NAP_E_SHV_CONFIG_EXISTED _HRESULT_TYPEDEF_(&h80270011)
#define NAP_E_SHV_CONFIG_NOT_FOUND _HRESULT_TYPEDEF_(&h80270012)
#define NAP_E_SHV_TIMEOUT _HRESULT_TYPEDEF_(&h80270013)
#define _FLT_WINERROR_
#define FILTER_HRESULT_FROM_FLT_NTSTATUS(x) cast(HRESULT, ((x) and &h8000ffff) or (FACILITY_USERMODE_FILTER_MANAGER shl 16))
const FACILITY_USERMODE_FILTER_MANAGER = &h1f
const ERROR_FLT_IO_COMPLETE = cast(HRESULT, &h001f0001)
const ERROR_FLT_NO_HANDLER_DEFINED = cast(HRESULT, &h801f0001)
const ERROR_FLT_CONTEXT_ALREADY_DEFINED = cast(HRESULT, &h801f0002)
const ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = cast(HRESULT, &h801f0003)
const ERROR_FLT_DISALLOW_FAST_IO = cast(HRESULT, &h801f0004)
const ERROR_FLT_INVALID_NAME_REQUEST = cast(HRESULT, &h801f0005)
const ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = cast(HRESULT, &h801f0006)
const ERROR_FLT_NOT_INITIALIZED = cast(HRESULT, &h801f0007)
const ERROR_FLT_FILTER_NOT_READY = cast(HRESULT, &h801f0008)
const ERROR_FLT_POST_OPERATION_CLEANUP = cast(HRESULT, &h801f0009)
const ERROR_FLT_INTERNAL_ERROR = cast(HRESULT, &h801f000a)
const ERROR_FLT_DELETING_OBJECT = cast(HRESULT, &h801f000b)
const ERROR_FLT_MUST_BE_NONPAGED_POOL = cast(HRESULT, &h801f000c)
const ERROR_FLT_DUPLICATE_ENTRY = cast(HRESULT, &h801f000d)
const ERROR_FLT_CBDQ_DISABLED = cast(HRESULT, &h801f000e)
const ERROR_FLT_DO_NOT_ATTACH = cast(HRESULT, &h801f000f)
const ERROR_FLT_DO_NOT_DETACH = cast(HRESULT, &h801f0010)
const ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = cast(HRESULT, &h801f0011)
const ERROR_FLT_INSTANCE_NAME_COLLISION = cast(HRESULT, &h801f0012)
const ERROR_FLT_FILTER_NOT_FOUND = cast(HRESULT, &h801f0013)
const ERROR_FLT_VOLUME_NOT_FOUND = cast(HRESULT, &h801f0014)
const ERROR_FLT_INSTANCE_NOT_FOUND = cast(HRESULT, &h801f0015)
const ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = cast(HRESULT, &h801f0016)
const ERROR_FLT_INVALID_CONTEXT_REGISTRATION = cast(HRESULT, &h801f0017)
const ERROR_FLT_NAME_CACHE_MISS = cast(HRESULT, &h801f0018)
const ERROR_FLT_NO_DEVICE_OBJECT = cast(HRESULT, &h801f0019)
const ERROR_FLT_VOLUME_ALREADY_MOUNTED = cast(HRESULT, &h801f001a)
const ERROR_FLT_ALREADY_ENLISTED = cast(HRESULT, &h801f001b)
const ERROR_FLT_CONTEXT_ALREADY_LINKED = cast(HRESULT, &h801F001c)
const ERROR_FLT_NO_WAITER_FOR_REPLY = cast(HRESULT, &h801f0020)
const ERROR_FLT_REGISTRATION_BUSY = cast(HRESULT, &h801F0023)
#undef __IN__WINERROR_
