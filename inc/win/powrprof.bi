#pragma once

extern "C"

type _GLOBAL_MACHINE_POWER_POLICY
	Revision as ULONG
	LidOpenWakeAc as SYSTEM_POWER_STATE
	LidOpenWakeDc as SYSTEM_POWER_STATE
	BroadcastCapacityResolution as ULONG
end type

type GLOBAL_MACHINE_POWER_POLICY as _GLOBAL_MACHINE_POWER_POLICY
type PGLOBAL_MACHINE_POWER_POLICY as _GLOBAL_MACHINE_POWER_POLICY ptr

type _GLOBAL_USER_POWER_POLICY
	Revision as ULONG
	PowerButtonAc as POWER_ACTION_POLICY
	PowerButtonDc as POWER_ACTION_POLICY
	SleepButtonAc as POWER_ACTION_POLICY
	SleepButtonDc as POWER_ACTION_POLICY
	LidCloseAc as POWER_ACTION_POLICY
	LidCloseDc as POWER_ACTION_POLICY
	DischargePolicy(0 to NUM_DISCHARGE_POLICIES - 1) as SYSTEM_POWER_LEVEL
	GlobalFlags as ULONG
end type

type GLOBAL_USER_POWER_POLICY as _GLOBAL_USER_POWER_POLICY
type PGLOBAL_USER_POWER_POLICY as _GLOBAL_USER_POWER_POLICY ptr

type _GLOBAL_POWER_POLICY
	user as GLOBAL_USER_POWER_POLICY
	mach as GLOBAL_MACHINE_POWER_POLICY
end type

type GLOBAL_POWER_POLICY as _GLOBAL_POWER_POLICY
type PGLOBAL_POWER_POLICY as _GLOBAL_POWER_POLICY ptr

type _MACHINE_POWER_POLICY
	Revision as ULONG
	MinSleepAc as SYSTEM_POWER_STATE
	MinSleepDc as SYSTEM_POWER_STATE
	ReducedLatencySleepAc as SYSTEM_POWER_STATE
	ReducedLatencySleepDc as SYSTEM_POWER_STATE
	DozeTimeoutAc as ULONG
	DozeTimeoutDc as ULONG
	DozeS4TimeoutAc as ULONG
	DozeS4TimeoutDc as ULONG
	MinThrottleAc as UCHAR
	MinThrottleDc as UCHAR
	pad1(0 to 1) as UCHAR
	OverThrottledAc as POWER_ACTION_POLICY
	OverThrottledDc as POWER_ACTION_POLICY
end type

type MACHINE_POWER_POLICY as _MACHINE_POWER_POLICY
type PMACHINE_POWER_POLICY as _MACHINE_POWER_POLICY ptr

type _MACHINE_PROCESSOR_POWER_POLICY
	Revision as ULONG
	ProcessorPolicyAc as PROCESSOR_POWER_POLICY
	ProcessorPolicyDc as PROCESSOR_POWER_POLICY
end type

type MACHINE_PROCESSOR_POWER_POLICY as _MACHINE_PROCESSOR_POWER_POLICY
type PMACHINE_PROCESSOR_POWER_POLICY as _MACHINE_PROCESSOR_POWER_POLICY ptr

type _USER_POWER_POLICY
	Revision as ULONG
	IdleAc as POWER_ACTION_POLICY
	IdleDc as POWER_ACTION_POLICY
	IdleTimeoutAc as ULONG
	IdleTimeoutDc as ULONG
	IdleSensitivityAc as UCHAR
	IdleSensitivityDc as UCHAR
	ThrottlePolicyAc as UCHAR
	ThrottlePolicyDc as UCHAR
	MaxSleepAc as SYSTEM_POWER_STATE
	MaxSleepDc as SYSTEM_POWER_STATE
	Reserved(0 to 1) as ULONG
	VideoTimeoutAc as ULONG
	VideoTimeoutDc as ULONG
	SpindownTimeoutAc as ULONG
	SpindownTimeoutDc as ULONG
	OptimizeForPowerAc as BOOLEAN
	OptimizeForPowerDc as BOOLEAN
	FanThrottleToleranceAc as UCHAR
	FanThrottleToleranceDc as UCHAR
	ForcedThrottleAc as UCHAR
	ForcedThrottleDc as UCHAR
end type

type USER_POWER_POLICY as _USER_POWER_POLICY
type PUSER_POWER_POLICY as _USER_POWER_POLICY ptr

type _POWER_POLICY
	user as USER_POWER_POLICY
	mach as MACHINE_POWER_POLICY
end type

type POWER_POLICY as _POWER_POLICY
type PPOWER_POLICY as _POWER_POLICY ptr

#define EnableSysTrayBatteryMeter &h01
#define EnableMultiBatteryDisplay &h02
#define EnablePasswordLogon &h04
#define EnableWakeOnRing &h08
#define EnableVideoDimDisplay &h10
#define NEWSCHEME (UINT - 1)

'' TODO: typedef BOOLEAN (CALLBACK *PWRSCHEMESENUMPROC)(UINT,DWORD,LPTSTR,DWORD,LPTSTR,PPOWER_POLICY,LPARAM);
'' TODO: typedef BOOLEAN (CALLBACK *PFNNTINITIATEPWRACTION)(POWER_ACTION,SYSTEM_POWER_STATE,ULONG,BOOLEAN);

extern     WINAPI as BOOLEAN
dim shared WINAPI as BOOLEAN

'' TODO: BOOLEAN WINAPI GetPwrDiskSpindownRange(PUINT,PUINT);
'' TODO: BOOLEAN WINAPI EnumPwrSchemes(PWRSCHEMESENUMPROC,LPARAM);
'' TODO: BOOLEAN WINAPI ReadGlobalPwrPolicy(PGLOBAL_POWER_POLICY);
'' TODO: BOOLEAN WINAPI ReadPwrScheme(UINT,PPOWER_POLICY);
'' TODO: BOOLEAN WINAPI WritePwrScheme(PUINT,LPTSTR,LPTSTR,PPOWER_POLICY);
'' TODO: BOOLEAN WINAPI WriteGlobalPwrPolicy(PGLOBAL_POWER_POLICY);
'' TODO: BOOLEAN WINAPI DeletePwrScheme(UINT);
'' TODO: BOOLEAN WINAPI GetActivePwrScheme(PUINT);
'' TODO: BOOLEAN WINAPI SetActivePwrScheme(UINT,PGLOBAL_POWER_POLICY,PPOWER_POLICY);
'' TODO: BOOLEAN WINAPI GetPwrCapabilities(PSYSTEM_POWER_CAPABILITIES);
'' TODO: BOOLEAN WINAPI IsPwrSuspendAllowed(VOID);
'' TODO: BOOLEAN WINAPI IsPwrHibernateAllowed(VOID);
'' TODO: BOOLEAN WINAPI IsPwrShutdownAllowed(VOID);
'' TODO: BOOLEAN WINAPI IsAdminOverrideActive(PADMINISTRATOR_POWER_POLICY);
'' TODO: BOOLEAN WINAPI SetSuspendState(BOOLEAN,BOOLEAN,BOOLEAN);
'' TODO: BOOLEAN WINAPI GetCurrentPowerPolicies(PGLOBAL_POWER_POLICY,PPOWER_POLICY);
'' TODO: BOOLEAN WINAPI CanUserWritePwrScheme(VOID);
'' TODO: BOOLEAN WINAPI ReadProcessorPwrScheme(UINT,PMACHINE_PROCESSOR_POWER_POLICY);
'' TODO: BOOLEAN WINAPI WriteProcessorPwrScheme(UINT,PMACHINE_PROCESSOR_POWER_POLICY);
'' TODO: BOOLEAN WINAPI ValidatePowerPolicies(PGLOBAL_POWER_POLICY,PPOWER_POLICY);

#define _OVERRIDE_NTSTATUS_

'' TODO: LONG WINAPI CallNtPowerInformation(POWER_INFORMATION_LEVEL,PVOID,ULONG,PVOID,ULONG);

end extern
