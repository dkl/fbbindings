This repository contains...
* scripts for using fbfrog to generate .bi files for selected C libraries,
* manual modifications to those raw, generated .bi files,
* and the resulting .bi files themselves.

There are two branches:
* raw: .bi files as generated by fbfrog
* master: final .bi files = raw + manual modifications

Workflow:
1. Add new or update existing binding by adjusting the scripts and committing
   the new raw .bi files in the "raw" branch
2. Merge "raw" into "master". If the raw .bi isn't ready for use, commit manual
   modifications to "master" to make it usable. If needed, fix merge conflicts,
   e.g. in case old manual modifications no longer apply to new raw .bi files.
Hopefully, most manual modifications can be reapplied to updated raw .bi files
automatically. This way we could update FreeBASIC bindings without having to
redo most of the manual work.

License: LGPLv2

--------------------------------------------------------------------------------

Special binding-specific notes/issues:

libpng:
  There are multiple libpng release series, 1.2.x, 1.4.x, 1.5.x, etc. and they
  are incompatible: For example, using the 1.5.14 header with the 1.2.50
  library results in:
      libpng warning: Application was compiled with png.h from libpng-1.5.14
      libpng warning: Application  is  running with png.c from libpng-1.2.50
  (and png_create_read_struct() fails because of the version mismatch)
  The same problem can also happen in the other direction: For example, header
  1.2 isn't compatible with library 1.5.

  The problem is that different systems have different libpng versions
  installed, and the FreeBASIC binding cannot just support one version, because
  then it wouldn't work on the other systems. At the time of writing, the latest
  libpng series is 1.6, but Debian/Ubuntu use the 1.2 series.

  Thus, it seems like FreeBASIC bindings for multiple libpng versions are
  needed. FB programs should just #include png.bi, but depending on the system
  they may need the 1.2, 1.5, 1.6, etc. version of the libpng API. This could be
  handled by having a #define which tells png.bi which API version to use. This
  way it should be possible to compile the same source code for the
  system-specific libpng version.
