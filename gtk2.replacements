convert c:
	#define GDK_THREADS_ENTER()			\
		G_STMT_START {				\
			if (gdk_threads_lock)		\
				(*gdk_threads_lock)();	\
		} G_STMT_END
to fb:
	#macro GDK_THREADS_ENTER()
		if gdk_threads_lock then
			gdk_threads_lock()
		end if
	#endmacro

convert c:
	#define GDK_THREADS_LEAVE()				\
		G_STMT_START {					\
			if (gdk_threads_unlock)			\
				(*gdk_threads_unlock)();	\
		} G_STMT_END
to fb:
	#macro GDK_THREADS_LEAVE()
		if gdk_threads_unlock then
			gdk_threads_unlock()
		end if
	#endmacro

convert c:
	#define GTK_OBJECT_SET_FLAGS(obj, flag)			\
		G_STMT_START {					\
			(GTK_OBJECT_FLAGS(obj) |= (flag));	\
		} G_STMT_END
to fb:
	#macro GTK_OBJECT_SET_FLAGS(obj, flag)
		scope
			GTK_OBJECT_FLAGS(obj) or= (flag)
		end scope
	#endmacro

convert c:
	#define GTK_OBJECT_UNSET_FLAGS(obj, flag)		\
		G_STMT_START {					\
			(GTK_OBJECT_FLAGS(obj) &= ~(flag));	\
		} G_STMT_END
to fb:
	#macro GTK_OBJECT_UNSET_FLAGS(obj, flag)
		scope
			GTK_OBJECT_FLAGS(obj) and= not (flag)
		end scope
	#endmacro

convert c:
	#define GTK_WIDGET_SET_FLAGS(wid, flag)			\
		G_STMT_START {					\
			(GTK_WIDGET_FLAGS(wid) |= (flag));	\
		} G_STMT_END
to fb:
	#macro GTK_WIDGET_SET_FLAGS(wid, flag)
		scope
			GTK_WIDGET_FLAGS(wid) or= (flag)
		end scope
	#endmacro

convert c:
	#define GTK_WIDGET_UNSET_FLAGS(wid, flag)		\
		G_STMT_START {					\
			(GTK_WIDGET_FLAGS(wid) &= ~(flag));	\
		} G_STMT_END
to fb:
	#macro GTK_WIDGET_UNSET_FLAGS(wid, flag)
		scope
			GTK_WIDGET_FLAGS(wid) and= not (flag)
		end scope
	#endmacro

convert c: #define GTK_CLIST_SET_FLAG(clist, flag) (GTK_CLIST_FLAGS(clist) |= (GTK_ ## flag))
to fb:
	#macro GTK_CLIST_SET_FLAG(clist, flag)
		scope
			GTK_CLIST_FLAGS(clist) or= (GTK_##flag)
		end scope
	#endmacro

convert c: #define GTK_CLIST_UNSET_FLAG(clist, flag) (GTK_CLIST_FLAGS(clist) &= ~(GTK_ ## flag))
to fb:
	#macro GTK_CLIST_UNSET_FLAG(clist, flag)
		scope
			GTK_CLIST_FLAGS(clist) and= not (GTK_##flag)
		end scope
	#endmacro
