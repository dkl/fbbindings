convert c: #define XtSetArg(arg, n, d) ((void)( (arg).name = (n), (arg).value = (XtArgVal)(d) ))
to fb:
	#macro XtSetArg(arg, n, d)
		scope
			(arg).name = (n)
			(arg).value = cast(XtArgVal, d)
		end scope
	#endmacro

convert c: #define XtOffset(p_type,field) ((Cardinal) (((char *) (&(((p_type)NULL)->field))) - ((char *) NULL)))
to fb:     #define XtOffset(p_type, field) cast(Cardinal, cptr(byte ptr, @cast(p_type, NULL)->field) - cptr(byte ptr, NULL))

convert c: #define XtOffsetOf(s_type,field) XtOffset(s_type*,field)
to fb:     #define XtOffsetOf(s_type, field) XtOffset(s_type ptr, field)

convert c:
	#define IceGetHeader(_iceConn, _major, _minor, _headerSize, _msgType, _pMsg) \
		if ((_iceConn->outbufptr + _headerSize) > _iceConn->outbufmax) \
			IceFlush (_iceConn); \
		_pMsg = (_msgType *) _iceConn->outbufptr; \
		_pMsg->majorOpcode = _major; \
		_pMsg->minorOpcode = _minor; \
		_pMsg->length = (_headerSize - SIZEOF (iceMsg)) >> 3; \
		_iceConn->outbufptr += _headerSize; \
		_iceConn->send_sequence++
to fb:
	#macro IceGetHeader(_iceConn, _major, _minor, _headerSize, _msgType, _pMsg)
		scope
			if (_iceConn->outbufptr + _headerSize) > _iceConn->outbufmax then
				IceFlush(_iceConn)
			end if
			_pMsg = cptr(_msgType ptr, _iceConn->outbufptr)
			_pMsg->majorOpcode = _major
			_pMsg->minorOpcode = _minor
			_pMsg->length = (_headerSize - XSIZEOF(iceMsg)) shr 3
			_iceConn->outbufptr += _headerSize
			_iceConn->send_sequence += 1
		end scope
	#endmacro

convert c:
	#define IceGetHeaderExtra(_iceConn, _major, _minor, _headerSize, _extra, _msgType, _pMsg, _pData) \
		if ((_iceConn->outbufptr + _headerSize + ((_extra) << 3)) > _iceConn->outbufmax) \
			IceFlush (_iceConn); \
		_pMsg = (_msgType *) _iceConn->outbufptr; \
		if ((_iceConn->outbufptr + _headerSize + ((_extra) << 3)) <= _iceConn->outbufmax) \
			_pData = (char *) _pMsg + _headerSize; \
		else \
			_pData = NULL; \
		_pMsg->majorOpcode = _major; \
		_pMsg->minorOpcode = _minor; \
		_pMsg->length = ((_headerSize - SIZEOF (iceMsg)) >> 3) + (_extra); \
		_iceConn->outbufptr += (_headerSize + ((_extra) << 3)); \
		_iceConn->send_sequence++
to fb:
	#macro IceGetHeaderExtra(_iceConn, _major, _minor, _headerSize, _extra, _msgType, _pMsg, _pData)
		scope
			if (_iceConn->outbufptr + _headerSize + ((_extra) shl 3)) > _iceConn->outbufmax then
				IceFlush(_iceConn)
			end if
			_pMsg = cptr(_msgType ptr, _iceConn->outbufptr)
			if (_iceConn->outbufptr + _headerSize + ((_extra) shl 3)) <= _iceConn->outbufmax then
				_pData = cptr(any ptr, _pMsg) + _headerSize
			else
				_pData = NULL
			end if
			_pMsg->majorOpcode = _major
			_pMsg->minorOpcode = _minor
			_pMsg->length = ((_headerSize - XSIZEOF(iceMsg)) shr 3) + (_extra)
			_iceConn->outbufptr += (_headerSize + ((_extra) shl 3))
			_iceConn->send_sequence += 1
		end scope
	#endmacro

convert c:
	#define IceWritePad(_iceConn, _bytes) \
		{ \
			if ((_iceConn->outbufptr + (_bytes)) > _iceConn->outbufmax) { \
				char _dummy[7] = { 0 }; \
				IceFlush (_iceConn); \
				_IceWrite (_iceConn, (unsigned long) (_bytes), _dummy); \
			} else { \
				_iceConn->outbufptr += (_bytes); \
			} \
		}
to fb:
	#macro IceWritePad(_iceConn, _bytes)
		scope
			if (_iceConn->outbufptr + (_bytes)) > _iceConn->outbufmax then
				dim _dummy(0 to 6) as byte
				IceFlush(_iceConn)
				_IceWrite(_iceConn, cast(culong, _bytes), @_dummy(0))
			else
				_iceConn->outbufptr += (_bytes)
			end if
		end scope
	#endmacro

convert c: #define IceReadSimpleMessage(_iceConn, _msgType, _pMsg) _pMsg = (_msgType *) (_iceConn->inbuf);
to c:      #define IceReadSimpleMessage(_iceConn, _msgType, _pMsg) _pMsg = (_msgType *) (_iceConn->inbuf)

convert c: #define IceReadData(_iceConn, _bytes, _pData) _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData);
to c:      #define IceReadData(_iceConn, _bytes, _pData) _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData)
